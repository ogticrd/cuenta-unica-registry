/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t=t||self).tf=t.tf||{})}(this,(function(t){"use strict";class e{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=t,this.platform=e}registerFlag(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){const e=this.urlFlags[t];console.warn(`Setting feature override from URL ${t}: ${e}.`),this.set(t,e)}}async getAsync(t){return t in this.flags||(this.flags[t]=await this.evaluateFlag(t)),this.flags[t]}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(e instanceof Promise)throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const t=function(t){const e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(t,...n)=>(function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,n[0],n[1]),n.join("="))),e}(this.global.location.search);if("tfjsflags"in t){t.tfjsflags.split(",").forEach(t=>{const[e,n]=t.split(":");this.urlFlags[e]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error(`Could not parse value flag value ${e} for flag ${t}.`)}(e,n)})}}}function n(){return t.ENV}let r;function s(){if(null==r){let t;if("undefined"!=typeof window)t=window;else if("undefined"!=typeof global)t=global;else if("undefined"!=typeof process)t=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}r=t}return r}function a(t,e){const n=function(){const t=s();return null==t._tfGlobals&&(t._tfGlobals=new Map),t._tfGlobals}();if(n.has(t))return n.get(t);{const r=e();return n.set(t,r),n.get(t)}}t.ENV=null;const i=a("kernelRegistry",()=>new Map),o=a("gradRegistry",()=>new Map);function l(t,e){const n=d(t,e);return i.get(n)}function u(t){return o.get(t)}function c(t){const e=i.entries(),n=[];for(;;){const{done:r,value:s}=e.next();if(r)break;const[a,i]=s,[o]=a.split("_");o===t&&n.push(i)}return n}function h(t){const{kernelName:e,backendName:n}=t,r=d(e,n);i.has(r)&&console.warn(`The kernel '${e}' for backend '${n}' is already registered`),i.set(r,t)}function p(t){const{kernelName:e}=t;o.has(e)&&n().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${e}'`),o.set(e,t)}function d(t,e){return`${e}_${t}`}function f(t){let e=t.length,n=0,r=0;for(;e>0;)r=Math.random()*e|0,e--,n=t[e],t[e]=t[r],t[r]=n}function m(t,e,n){return Math.max(t,Math.min(e,n))}function g(t){return t%2==0?t:t+1}function y(t){let e=0;for(let n=0;n<t.length;n++)e+=t[n];return e}function b(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function x(t,e,n=""){b(C(t,e),()=>n+` Shapes ${t} and ${e} must match`)}function w(t){b(null!=t,()=>"The input to the tensor constructor must be a non-null value.")}function v(t,e=[],n=!1){if(null==e&&(e=[]),Array.isArray(t)||z(t)&&!n)for(let r=0;r<t.length;++r)v(t[r],e,n);else e.push(t);return e}function N(t){if(0===t.length)return 1;let e=t[0];for(let n=1;n<t.length;n++)e*=t[n];return e}function C(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function S(t){return t%1==0}function k(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;{const e=Math.exp(2*t);return(e-1)/(e+1)}}function I(t){const e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function E(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function A(t,e=(t=>0),n){return new Promise((r,s)=>{let a=0;const i=()=>{if(t())return void r();a++;const o=e(a);null!=n&&a>=n?s():setTimeout(i,o)};i()})}function T(t,e){let n=1,r=-1;for(let e=0;e<t.length;++e)if(t[e]>=0)n*=t[e];else if(-1===t[e]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${e}`);r=e}else if(t[e]<0)throw Error(`Shapes can not be < 0. Found ${t[e]} at dim ${e}`);if(-1===r){if(e>0&&e!==n)throw Error(`Size(${e}) must match the product of shape ${t}`);return t}if(0===n)throw Error(`Cannot infer the missing size in [${t}] when there are 0 elements`);if(e%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${n}`);const s=t.slice();return s[r]=e/n,s}function $(t,e){const n=e.length;return b((t=null==t?e.map((t,e)=>e):[].concat(t)).every(t=>t>=-n&&t<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis `+t),b(t.every(t=>S(t)),()=>"All values in axis param must be integers but got axis "+t),t.map(t=>t<0?n+t:t)}function R(t,e){const n=[],r=[],s=null!=e&&Array.isArray(e)&&0===e.length,a=null==e||s?null:$(e,t).sort();let i=0;for(let e=0;e<t.length;++e){if(null!=a){if(a[i]===e&&1!==t[e])throw new Error(`Can't squeeze axis ${e} since its dim '${t[e]}' is not 1`);(null==a[i]||a[i]>e)&&1===t[e]&&(n.push(t[e]),r.push(e)),a[i]<=e&&i++}1!==t[e]&&(n.push(t[e]),r.push(e))}return{newShape:n,keptDims:r}}function D(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error("Unknown data type "+t);n=new Uint8Array(e)}return n}function _(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error("Unknown data type "+t);n=new Array(e)}return n}function F(t,e){for(let n=0;n<t.length;n++){const r=t[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${e} being uploaded contains ${r}.`)}}function O(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}function M(t,e){return"complex64"!==e&&(("float32"!==e||"complex64"===t)&&(("int32"!==e||"float32"===t||"complex64"===t)&&("bool"!==e||"bool"!==t)))}function z(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function L(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function B(t){if(null==t)return 0;let e=0;return t.forEach(t=>e+=t.length),e}function P(t){return"string"==typeof t||t instanceof String}function W(t){return"boolean"==typeof t}function V(t){return"number"==typeof t}function U(t){return Array.isArray(t)?U(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":V(t)?"float32":P(t)?"string":W(t)?"bool":"float32"}function G(t){return!!(t&&t.constructor&&t.call&&t.apply)}function H(t,e){for(let n=e;n<t;++n)if(t%n==0)return n;return t}function j(t){const e=t.length;if(e<2)return[];const n=new Array(e-1);n[e-2]=t[e-1];for(let r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function q(t,e){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=v(t)),n().getBool("DEBUG")&&F(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){const e=new Uint8Array(t.length);for(let n=0;n<e.length;++n)0!==Math.round(t[n])&&(e[n]=1);return e}throw new Error("Unknown data type "+e)}function K(t,e){if(0===t.length)return e[0];const n=t.reduce((t,e)=>t*e);if(0===n)return[];if(n!==e.length)throw new Error(`[${t}] does not match the input size ${e.length}.`);return function t(e,n,r){const s=new Array;if(1===n.length){const t=n[0];for(let n=0;n<t;n++)s[n]=r[e+n]}else{const a=n[0],i=n.slice(1),o=i.reduce((t,e)=>t*e);for(let n=0;n<a;n++)s[n]=t(e+n*o,i,r)}return s}(0,t,e)}function X(t,e){const n=Y(t,e);for(let t=0;t<n.length;t++)n[t]=1;return n}function Y(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type "+e)}function J(t,e){const n=t.reduce((t,e)=>t*e,1);if(null==e||"float32"===e)return K(t,new Float32Array(n));if("int32"===e)return K(t,new Int32Array(n));if("bool"===e)return K(t,new Uint8Array(n));throw new Error("Unknown data type "+e)}function Z(){return n().platform.now()}function Q(t){t.forEach(e=>{b(Number.isInteger(e)&&e>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${t}].`)})}function tt(t,e){return n().platform.fetch(t,e)}function et(t,e="utf-8"){return e=e||"utf-8",n().platform.encode(t,e)}function nt(t,e="utf-8"){return e=e||"utf-8",n().platform.decode(t,e)}function rt(t,e,n){if(0===e)return 0;if(1===e)return t[0];let r=t[t.length-1];for(let e=0;e<t.length-1;++e)r+=n[e]*t[e];return r}function st(t,e,n){if(0===e)return[];if(1===e)return[t];const r=new Array(e);for(let e=0;e<r.length-1;++e)r[e]=Math.floor(t/n[e]),t-=r[e]*n[e];return r[r.length-1]=t,r}var at=Object.freeze({__proto__:null,shuffle:f,clamp:m,nearestLargerEven:g,sum:y,randUniform:function(t,e){const n=Math.random();return e*n+(1-n)*t},distSquared:function(t,e){let n=0;for(let r=0;r<t.length;r++){const s=Number(t[r])-Number(e[r]);n+=s*s}return n},assert:b,assertShapesMatch:x,assertNonNull:w,flatten:v,sizeFromShape:N,isScalarShape:function(t){return 0===t.length},arraysEqual:C,isInt:S,tanh:k,sizeToSquarishShape:I,createShuffledIndices:function(t){const e=new Uint32Array(t);for(let n=0;n<t;++n)e[n]=n;return f(e),e},rightPad:E,repeatedTry:A,inferFromImplicitShape:T,parseAxisParam:$,squeezeShape:R,getTypedArrayFromDType:D,getArrayFromDType:_,checkConversionForErrors:F,isValidDtype:O,hasEncodingLoss:M,isTypedArray:z,bytesPerElement:L,bytesFromStringArray:B,isString:P,isBoolean:W,isNumber:V,inferDtype:U,isFunction:G,nearestDivisor:H,computeStrides:j,toTypedArray:q,toNestedArray:K,makeOnesTypedArray:X,makeZerosTypedArray:Y,makeZerosNestedTypedArray:J,now:Z,assertNonNegativeIntegerDimensions:Q,fetch:tt,encodeString:et,decodeString:nt,locToIndex:rt,indexToLoc:st});class it{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new lt)}profileKernel(t,e,n){let r;const s=this.backendTimer.time(()=>{r=n()});for(let e=0;e<r.length;e++){const n=r[e];n.data().then(e=>{ot(e,n.dtype,t)})}return{kernelName:t,outputs:r,inputs:e,timeMs:s.then(t=>t.kernelMs),extraInfo:s.then(t=>null!=t.getExtraProfileInfo?t.getExtraProfileInfo():"")}}logKernelProfile(t){const{kernelName:e,outputs:n,timeMs:r,inputs:s,extraInfo:a}=t;n.forEach(t=>{Promise.all([t.data(),r,a]).then(n=>{this.logger.logKernelProfile(e,t,n[0],n[1],s,n[2])})})}}function ot(t,e,n){if("float32"!==e)return!1;for(let e=0;e<t.length;e++){const r=t[e];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class lt{logKernelProfile(t,e,n,r,s,a){const i="number"==typeof r?E(r+"ms",9):r.error,o=E(t,25),l=e.rank,u=e.size,c=E(e.shape.toString(),14);let h="";for(const t in s){const n=s[t];if(null!=n){const r=n.shape||e.shape,s=r.length;h+=`${t}: ${s}D ${s>0?r:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function ut(t,e,n,r){const s=j(e),a=function(t,e,n,r){const s=N(e),a=r[r.length-1],i=new Array(a).fill(0),o=e.length,l="complex64"===n?pt(t):t;if(o>1)for(let t=0;t<s/a;t++){const e=t*a;for(let t=0;t<a;t++)i[t]=Math.max(i[t],ct(l[e+t],0,n).length)}return i}(t,e,n,s),i=e.length,o=function t(e,n,r,s,a,i=!0){const o="complex64"===r?2:1,l=n[0],u=n.length;if(0===u){if("complex64"===r){return[ct(pt(e)[0],0,r)]}return"bool"===r?[ht(e[0])]:[e[0].toString()]}if(1===u){if(l>20){const t=3*o;let n=Array.from(e.slice(0,t)),s=Array.from(e.slice((l-3)*o,l*o));return"complex64"===r&&(n=pt(n),s=pt(s)),["["+n.map((t,e)=>ct(t,a[e],r)).join(", ")+", ..., "+s.map((t,e)=>ct(t,a[l-3+e],r)).join(", ")+"]"]}return["["+("complex64"===r?pt(e):Array.from(e)).map((t,e)=>ct(t,a[e],r)).join(", ")+"]"]}const c=n.slice(1),h=s.slice(1),p=s[0]*o,d=[];if(l>20){for(let n=0;n<3;n++){const s=n*p,i=s+p;d.push(...t(e.slice(s,i),c,r,h,a,!1))}d.push("...");for(let n=l-3;n<l;n++){const s=n*p,i=s+p;d.push(...t(e.slice(s,i),c,r,h,a,n===l-1))}}else for(let n=0;n<l;n++){const s=n*p,i=s+p;d.push(...t(e.slice(s,i),c,r,h,a,n===l-1))}const f=2===u?",":"";d[0]="["+d[0]+f;for(let t=1;t<d.length-1;t++)d[t]=" "+d[t]+f;let m=",\n";for(let t=2;t<u;t++)m+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(i?"":m),d}(t,e,n,s,a),l=["Tensor"];return r&&(l.push("  dtype: "+n),l.push("  rank: "+i),l.push(`  shape: [${e}]`),l.push("  values:")),l.push(o.map(t=>"    "+t).join("\n")),l.join("\n")}function ct(t,e,n){let r;return r=Array.isArray(t)?parseFloat(t[0].toFixed(7))+" + "+parseFloat(t[1].toFixed(7))+"j":P(t)?`'${t}'`:"bool"===n?ht(t):parseFloat(t.toFixed(7)).toString(),E(r,e)}function ht(t){return 0===t?"false":"true"}function pt(t){const e=[];for(let n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}class dt{constructor(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=N(t),null!=n){const t=n.length;b(t===this.size,()=>`Length of values '${t}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||_(e,this.size),this.strides=j(t)}set(t,...e){0===e.length&&(e=[0]),b(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);const n=this.locToIndex(e);this.values[n]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const n of t){if(n<0||n>=this.shape[e]){const e=`Requested out of range element at ${t}.   Buffer shape=`+this.shape;throw new Error(e)}e++}let n=t[t.length-1];for(let e=0;e<t.length-1;++e)n+=this.strides[e]*t[e];return this.values[n]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return ft().makeTensor(this.values,this.shape,this.dtype)}}let ft=null,mt=null,gt=null;class yt{constructor(t,e,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=N(t),this.strides=j(t),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const t=await this.data();return mt.buffer(this.shape,this.dtype,t)}bufferSync(){return mt.buffer(this.shape,this.dtype,this.dataSync())}async array(){const t=await this.data();return K(this.shape,t)}arraySync(){return K(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const t=ft().read(this.dataId);if("string"===this.dtype){const e=await t;try{return e.map(t=>nt(t))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataSync(){this.throwIfDisposed();const t=ft().readSync(this.dataId);if("string"===this.dtype)try{return t.map(t=>nt(t))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();const t=await ft().read(this.dataId);return"string"===this.dtype?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(ft().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return mt.print(this,t)}clone(){return this.throwIfDisposed(),mt.clone(this)}toString(t=!1){return ut(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),mt.cast(this,t)}variable(t=!0,e,n){return this.throwIfDisposed(),ft().makeVariable(this,t,e,n)}}Object.defineProperty(yt,Symbol.hasInstance,{value:t=>!!t&&null!=t.data&&null!=t.dataSync&&null!=t.throwIfDisposed});class bt extends yt{constructor(t,e,n,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=n}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!C(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);ft().disposeTensor(this),this.dataId=t.dataId,ft().incRef(this,null)}dispose(){ft().disposeVariable(this),this.isDisposedInternal=!0}}var xt,wt,vt,Nt,Ct;Object.defineProperty(bt,Symbol.hasInstance,{value:t=>t instanceof yt&&null!=t.assign&&t.assign instanceof Function}),(xt=t.Rank||(t.Rank={})).R0="R0",xt.R1="R1",xt.R2="R2",xt.R3="R3",xt.R4="R4",xt.R5="R5",xt.R6="R6",function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(wt||(wt={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(vt||(vt={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(Nt||(Nt={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(Ct||(Ct={}));const St={float32:Nt,int32:wt,bool:vt,complex64:Ct};function kt(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error(`Can not upcast ${t} with ${e}`)}return St[t][e]}function It(t){return kt(t,"int32")}function Et(t,e){if(t.dtype===e.dtype)return[t,e];const n=kt(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function At(t,e){b(t.dtype===e.dtype,()=>`The dtypes of the first(${t.dtype}) and second(${e.dtype}) input must match`)}function Tt(t,e){return e.some(e=>e.id===t.id)}function $t(t){const e=[];return function t(e,n,r){if(null==e)return;if(e instanceof yt)return void n.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const a=e;for(const e in a){const s=a[e];r.has(s)||(r.add(s),t(s,n,r))}}(t,e,new Set),e}var Rt=Object.freeze({__proto__:null,makeTypesMatch:Et,assertTypesMatch:At,isTensorInList:Tt,getTensorsInContainer:$t});class Dt{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}class _t{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Dt}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;{const{asyncInit:e}=this.initializeBackend(t);if(e)return null}}return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,n=1){return t in this.registryFactory?(console.warn(t+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:e,priority:n},!0)}async setBackend(t){if(null==this.registryFactory[t])throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,null==this.registry[t]){this.backendInstance=null;const{success:e,asyncInit:n}=this.initializeBackend(t);if(!(n?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new it(this.backendInstance),!0}setupRegisteredKernels(){c(this.backendName).forEach(t=>{null!=t.setupFunc&&t.setupFunc(this.backendInstance)})}disposeRegisteredKernels(t){c(t).forEach(e=>{null!=e.disposeFunc&&e.disposeFunc(this.registry[t])})}initializeBackend(t){const e=this.registryFactory[t];if(null==e)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{const n=e.factory();if(Promise.resolve(n)===n){const e=++this.pendingBackendInitId,r=n.then(n=>!(e<this.pendingBackendInitId)&&(this.registry[t]=n,this.pendingBackendInit=null,!0)).catch(n=>(e<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${t} failed`),console.warn(n.stack||n.message)),!1));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}return this.registry[t]=n,{success:!0,asyncInit:!1}}catch(e){return console.warn(`Initialization of backend ${t} failed`),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(t+" backend not found in registry");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority)}initializeBackendsAndReturnBest(){const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){const n=this.state.tensorInfo.get(e),r=n.backend,s=this.readSync(e);r.disposeData(e),n.backend=t,t.move(e,s,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let n,r=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=t}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(n),()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(t,e,n){t();try{const t=n();return e(),t}catch(t){throw e(),t}}nextTensorId(){return _t.nextTensorId++}nextVariableId(){return _t.nextVariableId++}clone(t){const e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],t=>({x:()=>{const e={x:t},n={dtype:"float32"};return Ot.runKernelFunc(e=>e.cast(t,"float32"),e,null,"Cast",n)}}),[],{}),e}runKernel(t,e,n,r,s){return this.runKernelFunc(null,e,null,t,n,r,s)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,n){const r=this.backend.numDataIds();let s=0;n.forEach(t=>{s+="complex64"===t.dtype?3:1});const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=r-e-s-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${t}'`)}runKernelFunc(t,e,n,r,s,a,i){let o,u=[];const c=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");const h=this.state.numBytes,p=this.state.numTensors;let d;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const f=l(r,this.backendName);let m,g;if(null!=f)d=()=>{const t=this.backend.numDataIds();m=f.kernelFunc({inputs:e,attrs:s,backend:this.backend});const n=Array.isArray(m)?m:[m];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,t,n);const o=n.map(({dataId:t,shape:e,dtype:n})=>this.makeTensorFromDataId(t,e,n));if(c){let t=this.getTensorsForGradient(r,e,o);if(null==t){null==i&&(i=[]);const e=o.filter((t,e)=>i[e]);t=(a||[]).slice().concat(e)}u=this.saveTensorsForBackwardMode(t)}return o};else{const e=t=>{c&&(u=t.map(t=>this.keep(this.clone(t))))};d=()=>{const n=this.backend.numDataIds();m=this.tidy(()=>t(this.backend,e));const s=Array.isArray(m)?m:[m];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,n,s),s}}return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(g=this.profiler.profileKernel(r,e,()=>d()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(g),o=g.outputs):o=d()}),c&&this.addTapeNode(r,e,o,n,u,s),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-h,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-p,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map(t=>null!=e[t]?e[t].shape:null),outputShapes:o.map(t=>t.shape),kernelTimeMs:g.timeMs,extraInfo:g.extraInfo}),Array.isArray(m)?o:o[0]}saveTensorsForBackwardMode(t){return t.map(t=>this.keep(this.clone(t)))}getTensorsForGradient(t,e,n){const r=u(t);if(null!=r){const t=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(b(Array.isArray(e),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(e).map(t=>e[t])):a=t.map(t=>e[t]);const i=n.filter((t,e)=>s[e]);return a.concat(i)}return null}makeTensor(t,e,n,r){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=t;"string"===n&&P(t[0])&&(s=t.map(t=>et(t)));const a=r.write(s,e,n),i=new yt(e,n,a,this.nextTensorId());if(this.incRef(i,r),"string"===n){const t=this.state.tensorInfo.get(a),e=B(s);this.state.numBytes+=e-t.bytes,t.bytes=e}return i}makeTensorFromDataId(t,e,n,r){const s=new yt(e,n=n||"float32",t,this.nextTensorId());return this.incRef(s,r),s}makeVariable(t,e=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.cast(r));const s=new bt(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}incRef(t,e){const n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(n=t.size*L(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof bt||this.track(t)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;const e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}disposeVariables(){for(const t in this.state.registeredVariables){const e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]}memory(){const t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;const e=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(t=>t.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const t of this.state.activeProfile.kernels)t.kernelTimeMs=await t.kernelTimeMs,t.extraInfo=await t.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(t,e,n,r,s,a){const i={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:s},o=u(t);null!=o&&(r=o.gradFunc),null!=r&&(i.gradient=t=>(t=t.map((t,e)=>{if(null==t){const t=n[e],r=Y(t.size,t.dtype);return this.makeTensor(r,t.shape,t.dtype)}return t}),r(t.length>1?t:t[0],s,a))),this.state.activeTape.push(i)}keep(t){return t.kept=!0,t}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){const e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){const e=$t(t),n=new Set(e.map(t=>t.id));for(let t=0;t<this.state.activeScope.track.length;t++){const e=this.state.activeScope.track[t];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach(t=>{t.kept||t.scopeId!==r.id||this.track(t)})}gradients(t,e,n,r=!1){if(b(e.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",t));b(s instanceof yt,()=>"The result y returned by f() must be a tensor.");const a=function(t,e,n){const r={},s={};for(let t=0;t<e.length;t++)r[e[t].id]=!0;for(let n=0;n<t.length;n++){const a=t[n],i=a.inputs;for(const t in i){const n=i[t];let o=!1;for(let t=0;t<e.length;t++)if(r[n.id]){a.outputs.forEach(t=>r[t.id]=!0),o=!0,s[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let e=t.length-1;e>=0;e--){const n=t[e],r=n.inputs;for(let t=0;t<n.outputs.length;t++)if(a[n.outputs[t].id]){for(const t in r)a[r[t].id]=!0,i[n.id]=!0;break}}const o=[];for(let e=0;e<t.length;e++){const n=t[e];if(s[n.id]&&i[n.id]){const t={};for(const e in n.inputs){const s=n.inputs[e];r[s.id]&&(t[e]=s)}const e=Object.assign({},n);e.inputs=t,e.outputs=n.outputs,o.push(e)}}return o}(this.state.activeTape,e,s);if(!r&&0===a.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const t={};t[s.id]=null==n?function(t){const e=X(N(t),"float32");return Ot.makeTensor(e,t,"float32")}(s.shape):n,function(t,e,n,r){for(let s=e.length-1;s>=0;s--){const a=e[s],i=[];if(a.outputs.forEach(e=>{const n=t[e.id];null!=n?i.push(n):i.push(null)}),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const e in a.inputs){if(!(e in o))throw new Error(`Cannot backprop through input ${e}. Available gradients found: ${Object.keys(o)}.`);const s=n(()=>o[e]());if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${e} must have 'float32' dtype, but has '${s.dtype}'`);const i=a.inputs[e];if(!C(s.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${e}' has shape '${s.shape}', which does not match the shape of the input '${i.shape}'`);if(null==t[i.id])t[i.id]=s;else{const e=t[i.id];t[i.id]=r(e,s),e.dispose()}}}}(t,a,t=>this.tidy(t),Mt);const r=e.map(e=>t[e.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(t=>{for(const e of t.saved)e.dispose()}),this.state.activeTape=null),{value:s,grads:r}})}customGrad(t){return b(G(t),()=>"The f passed in customGrad(f) must be a function."),(...e)=>{let n;b(e.every(t=>t instanceof yt),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const r={};return e.forEach((t,e)=>{r[e]=t}),this.runKernelFunc((r,s)=>(n=t(...e,s),b(n.value instanceof yt,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),b(G(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),r,(t,r)=>{const s=n.gradFunc(t,r),a=Array.isArray(s)?s:[s];b(a.length===e.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),b(a.every(t=>t instanceof yt),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const i={};return a.forEach((t,e)=>{i[e]=()=>t}),i})}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}async time(t){const e=Z(),n=await this.backend.time(t);return n.wallMs=Z()-e,n}track(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Dt;for(const t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Ft(){const n=s();if(null==n._tfengine){const t=new e(n);n._tfengine=new _t(t)}var r;return r=n._tfengine.ENV,t.ENV=r,ft=()=>n._tfengine,n._tfengine}_t.nextTensorId=0,_t.nextVariableId=0;const Ot=Ft();function Mt(t,e){const n={a:t,b:e};return Ot.runKernelFunc((n,r)=>{const s=n.add(t,e);return r([t,e]),s},n,null,"Add")}function zt(){if("undefined"!=typeof navigator&&null!=navigator){const t=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Lt(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var Bt=Object.freeze({__proto__:null,isMobile:zt,isBrowser:Lt});const Pt=n();function Wt(t,e){let r=t;if(z(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];const s=[];for(;Array.isArray(r)||z(r)&&"string"!==e;)s.push(r.length),r=r[0];return Array.isArray(t)&&n().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function t(e,n,r){if(r=r||[],!Array.isArray(e)&&!z(e))return void b(0===n.length,()=>`Element arr[${r.join("][")}] is a primitive, but should be an array/TypedArray of ${n[0]} elements`);b(n.length>0,()=>`Element arr[${r.join("][")}] should be a primitive, but is an array of ${e.length} elements`),b(e.length===n[0],()=>`Element arr[${r.join("][")}] should have ${n[0]} elements, but has ${e.length} elements`);const s=n.slice(1);for(let n=0;n<e.length;++n)t(e[n],s,r.concat(n))}(t,s,[]),s}function Vt(t,e,n,r){if(null!=t&&("numeric"!==t&&t!==e||"numeric"===t&&"string"===e))throw new Error(`Argument '${n}' passed to '${r}' must be ${t} tensor, but got ${e} tensor`)}function Ut(t,e,n,r="numeric"){if(t instanceof yt)return Vt(r,t.dtype,e,n),t;let s=U(t);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),Vt(r,s,e,n),null==t||!z(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){const r=null==t?"null":t.constructor.name;throw new Error(`Argument '${e}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=Wt(t,s);z(t)||Array.isArray(t)||(t=[t]);const i="string"!==s?q(t,s):v(t,[],!0);return Ot.makeTensor(i,a,s)}function Gt(t,e,n,r="numeric"){if(!Array.isArray(t))throw new Error(`Argument ${e} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return t.map((t,r)=>Ut(t,`${e}[${r}]`,n),r)}Pt.registerFlag("DEBUG",()=>!1,t=>{t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),Pt.registerFlag("IS_BROWSER",()=>Lt()),Pt.registerFlag("IS_NODE",()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node),Pt.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),Pt.registerFlag("PROD",()=>!1),Pt.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Pt.getBool("DEBUG")),Pt.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),Pt.registerFlag("IS_TEST",()=>!1);function Ht(t){const e=Object.keys(t);if(1!==e.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+e.length+" keys.");let n=e[0];const r=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const s=(...t)=>{Ot.startScope(n);try{const e=r(...t);return e instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),Ot.endScope(e),e}catch(t){throw Ot.endScope(null),t}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const jt=Ht({complex_:function(t,e){const n=Ut(t,"real","complex"),r=Ut(e,"imag","complex");x(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return Ot.runKernelFunc(t=>t.complex(n,r),s,null,"Complex")}});function qt(t,e,n,r){if(null==r&&(r=U(t)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!z(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){Q(e);const t=N(e),r=N(n);b(t===r,()=>`Based on the provided shape, [${e}], the tensor should have ${t} values but has ${r}`);for(let t=0;t<n.length;++t){const r=n[t],s=t!==n.length-1||r!==N(e.slice(t));b(n[t]===e[t]||!s,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `)}}return z(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==r?q(t,r):v(t,[],!0),Ot.makeTensor(t,e,r)}function Kt(t,e,n){return qt(t,e,Wt(t,n),n)}const Xt={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function Yt(t,e){const n=[],r=[],s=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);for(let a=0;a<s.length;++a){const i=s[a],o=Array.isArray(t)?t[a].tensor:t[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const t=new Promise(async t=>{const e=await o.bytes(),n=e.reduce((t,e)=>t+e.length,0)+4*e.length,r=new Uint8Array(n);let s=0;for(let t=0;t<e.length;t++){const n=e[t],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}t(r)});r.push(t)}else r.push(o.data());null!=e&&(l.group=e),n.push(l)}return{data:Zt(await Promise.all(r)),specs:n}}function Jt(t,e){const n={};let r,s=0;for(const a of e){const e=a.name,i=a.dtype,o=a.shape,l=N(o);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=Xt[n.dtype],c=t.slice(s,s+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let t=0;t<h.length;t++){const e=h[t];u[t]=e*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=se()),u=r(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${e}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let t=0;t<h.length;t++){const e=h[t];u[t]=Math.round(e*n.scale+n.min)}}s+=l*o}else if("string"===i){const e=N(a.shape);u=[];for(let n=0;n<e;n++){const e=new Uint32Array(t.slice(s,s+4))[0];s+=4;const n=new Uint8Array(t.slice(s,s+e));u.push(n),s+=e}}else{const r=Xt[i],a=t.slice(s,s+l*r);if("float32"===i)u=new Float32Array(a);else if("int32"===i)u=new Int32Array(a);else if("bool"===i)u=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${e}': ${i}`);{u=new Float32Array(a);const t=new Float32Array(u.length/2),r=new Float32Array(u.length/2);for(let e=0;e<t.length;e++)t[e]=u[2*e],r[e]=u[2*e+1];const s=Kt(t,o,"float32"),i=Kt(r,o,"float32");n[e]=jt(s,i)}}s+=l*r}"complex64"!==i&&(n[e]=Kt(u,o,i))}return n}function Zt(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));let e=0;const n=[];t.forEach(t=>{if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name)});const r=new Uint8Array(e);let s=0;return n.forEach(t=>{r.set(new Uint8Array(t.buffer),s),s+=t.byteLength}),r.buffer}const Qt="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function te(t){return Qt?Buffer.byteLength(t):new Blob([t]).size}function ee(t){if(1===t.length)return t[0];let e=0;t.forEach(t=>{e+=t.byteLength});const n=new Uint8Array(e);let r=0;return t.forEach(t=>{n.set(new Uint8Array(t),r),r+=t.byteLength}),n.buffer}function ne(t){for(t=t.trim();t.endsWith("/");)t=t.slice(0,t.length-1);const e=t.split("/");return e[e.length-1]}function re(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:te(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:te(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}function se(){const t=function(){const t=t=>{let e=t<<13,n=0;for(;0==(8388608&e);)n-=8388608,e<<=1;return e&=-8388609,n+=947912704,e|n},e=new Uint32Array(2048);e[0]=0;for(let n=1;n<1024;n++)e[n]=t(n);for(let t=1024;t<2048;t++)e[t]=939524096+(t-1024<<13);return e}(),e=function(){const t=new Uint32Array(64);t[0]=0,t[31]=1199570944,t[32]=2147483648,t[63]=3347054592;for(let e=1;e<31;e++)t[e]=e<<23;for(let e=33;e<63;e++)t[e]=2147483648+(e-32<<23);return t}(),n=function(){const t=new Uint32Array(64);for(let e=0;e<64;e++)t[e]=1024;return t[0]=t[32]=0,t}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const i=r[s],o=t[n[i>>10]+(1023&i)]+e[i>>10];a[s]=o}return new Float32Array(s)}}class ae{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==ae.instance&&(ae.instance=new ae),ae.instance}static registerSaveRouter(t){ae.getInstance().saveRouters.push(t)}static registerLoadRouter(t){ae.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return ae.getHandlers(t,"save")}static getLoadHandlers(t,e){return ae.getHandlers(t,"load",e)}static getHandlers(t,e,n){const r=[];return("load"===e?ae.getInstance().loadRouters:ae.getInstance().saveRouters).forEach(e=>{const s=e(t,n);null!==s&&r.push(s)}),r}}const ie=t=>ae.getSaveHandlers(t),oe=(t,e)=>ae.getLoadHandlers(t,e);function le(){if(!n().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const t="undefined"==typeof window?self:window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function ue(t){const e=t.result;e.createObjectStore("models_store",{keyPath:"modelPath"}),e.createObjectStore("model_info_store",{keyPath:"modelPath"})}class ce{constructor(t){if(this.indexedDB=le(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise((t,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>ue(r),r.onsuccess=()=>{const s=r.result;if(null==e){const e=s.transaction("models_store","readonly"),r=e.objectStore("models_store").get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));t(r.result.modelArtifacts)},r.onerror=t=>(s.close(),n(r.error)),e.oncomplete=()=>s.close()}else{const r=re(e),a=s.transaction("model_info_store","readwrite");let i=a.objectStore("model_info_store");const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:r});let l;o.onsuccess=()=>{l=s.transaction("models_store","readwrite");const o=l.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:r});o.onsuccess=()=>t({modelArtifactsInfo:r}),o.onerror=t=>{i=a.objectStore("model_info_store");const e=i.delete(this.modelPath);e.onsuccess=()=>(s.close(),n(o.error)),e.onerror=t=>(s.close(),n(o.error))}},o.onerror=t=>(s.close(),n(o.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}}},r.onerror=t=>n(r.error)})}}ce.URL_SCHEME="indexeddb://";const he=t=>{return n().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(ce.URL_SCHEME)?(e=t.slice(ce.URL_SCHEME.length),new ce(e)):null;var e};ae.registerSaveRouter(he),ae.registerLoadRouter(he);class pe{constructor(){this.indexedDB=le()}async listModels(){return new Promise((t,e)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>ue(n),n.onsuccess=()=>{const r=n.result,s=r.transaction("model_info_store","readonly"),a=s.objectStore("model_info_store").getAll();a.onsuccess=()=>{const e={};for(const t of a.result)e[t.modelPath]=t.modelArtifactsInfo;t(e)},a.onerror=t=>(r.close(),e(a.error)),s.oncomplete=()=>r.close()},n.onerror=t=>e(n.error)})}async removeModel(t){var e;return t=(e=t).startsWith(ce.URL_SCHEME)?e.slice(ce.URL_SCHEME.length):e,new Promise((e,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>ue(r),r.onsuccess=()=>{const s=r.result,a=s.transaction("model_info_store","readwrite"),i=a.objectStore("model_info_store"),o=i.get(t);let l;o.onsuccess=()=>{if(null==o.result)return s.close(),n(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const r=i.delete(t),a=()=>{l=s.transaction("models_store","readwrite");const r=l.objectStore("models_store").delete(t);r.onsuccess=()=>e(o.result.modelArtifactsInfo),r.onerror=t=>n(o.error)};r.onsuccess=a,r.onerror=t=>(a(),s.close(),n(o.error))}},o.onerror=t=>(s.close(),n(o.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}},r.onerror=t=>n(r.error)})}}const de="tensorflowjs_models",fe="info",me="model_topology",ge="weight_specs",ye="weight_data",be="model_metadata";function xe(t){return{info:[de,t,fe].join("/"),topology:[de,t,me].join("/"),weightSpecs:[de,t,ge].join("/"),weightData:[de,t,ye].join("/"),modelMetadata:[de,t,be].join("/")}}function we(t){const e=t.split("/");if(e.length<3)throw new Error("Invalid key format: "+t);return e.slice(1,e.length-1).join("/")}class ve{constructor(t){if(!n().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=xe(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),r=re(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(t){if(Qt)return Buffer.from(t).toString("base64");const e=new Uint8Array(t);let n="";for(let t=0,r=e.length;t<r;t++)n+=String.fromCharCode(e[t]);return btoa(n)}(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),{modelArtifactsInfo:r}}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const t=JSON.parse(this.LS.getItem(this.keys.info));if(null==t)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const e={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const t=JSON.parse(s);e.format=t.format,e.generatedBy=t.generatedBy,e.convertedBy=t.convertedBy,e.userDefinedMetadata=t.userDefinedMetadata}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=function(t){if(Qt){const e=Buffer.from(t,"base64");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}const e=atob(t),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)n.set([e.charCodeAt(t)],t);return n.buffer}(a),e}}ve.URL_SCHEME="localstorage://";const Ne=t=>{return n().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(ve.URL_SCHEME)?(e=t.slice(ve.URL_SCHEME.length),new ve(e)):null;var e};ae.registerSaveRouter(Ne),ae.registerLoadRouter(Ne);class Ce{constructor(){b(n().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),b("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const t={},e=de+"/",n="/"+fe;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(e)&&s.endsWith(n)){t[we(s)]=JSON.parse(this.LS.getItem(s))}}return t}async removeModel(t){var e;const n=xe(t=(e=t).startsWith(ve.URL_SCHEME)?e.slice(ve.URL_SCHEME.length):e);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${t}'`);const r=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),r}}class Se{constructor(){this.managers={}}static getInstance(){return null==Se.instance&&(Se.instance=new Se),Se.instance}static registerManager(t,e){b(null!=t,()=>"scheme must not be undefined or null."),t.endsWith("://")&&(t=t.slice(0,t.indexOf("://"))),b(t.length>0,()=>"scheme must not be an empty string.");const n=Se.getInstance();b(null==n.managers[t],()=>`A model store manager is already registered for scheme '${t}'.`),n.managers[t]=e}static getManager(t){const e=this.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(this.getInstance().managers)}}function ke(t){if(-1===t.indexOf("://"))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+Se.getSchemes().join(","));return{scheme:t.split("://")[0],path:t.split("://")[1]}}async function Ie(t,e,n=!1){b(t!==e,()=>`Old path and new path are the same: '${t}'`);const r=ae.getLoadHandlers(t);b(r.length>0,()=>`Copying failed because no load handler is found for source URL ${t}.`),b(r.length<2,()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${t}.`);const s=r[0],a=ae.getSaveHandlers(e);b(a.length>0,()=>`Copying failed because no save handler is found for destination URL ${e}.`),b(a.length<2,()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${e}.`);const i=a[0],o=ke(t).scheme,l=ke(t).path,u=o===ke(t).scheme,c=await s.load();n&&u&&await Se.getManager(o).removeModel(l);const h=await i.save(c);return n&&!u&&await Se.getManager(o).removeModel(l),h.modelArtifactsInfo}class Ee{fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Browser's encoder only supports utf-8, but got "+e);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}}if(n().get("IS_BROWSER")){n().setPlatform("browser",new Ee);try{Se.registerManager(ve.URL_SCHEME,new Ce)}catch(t){}try{Se.registerManager(ce.URL_SCHEME,new pe)}catch(t){}}const Ae=()=>require("node-fetch");let Te;class $e{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=n().global.fetch?n().global.fetch(t,e):(null==Te&&(Te=Ae()),Te(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Node built-in encoder only supports utf-8, but got "+e);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}}function Re(t,e="float32",n){return e=e||"float32",Q(t),new dt(t,e,n)}n().get("IS_NODE")&&n().setPlatform("node",new $e);const De=Ht({cast_:function(t,e){const n=Ut(t,"x","cast");if(!O(e))throw new Error("Failed to cast to unknown dtype "+e);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:e};return Ot.runKernelFunc(t=>t.cast(n,e),r,null,"Cast",s)}});const _e=Ht({clone_:function(t){const e=Ut(t,"x","clone",null),n={x:e};return Ot.runKernelFunc(()=>Ot.makeTensorFromDataId(e.dataId,e.shape,e.dtype),n,null,"Identity")}});function Fe(t,e=!1){console.log(t.toString(e))}Ft(),mt={buffer:Re,cast:De,clone:_e,print:Fe};function Oe(t){return new Promise(t=>setTimeout(t)).then(t)}class Me{constructor(t){if(!n().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(Me.URL_SCHEME)&&(t=t.slice(Me.URL_SCHEME.length)),null!=t&&0!==t.length||(t="model"),this.modelTopologyFileName=t+".json",this.weightDataFileName=t+".weights.bin"}async save(t){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},s=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(a.download=this.modelTopologyFileName,a.href=s,await Oe(()=>a.dispatchEvent(new MouseEvent("click"))),null!=t.weightData){const t=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;t.download=this.weightDataFileName,t.href=e,await Oe(()=>t.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:re(t)}}}}Me.URL_SCHEME="downloads://";class ze{constructor(t){if(null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+t);this.files=t}async load(){const t=this.files[0],e=this.files.slice(1);return new Promise((n,r)=>{const s=new FileReader;s.onload=s=>{const a=JSON.parse(s.target.result),i=a.modelTopology;if(null==i)return void r(new Error("modelTopology field is missing from file "+t.name));0===e.length&&n({modelTopology:i});const o=a.weightsManifest;if(null==o)return void r(new Error("weightManifest field is missing from file "+t.name));let l;try{l=this.checkManifestAndWeightFiles(o,e)}catch(t){return void r(t)}const u=[],c=[],h=[];o.forEach(t=>{t.paths.forEach(t=>{c.push(t),h.push(null)}),u.push(...t.weights)}),o.forEach(t=>{t.paths.forEach(t=>{const e=new FileReader;e.onload=e=>{const r=e.target.result,s=c.indexOf(t);h[s]=r,-1===h.indexOf(null)&&n({modelTopology:i,weightSpecs:u,weightData:ee(h),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy,userDefinedMetadata:a.userDefinedMetadata})},e.onerror=e=>r(`Failed to weights data from file of path '${t}'.`),e.readAsArrayBuffer(l[t])})})},s.onerror=e=>r(`Failed to read model topology and weights manifest JSON from file '${t.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),s.readAsText(t)})}checkManifestAndWeightFiles(t,e){const n=[],r=e.map(t=>ne(t.name)),s={};for(const a of t)a.paths.forEach(t=>{const a=ne(t);if(-1!==n.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(n.push(a),-1===r.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);s[t]=e[r.indexOf(a)]});if(n.length!==e.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${e.length}).`);return s}}function Le(t,e,n,r){!function(t){b(null!=t&&Array.isArray(t)&&t.length>0,()=>"promises must be a none empty array")}(t),function(t,e){b(t>=0&&t<=1,()=>"Progress fraction must be in range [0, 1], but got startFraction "+t),b(e>=0&&e<=1,()=>"Progress fraction must be in range [0, 1], but got endFraction "+e),b(e>=t,()=>`startFraction must be no more than endFraction, but got startFraction ${t} and endFraction `+e)}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(t.map(a=>(a.then(a=>{const i=n+ ++s/t.length*(r-n);return e(i),a}),a)))}async function Be(t,e){null==e&&(e={});const r=null==e.fetchFunc?n().platform.fetch:e.fetchFunc,s=t.map(t=>r(t,e.requestInit,{isBinary:!0})),a=(null==e.onProgress?await Promise.all(s):await Le(s,e.onProgress,0,.5)).map(t=>t.arrayBuffer());return null==e.onProgress?await Promise.all(a):await Le(a,e.onProgress,.5,1)}async function Pe(t,e="",n,r){return We(t=>Be(t,{requestInit:r}))(t,e,n)}function We(t){return async(e,n="",r)=>{const s=e.map(()=>!1),a={},i=null!=r?r.map(()=>!1):[],o=[];if(e.forEach((t,e)=>{let n=0;t.weights.forEach(t=>{const l="quantization"in t?t.quantization.dtype:t.dtype,u=Xt[l]*N(t.shape),c=()=>{s[e]=!0,null==a[e]&&(a[e]=[]),a[e].push({manifestEntry:t,groupOffset:n,sizeBytes:u})};null!=r?r.forEach((e,n)=>{e===t.name&&(c(),i[n]=!0)}):c(),o.push(t.name),n+=u})}),!i.every(t=>t)){const t=r.filter((t,e)=>!i[e]);throw new Error("Could not find weights in manifest with names: "+t.join(", ")+". \nManifest JSON has weights with names: "+o.join(", ")+".")}const l=s.reduce((t,e,n)=>(e&&t.push(n),t),[]),u=[];l.forEach(t=>{e[t].paths.forEach(t=>{const e=n+(n.endsWith("/")?"":"/")+t;u.push(e)})});const c=await t(u),h={};let p=0;return l.forEach(t=>{const n=e[t].paths.length;let r=0;for(let t=0;t<n;t++)r+=c[p+t].byteLength;const s=new ArrayBuffer(r),i=new Uint8Array(s);let o=0;for(let t=0;t<n;t++){const e=new Uint8Array(c[p+t]);i.set(e,o),o+=e.byteLength}a[t].forEach(t=>{const e=Jt(s.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(const t in e)h[t]=e[t]}),p+=n}),h}}ae.registerSaveRouter(t=>n().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Me.URL_SCHEME)?function(t="model"){return new Me(t)}(t.slice(Me.URL_SCHEME.length)):null);class Ve{constructor(t,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,this.weightUrlConverter=e.weightUrlConverter,null!=e.fetchFunc?(b("function"==typeof e.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=e.fetchFunc):this.fetch=n().platform.fetch,b(null!=t&&t.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(t)&&b(2===t.length,()=>`URL paths for http must have a length of 2, (actual length is ${t.length}).`),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:n};e.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,e);if(s.ok)return{modelArtifactsInfo:re(t),responses:[s]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+s.status+".")}async load(){const t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code `+t.status+". Please verify this URL points to the model JSON of the model to load.");let e;try{e=await t.json()}catch(t){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=e.modelTopology,r=e.weightsManifest,s=e.generatedBy,a=e.convertedBy,i=e.format,o=e.userDefinedMetadata;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let l,u;if(null!=r){const t=await this.loadWeights(r);[l,u]=t}return{modelTopology:n,weightSpecs:l,weightData:u,userDefinedMetadata:o,generatedBy:s,convertedBy:a,format:i}}async loadWeights(t){const e=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(t){const e=t.lastIndexOf("/"),n=t.lastIndexOf("?"),r=t.substring(0,e),s=n>e?t.substring(n):"";return[r+"/",s]}(e),s=this.weightPathPrefix||n,a=[];for(const e of t)a.push(...e.weights);const i=[],o=[];for(const e of t)for(const t of e.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(t)):i.push(s+t+r);return this.weightUrlConverter&&i.push(...await Promise.all(o)),[a,ee(await Be(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Ue(t){return null!=t.match(Ve.URL_SCHEME_REGEX)}Ve.URL_SCHEME_REGEX=/^https?:\/\//;const Ge=(t,e)=>{if("undefined"==typeof fetch&&(null==e||null==e.fetchFunc))return null;{let n=!0;if(n=Array.isArray(t)?t.every(t=>Ue(t)):Ue(t),n)return He(t,e)}return null};function He(t,e){return new Ve(t,e)}function je(t,e){return He(t,e)}ae.registerSaveRouter(Ge),ae.registerLoadRouter(Ge);class qe{constructor(t){this.modelArtifacts=t}async load(){return this.modelArtifacts}}class Ke{constructor(t){this.saveHandler=t}async save(t){return this.saveHandler(t)}}var Xe=Object.freeze({__proto__:null,browserFiles:function(t){return new ze(t)},browserHTTPRequest:je,concatenateArrayBuffers:ee,decodeWeights:Jt,encodeWeights:Yt,fromMemory:function(t,e,n,r){if(1===arguments.length){return null!=t.modelTopology||null!=t.weightSpecs?new qe(t):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new qe({modelTopology:t}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new qe({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:r})},getLoadHandlers:oe,getModelArtifactsInfoForJSON:re,getSaveHandlers:ie,http:He,isHTTPScheme:Ue,loadWeights:Pe,registerLoadRouter:t=>ae.registerLoadRouter(t),registerSaveRouter:t=>ae.registerSaveRouter(t),weightsLoaderFactory:We,withSaveHandler:function(t){return new Ke(t)},copyModel:async function(t,e){return Ie(t,e,!1)},listModels:async function(){const t=Se.getSchemes(),e={};for(const n of t){const t=await Se.getManager(n).listModels();for(const r in t){e[n+"://"+r]=t[r]}}return e},moveModel:async function(t,e){return Ie(t,e,!0)},removeModel:async function(t){const e=ke(t);return Se.getManager(e.scheme).removeModel(e.path)}});const Ye=Ht({reshape_:function(t,e){const n=Ut(t,"x","reshape",null);e=T(e,n.size),b(n.size===N(e),()=>"new shape and old shape must have the same number of elements.");const r={x:n},s={shape:e};return Ot.runKernelFunc((t,r)=>(r([n]),t.reshape(n,e)),r,null,"Reshape",s)}});const Je=Ht({matMul_:function(t,e,n=!1,r=!1){let s=Ut(t,"a","matMul"),a=Ut(e,"b","matMul");[s,a]=Et(s,a),b(s.rank>=2&&a.rank>=2&&s.rank===a.rank,()=>`Error in matMul: inputs must have the same rank of at least 2, got ranks ${s.rank} and ${a.rank}.`);const i=n?s.shape[s.rank-2]:s.shape[s.rank-1],o=r?a.shape[a.rank-1]:a.shape[a.rank-2],l=n?s.shape[s.rank-1]:s.shape[s.rank-2],u=r?a.shape[a.rank-2]:a.shape[a.rank-1],c=s.shape.slice(0,-2),h=a.shape.slice(0,-2),p=N(c),d=N(h);b(C(c,h),()=>`Error in matMul: outer dimensions (${c}) and (${h}) of Tensors with shapes ${s.shape} and `+a.shape+" must match."),b(i===o,()=>`Error in matMul: inner shapes (${i}) and (${o}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${n} and transposeB=${r} must match.`);const f=s.shape.slice(0,-2).concat([l,u]),m=Ye(s,n?[p,i,l]:[p,l,i]),g=Ye(a,r?[d,u,o]:[d,o,u]),y={a:m,b:g},x={transposeA:n,transposeB:r},w=Ot.runKernelFunc((t,e)=>(e([m,g]),t.batchMatMul(m,g,n,r)),y,null,"BatchMatMul",x);return Ye(w,f)}});const Ze=Ht({oneHot_:function(t,e,n=1,r=0){if(e<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+e);const s=Ut(t,"indices","oneHot","int32"),a=[...s.shape,e],i={indices:s},o={depth:e,onValue:n,offValue:r};return Ot.runKernelFunc((t,i)=>(i([s]),Ye(t.oneHot(Ye(s,[s.size]),e,n,r),a)),i,null,"OneHot",o)}});const Qe=Ht({transpose_:function(t,e){const n=Ut(t,"x","transpose");if(null==e&&(e=n.shape.map((t,e)=>e).reverse()),b(n.rank===e.length,()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${e}.`),e.forEach(t=>{b(t>=0&&t<n.rank,()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+e)}),n.rank<=1)return n.clone();const r={x:n},s={perm:e};return Ot.runKernelFunc(t=>t.transpose(n,e),r,null,"Transpose",s)}});const tn=Ht({confusionMatrix_:function(t,e,n){const r=Ut(t,"labels","confusionMatrix"),s=Ut(e,"predictions","confusionMatrix");b(null==n||n>0&&Number.isInteger(n),()=>"If provided, numClasses must be a positive integer, but got "+n),b(1===r.rank,()=>"Expected the rank of labels to be 1, but got "+r.rank),b(1===s.rank,()=>"Expected the rank of predictions to be 1, but got "+s.rank),b(r.shape[0]===s.shape[0],()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${s.shape[0]}. Labels and predictions should have the same number of elements.`),b(n>0&&Number.isInteger(n),()=>"numClasses is required to be a positive integer, but got "+n);const a=Ze(De(r,"int32"),n),i=Ze(De(s,"int32"),n),o=Qe(a);return De(Je(o,i),"int32")}});var en=Object.freeze({__proto__:null,confusionMatrix:tn});function nn(t,e,n){if(w(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");const r=Wt(t,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return qt(t,e,r,n)}let rn;const sn=Ht({fromPixels_:function(t,e=3){if(e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,i=!1;if(t.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&t instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)a=!0;else{if(null==t.getContext)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);i=!0}if(s){const e=2;if(s&&t.readyState<e)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=l("FromPixels",Ot.backendName)){const n={pixels:t},r={numChannels:e};return Ot.runKernel("FromPixels",n,r)}const[o,u]=s?[t.videoWidth,t.videoHeight]:[t.width,t.height];let c,h;if(i?c=t.getContext("2d").getImageData(0,0,o,u).data:r||n?c=t.data:(a||s)&&(null==rn&&(rn=document.createElement("canvas").getContext("2d")),rn.canvas.width=o,rn.canvas.height=u,rn.drawImage(t,0,0,o,u),c=rn.getImageData(0,0,o,u).data),4===e)h=new Int32Array(c);else{const t=o*u;h=new Int32Array(t*e);for(let n=0;n<t;n++)for(let t=0;t<e;++t)h[n*e+t]=c[4*n+t]}return nn(h,[u,o,e],"int32")}});var an=Object.freeze({__proto__:null,toPixels:async function(t,e){let n=Ut(t,"img","toPixels");if(!(t instanceof yt)){const t=n;n=De(t,"int32"),t.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+a);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const i=await n.data(),o="float32"===n.dtype?255:1,l=new Uint8ClampedArray(s*r*4);for(let t=0;t<r*s;++t){const e=[0,0,0,255];for(let r=0;r<a;r++){const s=i[t*a+r];if("float32"===n.dtype){if(s<0||s>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${s}.`)}else if("int32"===n.dtype&&(s<0||s>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${s}.`);1===a?(e[0]=s*o,e[1]=s*o,e[2]=s*o):e[r]=s*o}const r=4*t;l[r+0]=Math.round(e[0]),l[r+1]=Math.round(e[1]),l[r+2]=Math.round(e[2]),l[r+3]=Math.round(e[3])}if(null!=e){e.width=s,e.height=r;const t=e.getContext("2d"),n=new ImageData(l,s,r);t.putImageData(n,0,0)}return n!==t&&n.dispose(),l},fromPixels:sn});function on(t,e){if(t.rank<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==e.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[e.rank-1]>t.rank)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[e.rank-1]} vs. ${t.rank}`);if(0===t.size)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${t.shape}.`);const n=e.shape,r=n[n.length-1];let s=1;for(let t=0;t<n.length-1;++t)s*=n[t];const a=t.shape,i=n.slice();i.pop();let o=1;for(let e=r;e<t.rank;++e)o*=a[e],i.push(a[e]);const l=[...j(t.shape).map(t=>t/o),1].slice(0,r);return[i,s,o,l]}var ln=Object.freeze({__proto__:null,prepareAndValidate:on});function un(t,e,n){const r=e.rank>1?e.shape[e.rank-1]:1,s=e.rank>1?e.rank-1:1,a="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+`, indices.shape: ${e.shape}, shape: ${t}`+`, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(t.length<r+(n.rank-s))throw new Error(a+" Output shape length < "+(r+(n.rank-s)));if(n.rank!==s+t.length-r)throw new Error(a+" update.rank != "+(s+t.length-r));for(let t=0;t<s;++t)if(n.shape[t]!==e.shape[t])throw new Error(a+` updates.shape[${t}] (${n.shape[t]}) != indices.shape[${t}] (${e.shape[t]}).`);for(let e=0;e<n.rank-s;++e)if(n.shape[e+s]!==t[e+r])throw new Error(a+` updates.shape[${e+s}] (${n.shape[e+s]}) != shape[${e+s}] (${t[e+s]})`)}function cn(t,e,n){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==e.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+e.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===e.size)throw new Error("Indices specified for empty output. indices shape: "+e.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}un(n,e,t)}function hn(t,e,n){const r=e.shape.length,s=r>1?e.shape[r-1]:1,a=n.length;let i=1;for(let t=s;t<a;++t)i*=n[t];const o=s<1?1:s;return{sliceRank:s,numUpdates:N(e.shape)/o,sliceSize:i,strides:[...j(n.slice(0,s)),1],outputSize:N(n)}}var pn=Object.freeze({__proto__:null,validateUpdateShape:un,validateInput:cn,calculateShapes:hn});function dn(t,e,n){b(t.rank===e.length,()=>`Error in slice${t.rank}D: Length of begin ${e} must match the rank of the array (${t.rank}).`),b(t.rank===n.length,()=>`Error in slice${t.rank}D: Length of size ${n} must match the rank of the array (${t.rank}).`);for(let r=0;r<t.rank;++r)b(e[r]+n[r]<=t.shape[r],()=>`Error in slice${t.rank}D: begin[${r}] + size[${r}] (${e[r]+n[r]}) would overflow input.shape[${r}] (${t.shape[r]})`)}function fn(t){const e=[];let n=0;for(;t>0;)1&t&&e.push(n),t/=2,n++;return e}function mn(t,e,n){const r=[];for(let s=0;s<t.length;s++)r[s]=Math.ceil((e[s]-t[s])/n[s]);return r}function gn(t,e,n,r){const s=[...t];for(let t=s.length;t<r.length;t++)s.push(1);for(let t=0;t<n;t++)0===t?s[e]=1:(s.splice(e,0,1),s.pop());return s}function yn(t,e,n){return n<=t?n:n-(e-1)}function bn(t,e){const n=[];for(let r=0;r<t;r++)n.push(e+r);return n}function xn(t,e,n,r,s,a,i,o,l){const u=t.length;let c=new Array(u),h=new Array(u),p=new Array(u);if(e.length&&n>0){const l=e[0],u=n+1;c=wn(i,l,u,r,t),h=vn(o,l,u,s,t),p=gn(a,l,u,t)}else for(let e=0;e<u;e++)c[e]=Cn(i,r,a,t,e,l),h[e]=Sn(o,s,a,t,e,l),p[e]=Nn(a,e,l);return{begin:c,end:h,strides:p}}function wn(t,e,n,r,s){const a=[...s],i=bn(n,e);for(let s=0;s<a.length;s++)if(i.indexOf(s)>-1)a[s]=0;else{const i=yn(e,n,s);let o=r[i];t&1<<i&&(o=0),a[s]=o}return a}function vn(t,e,n,r,s){const a=[...s],i=bn(n,e);for(let s=0;s<a.length;s++)if(i.indexOf(s)>-1)a[s]=Number.MAX_SAFE_INTEGER;else{const i=yn(e,n,s);let o=r[i];t&1<<i&&(o=Number.MAX_SAFE_INTEGER),a[s]=o}for(let t=0;t<a.length;t++){const e=s[t];a[t]<0&&(a[t]+=e),a[t]=m(0,a[t],s[t])}return a}function Nn(t,e,n){let r=t[e];return(n&1<<e||null==r)&&(r=1),r}function Cn(t,e,n,r,s,a){let i=e[s];const o=n[s]||1;(t&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=r[s];return i<0&&(i+=l),i=m(0,i,l-1),i}function Sn(t,e,n,r,s,a){let i=e[s];const o=n[s]||1;(t&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=r[s];return i<0&&(i+=l),i=o>0?m(0,i,l):m(-1,i,l-1),i}function kn(t,e,n){let r=n.length;for(let t=0;t<n.length;t++)if(n[t]>1){r=t;break}for(let s=r+1;s<n.length;s++)if(e[s]>0||n[s]!==t[s])return!1;return!0}function In(t,e){let n=t.length>0?t[t.length-1]:1;for(let r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}function En(t,e,n){let r,s;return r="number"==typeof e?[e,...new Array(t.rank-1).fill(0)]:e.length<t.rank?e.concat(new Array(t.rank-e.length).fill(0)):e.slice(),r.forEach(t=>{b(-1!==t,()=>"slice() does not support negative begin indexing.")}),s=null==n?new Array(t.rank).fill(-1):"number"==typeof n?[n,...new Array(t.rank-1).fill(-1)]:n.length<t.rank?n.concat(new Array(t.rank-n.length).fill(-1)):n,s=s.map((e,n)=>e>=0?e:(b(-1===e,()=>`Negative size values should be exactly -1 but got ${e} for the slice() size at index ${n}.`),t.shape[n]-r[n])),[r,s]}var An=Object.freeze({__proto__:null,assertParamsValid:dn,maskToAxes:fn,computeOutShape:mn,stridesWithElidedDims:gn,getNormalizedAxes:xn,startIndicesWithElidedDims:wn,stopIndicesWithElidedDims:vn,stridesForAxis:Nn,startForAxis:Cn,stopForAxis:Sn,isSliceContinous:kn,computeFlatOffset:In,parseSliceParams:En});class Tn{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class $n{constructor(){this.classNameMap={}}static getMap(){return null==$n.instance&&($n.instance=new $n),$n.instance}static register(t){$n.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function Rn(t){b(null!=t.className,()=>"Class being registered does not have the static className property defined."),b("string"==typeof t.className,()=>"className is required to be a string, but got type "+typeof t.className),b(t.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),$n.register(t)}var Dn=Object.freeze({__proto__:null,Serializable:Tn,SerializationMap:$n,registerClass:Rn});function _n(){return 32===Ot.backend.floatPrecision()?.001:.1}function Fn(t,e,n){let r=!0;if((z(t)||z(e))&&(r=!1),z(t)&&z(e)&&(r=!0),r){const n=t.constructor.name,r=e.constructor.name;if(n!==r)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: `+r)}if(Array.isArray(t)&&Array.isArray(e)){const n=Wt(t),r=Wt(e);if(!C(n,r))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${r}]`)}const s=z(t)?t:v(t),a=z(e)?e:v(e);if(s.length!==a.length)throw new Error(`Arrays have different lengths actual: ${s.length} vs expected: ${a.length}.\nActual:   ${s}.\nExpected: ${a}.`);for(let t=0;t<a.length;++t){const e=s[t],r=a[t];if(!n(e,r))throw new Error(`Arrays differ: actual[${t}] = ${e}, expected[${t}] = ${r}.\nActual:   ${s}.\nExpected: ${a}.`)}}function On(t,e,n){if(null==n&&(n=_n()),!Mn(t,e,n))throw new Error(`Numbers differ: actual === ${t}, expected === ${e}`)}function Mn(t,e,n){return!isFinite(t)&&!isFinite(e)||!(isNaN(t)||isNaN(e)||Math.abs(t-e)>n)}var zn=Object.freeze({__proto__:null,TEST_EPSILON_FLOAT16:.1,expectArraysClose:function(t,e,n){return null==n&&(n=_n()),Fn(t,e,(t,e)=>Mn(t,e,n))},testEpsilon:_n,expectPromiseToFail:function(t,e){t().then(()=>e.fail(),()=>e())},expectArraysEqual:function(t,e){const n="string"==typeof e||"number"==typeof e||"boolean"==typeof e?[e]:e;return P(t)||P(t[0])||P(e)||P(e[0])?Fn(t,n,(t,e)=>t==e):Fn(t,e,(t,e)=>Mn(t,e,0))},expectNumbersClose:On,expectValuesInRange:function(t,e,n){for(let r=0;r<t.length;r++)if(t[r]<e||t[r]>n)throw new Error(`Value out of range:${t[r]} low: ${e}, high: ${n}`)},expectArrayBuffersEqual:function(t,e){expect(new Float32Array(t)).toEqual(new Float32Array(e))}});function Ln(t){n().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function Bn(){return Ot}function Pn(){return Ot.memory()}function Wn(t,e){return Ot.tidy(t,e)}function Vn(t){$t(t).forEach(t=>t.dispose())}function Un(t){return Ot.keep(t)}function Gn(t){return Ot.setBackend(t)}function Hn(t,e,n=1){return Ot.registerBackend(t,e,n)}function jn(){return Ot.backend}gt=Ln;const qn=Ht({add_:function(t,e){let n=Ut(t,"a","add"),r=Ut(e,"b","add");[n,r]=Et(n,r);const s={a:n,b:r};return Ot.runKernelFunc((t,e)=>{const s=t.add(n,r);return e([n,r]),s},s,null,"Add")}});const Kn=Ht({floorDiv_:function(t,e){let n=Ut(t,"a","floorDiv"),r=Ut(e,"b","floorDiv");[n,r]=Et(n,r);const s={a:n,b:r};return Ot.runKernelFunc((t,e)=>{const s=t.floorDiv(n,r);return e([n,r]),s},s,null,"FloorDiv")}});const Xn=Ht({div_:function(t,e){let n=Ut(t,"a","div"),r=Ut(e,"b","div");if([n,r]=Et(n,r),"int32"===n.dtype&&"int32"===r.dtype)return Kn(n,r);const s={a:n,b:r};return Ot.runKernelFunc((t,e)=>{const s=t.realDivide(n,r);return e([n,r]),s},s,null,"Div",{})}});const Yn=Ht({mul_:function(t,e){let n=Ut(t,"a","mul"),r=Ut(e,"b","mul");[n,r]=Et(n,r);const s={a:n,b:r};return Ot.runKernelFunc((t,e)=>{const s=t.multiply(n,r);return e([n,r]),s},s,null,"Multiply")}});const Jn=Ht({abs_:function(t){const e=Ut(t,"x","abs"),n={x:e};return Ot.runKernelFunc((t,n)=>(n([e]),"complex64"===e.dtype?t.complexAbs(e):t.abs(e)),n,null,"Abs")}});const Zn=Ht({acos_:function(t){const e=Ut(t,"x","acos"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.acos(e);return n([e]),r},n,null,"Acos")}});const Qn=Ht({acosh_:function(t){const e=Ut(t,"x","acosh"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.acosh(e);return n([e]),r},n,null,"Acosh")}});const tr=Ht({addN_:function(t){b(Array.isArray(t),()=>"The argument passed to tf.addN() must be a list of tensors"),b(t.length>=1,()=>"Must pass at least one tensor to tf.addN(), but got "+t.length);const e=t.map((t,e)=>Ut(t,"tensors"+e,"addN")),n=e[0];e.forEach(t=>{if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),e.forEach(t=>{if(!C(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});const r=e;return Ot.runKernelFunc((t,n)=>{const r=t.addN(e);return n(e),r},r,null,"AddN")}});function er(t,e){for(let n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function nr(t,e,n){const r=t.length+e.length,s=[];let a=0,i=0;for(let o=0;o<r;o++)-1===n.indexOf(o)?s.push(t[a++]):s.push(e[i++]);return s}function rr(t,e){const n=[],r=t.length;for(let s=0;s<r;s++)-1===e.indexOf(s)&&n.push(t[s]);return[n,e.map(e=>t[e])]}function sr(t,e){return nr(t,e.map(t=>1),e)}function ar(t,e,n){b(er(e,n),()=>t+" supports only inner-most axes for now. "+`Got axes ${e} and rank-${n} input.`)}function ir(t,e){if(er(t,e))return null;const n=[];for(let r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach(t=>n.push(t)),n}function or(t){return t.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function lr(t,e){const n=[];for(let r=e-t;r<e;++r)n.push(r);return n}const ur=Ht({all_:function(t,e=null,n=!1){let r=Ut(t,"x","all","bool");const s={x:r},a={axis:e,keepDims:n};return Ot.runKernelFunc(t=>{const s=$(e,r.shape);let a=s;const i=ir(a,r.rank);null!=i&&(r=Qe(r,i),a=lr(a.length,r.rank));const o=t.all(r,a);if(n){const t=sr(o.shape,s);return Ye(o,t)}return o},s,null,"All",a)}});const cr=Ht({any_:function(t,e=null,n=!1){let r=Ut(t,"x","any","bool");const s={x:r},a={axis:e,keepDims:n};return Ot.runKernelFunc(t=>{const s=$(e,r.shape);let a=s;const i=ir(a,r.rank);null!=i&&(r=Qe(r,i),a=lr(a.length,r.rank));const o=t.any(r,a);if(n){const t=sr(o.shape,s);return Ye(o,t)}return o},s,null,"Any",a)}});const hr=Ht({argMax_:function(t,e=0){let n=Ut(t,"x","argMax");const r={x:n},s={axis:e};return Ot.runKernelFunc((t,r)=>{r([n]);let s=$(e,n.shape);const a=ir(s,n.rank);return null!=a&&(n=Qe(n,a),s=lr(s.length,n.rank)),t.argMax(n,s[0])},r,null,"ArgMax",s)}});const pr=Ht({argMin_:function(t,e=0){let n=Ut(t,"x","argMin");const r={x:n},s={axis:e};return Ot.runKernelFunc((t,r)=>{r([n]),null==e&&(e=0);let s=$(e,n.shape);const a=ir(s,n.rank);return null!=a&&(n=Qe(n,a),s=lr(s.length,n.rank)),t.argMin(n,s[0])},r,null,"ArgMin",s)}});const dr=Ht({asin_:function(t){const e=Ut(t,"x","asin"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.asin(e);return n([e]),r},n,null,"Asin")}});const fr=Ht({asinh_:function(t){const e=Ut(t,"x","asinh"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.asinh(e);return n([e]),r},n,null,"Asinh")}});const mr=Ht({atan_:function(t){const e=Ut(t,"x","atan"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.atan(e);return n([e]),r},n,null,"Atan")}});const gr=Ht({atan2_:function(t,e){let n=Ut(t,"a","atan2"),r=Ut(e,"b","atan2");[n,r]=Et(n,r);const s={a:n,b:r};return Ot.runKernelFunc((t,e)=>{const s=t.atan2(n,r);return e([n,r]),s},s,null,"Atan2")}});const yr=Ht({atanh_:function(t){const e=Ut(t,"x","atanh"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.atanh(e);return n([e]),r},n,null,"Atanh")}});function br(t,e,n,r,s="NHWC",a){return vr(t,[...e,t[3]],n,a,r,null,null,$r(s))}function xr(t,e,n,r,s,a,i="channelsLast"){const[o,l]=Sr(e);let u;if("channelsLast"===i)u=[o,l,t[3],t[3]];else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);u=[o,l,t[1],t[1]]}return vr(t,u,n,r,s,a,!1,i)}function wr(t,e,n,r,s,a,i="NDHWC"){const[o,l,u]=kr(e);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,t[4],t[4]];else{if("NCDHW"!==i)throw new Error("Unknown dataFormat "+i);h="channelsFirst",c=[o,l,u,t[1],t[1]]}return Nr(t,c,n,r,s,!1,h,a)}function vr(t,e,n,r,s,a,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=t;else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);[l,h,u,c]=t}const[p,d,,f]=e,[m,g]=Sr(n),[y,x]=Sr(r),w=Ir(p,y),v=Ir(d,x),{padInfo:N,outHeight:C,outWidth:k}=function(t,e,n,r,s,a,i,o,l){let u,c,h;if("number"==typeof t){u={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};const s=function(t,e,n,r,s){null==r&&(r=Cr(t,e,n));const a=t[0],i=t[1],o=Er((a-e+2*r)/n+1,s);b(S(o),()=>`The output # of rows (${o}) must be an integer. Change the stride and/or zero pad parameters`);const l=Er((i-e+2*r)/n+1,s);return b(S(l),()=>`The output # of columns (${l}) must be an integer. Change the stride and/or zero pad parameters`),[o,l]}([e,n],a,r,t,o);c=s[0],h=s[1]}else if("same"===t){c=Math.ceil(e/r),h=Math.ceil(n/s);const t=Math.max(0,(c-1)*r+a-e),o=Math.max(0,(h-1)*s+i-n),l=Math.floor(t/2),p=t-l,d=Math.floor(o/2);u={top:l,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===t)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((e-a+1)/r),h=Math.ceil((n-i+1)/s);else{if("object"!=typeof t)throw Error("Unknown padding parameter: "+t);{const p="channelsLast"===l?t[1][0]:t[2][0],d="channelsLast"===l?t[1][1]:t[2][1],f="channelsLast"===l?t[2][0]:t[3][0],m="channelsLast"===l?t[2][1]:t[3][1];u={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=Er((e-a+p+d)/r+1,o),h=Er((n-i+f+m)/s+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(s,u,c,m,g,w,v,a,o),I=i?f*h:f;let E;return"channelsFirst"===o?E=[l,I,C,k]:"channelsLast"===o&&(E=[l,C,k,I]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:C,outWidth:k,outChannels:I,padInfo:N,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:w,effectiveFilterWidth:v,dilationHeight:y,dilationWidth:x,inShape:t,outShape:E,filterShape:e}}function Nr(t,e,n,r,s,a=!1,i="channelsLast",o){let[l,u,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,p]=t;else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);[l,p,u,c,h]=t}const[d,f,m,,g]=e,[y,x,w]=kr(n),[v,N,C]=kr(r),k=Ir(d,v),I=Ir(f,N),E=Ir(m,C),{padInfo:A,outDepth:T,outHeight:$,outWidth:R}=function(t,e,n,r,s,a,i,o,l,u,c){let h,p,d,f;if("number"==typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};const a=function(t,e,n,r,s,a){null==s&&(s=Cr(t,e,r));const i=t[0],o=t[1],l=t[2],u=Er((i-e+2*s)/r+1,a);b(S(u),()=>`The output # of depths (${u}) must be an integer. Change the stride and/or zero pad parameters`);const c=Er((o-e+2*s)/r+1,a);b(S(c),()=>`The output # of rows (${c}) must be an integer. Change the stride and/or zero pad parameters`);const h=Er((l-e+2*s)/r+1,a);return b(S(h),()=>`The output # of columns (${h}) must be an integer. Change the stride and/or zero pad parameters`),[u,c,h,n]}([e,n,r,1],o,1,s,t,c);p=a[0],d=a[1],f=a[2]}else if("same"===t){p=Math.ceil(e/s),d=Math.ceil(n/a),f=Math.ceil(r/i);const t=(p-1)*s+o-e,c=(d-1)*a+l-n,m=(f-1)*i+u-r,g=Math.floor(t/2),y=t-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((e-o+1)/s),d=Math.ceil((n-l+1)/a),f=Math.ceil((r-u+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(s,u,c,h,y,x,w,k,I,E,o),D=a?g*p:g;let _;return"channelsFirst"===i?_=[l,D,T,$,R]:"channelsLast"===i&&(_=[l,T,$,R,D]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:p,outDepth:T,outHeight:$,outWidth:R,outChannels:D,padInfo:A,strideDepth:y,strideHeight:x,strideWidth:w,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:k,effectiveFilterHeight:I,effectiveFilterWidth:E,dilationDepth:v,dilationHeight:N,dilationWidth:C,inShape:t,outShape:_,filterShape:e}}function Cr(t,e,n,r=1){const s=Ir(e,r);return Math.floor((t[0]*(n-1)-n+s)/2)}function Sr(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function kr(t){return"number"==typeof t?[t,t,t]:t}function Ir(t,e){return e<=1?t:t+(t-1)*(e-1)}function Er(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+e)}}function Ar(t){const[e,n,r]=Sr(t);return 1===e&&1===n&&1===r}function Tr(t,e){return Ar(t)||Ar(e)}function $r(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error("Unknown dataFormat "+t)}const Rr=Ht({avgPool_:function(t,e,n,r,s){const a=Ut(t,"x","avgPool","float32");b(Tr(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let i=a,o=!1;3===a.rank&&(o=!0,i=Ye(a,[1,a.shape[0],a.shape[1],a.shape[2]])),b(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),null!=s&&b(S(r),()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const l={x:i},u={filterSize:e,strides:n,pad:r,dimRoundingMode:s};let c=Ot.runKernelFunc((t,a)=>{const o=xr(i.shape,e,n,1,r,s);return a([i]),1===o.filterWidth&&1===o.filterHeight&&C(o.inShape,o.outShape)?i.clone():t.avgPool(i,o)},l,null,"AvgPool",u);return c=De(c,a.dtype),o?Ye(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Dr=Ht({avgPool3d_:function(t,e,n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:Ln("dilations is deprecated, this field will be gone in v3.0.0.");const o=Ut(t,"x","avgPool3d","float32");let l=o,u=!1;4===o.rank&&(u=!0,l=Ye(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),b(5===l.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${l.rank}.`),b("NDHWC"===a,()=>"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),b(Tr(n,i),()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`),null!=s&&b(S(r),()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const c={x:l},h={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i};let p=Ot.runKernelFunc((t,o)=>{null==i&&(i=[1,1,1]);const u=wr(l.shape,e,n,i,r,s,a);return o([l]),t.avgPool3d(l,u)},c,null,"AvgPool3D",h);return p=De(p,l.dtype),u?Ye(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});function _r(t,e){const n=t[0].length;t.forEach((t,e)=>{b(t.length===n,()=>`Error in concat${n}D: rank of tensors[${e}] must be the same as the rank of the rest (${n})`)}),b(e>=0&&e<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const r=t[0];t.forEach((t,s)=>{for(let a=0;a<n;a++)b(a===e||t[a]===r[a],()=>`Error in concat${n}D: Shape of tensors[${s}] (${t}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`)})}function Fr(t,e){const n=t[0].slice();for(let r=1;r<t.length;r++)n[e]+=t[r][e];return n}const Or=Ht({concat_:function(t,e=0){b(t.length>=1,()=>"Pass at least one tensor to concat");let n=Gt(t,"tensors","concat");"complex64"===n[0].dtype&&n.forEach(t=>{if("complex64"!==t.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${t.dtype}. `)});const r=$(e,n[0].shape)[0],s=Fr(n.map(t=>t.shape),r);if(0===N(s))return Kt([],s);if(n=n.filter(t=>t.size>0),1===n.length)return n[0];_r(n.map(t=>t.shape),r);const a=n,i={axis:e};return Ot.runKernelFunc((t,e)=>{const s=t.concat(n,r);return e(n),s},a,null,"Concat",i)}});const Mr=Ht({sigmoid_:function(t){const e=Ut(t,"x","sigmoid"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.sigmoid(e);return n([r]),r},n,null,"Sigmoid")}});const zr=Ht({slice_:function(t,e,n){const r=Ut(t,"x","slice");if(0===r.rank)throw new Error("Slicing scalar is not possible");const[s,a]=En(r,e,n);dn(r,s,a);const i={x:r},o={begin:e,size:n};return Ot.runKernelFunc((t,e)=>(e([r]),t.slice(r,s,a)),i,null,"Slice",o)}});const Lr=Ht({tanh_:function(t){const e=Ut(t,"x","tanh"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.tanh(e);return n([r]),r},n,null,"Tanh")}});const Br=Ht({basicLSTMCell_:function(t,e,n,r,s,a){const i=Ut(t,"forgetBias","basicLSTMCell"),o=Ut(e,"lstmKernel","basicLSTMCell"),l=Ut(n,"lstmBias","basicLSTMCell"),u=Ut(r,"data","basicLSTMCell"),c=Ut(s,"c","basicLSTMCell"),h=Ut(a,"h","basicLSTMCell"),p=Or([u,h],1),d=Je(p,o),f=qn(d,l),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=zr(f,[0,0],y),x=zr(f,[0,g],y),w=zr(f,[0,2*g],y),v=zr(f,[0,3*g],y),N=qn(Yn(Mr(b),Lr(x)),Yn(c,Mr(qn(i,w))));return[N,Yn(Lr(N),Mr(v))]}});const Pr=Ht({batchToSpaceND_:function(t,e,n){const r=Ut(t,"x","batchToSpaceND"),s=e.reduce((t,e)=>t*e);b(r.rank>=1+e.length,()=>`input rank is ${r.rank} but should be > than blockShape.length ${e.length}`),b(n.length===e.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${e.length}`),b(r.shape[0]%s==0,()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${s}`);const a={x:r},i={blockShape:e,crops:n};return Ot.runKernelFunc(t=>t.batchToSpaceND(r,e,n),a,null,"BatchToSpaceND",i)}});function Wr(t){return null==t?null:0===t.rank?Ye(t,[t.size]):1===t.rank?t:2===t.rank?Ye(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?Ye(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t}const Vr=Ht({batchNorm_:function(t,e,n,r,s,a){null==a&&(a=.001);const i=Ut(t,"x","batchNorm"),o=Ut(e,"mean","batchNorm"),l=Ut(n,"variance","batchNorm");let u,c;null!=s&&(u=Ut(s,"scale","batchNorm")),null!=r&&(c=Ut(r,"offset","batchNorm")),b(o.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),b(null==c||o.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),b(null==u||o.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const h=function(t){let e;return e=0===t.rank||1===t.rank?Ye(t,[1,1,1,t.size]):2===t.rank?Ye(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?Ye(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t,e}(i),p={x:h,scale:u,offset:c,mean:o,variance:l},d={varianceEpsilon:a},f=Ot.runKernelFunc((t,e)=>(e([h,o,l,u]),t.batchNorm(h,Wr(o),Wr(l),Wr(c),Wr(u),a)),p,null,"FusedBatchNorm",d);return Ye(f,i.shape)}});const Ur=Ht({batchNorm2d_:function(t,e,n,r,s,a){const i=Ut(t,"x","batchNorm"),o=Ut(e,"mean","batchNorm"),l=Ut(n,"variance","batchNorm");let u,c;return null!=s&&(u=Ut(s,"scale","batchNorm")),null!=r&&(c=Ut(r,"offset","batchNorm")),b(2===i.rank,()=>"Error in batchNorm2D: x must be rank 2 but got rank "+i.rank+"."),b(2===o.rank||1===o.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`),b(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=u&&b(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=c&&b(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),Vr(i,o,l,c,u,a)}});const Gr=Ht({batchNorm3d_:function(t,e,n,r,s,a){const i=Ut(t,"x","batchNorm"),o=Ut(e,"mean","batchNorm"),l=Ut(n,"variance","batchNorm");let u,c;return null!=s&&(u=Ut(s,"scale","batchNorm")),null!=r&&(c=Ut(r,"offset","batchNorm")),b(3===i.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+i.rank+"."),b(3===o.rank||1===o.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`),b(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=u&&b(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=c&&b(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),Vr(i,o,l,c,u,a)}});const Hr=Ht({batchNorm4d_:function(t,e,n,r,s,a){const i=Ut(t,"x","batchNorm"),o=Ut(e,"mean","batchNorm"),l=Ut(n,"variance","batchNorm");let u,c;return null!=s&&(u=Ut(s,"scale","batchNorm")),null!=r&&(c=Ut(r,"offset","batchNorm")),b(4===i.rank,()=>"Error in batchNorm4D: x must be rank 4 but got rank "+i.rank+"."),b(4===o.rank||1===o.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`),b(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=u&&b(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=c&&b(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),Vr(i,o,l,c,u,a)}});const jr=Ht({broadcastTo_:function(t,e){let n=Ut(t,"broadcastTo","x");const r=n.shape;if(e.some(t=>!(t>0)||t%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);if(e.length<n.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${n.rank}.`);if(e.length>n.rank){const t=n.shape.slice();for(;t.length<e.length;)t.unshift(1);n=Ye(n,t)}const s=n.shape,a=Array.from(e);for(let t=e.length-1;t>=0;t--)if(s[t]===e[t])a[t]=1;else if(1!==n.shape[t])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${e}].`);if(0===a.map((t,e)=>t>1?e:-1).filter(t=>t>=0).length)return _e(n);const i={x:n},o={shape:e,inputShape:s};return Ot.runKernelFunc(t=>t.tile(n,a),i,null,"BroadcastTo",o)}});const qr=Ht({ceil_:function(t){const e=Ut(t,"x","ceil"),n={x:e};return Ot.runKernelFunc(t=>t.ceil(e),n,null,"Ceil")}});const Kr=Ht({clipByValue_:function(t,e,n){const r=Ut(t,"x","clipByValue");b(e<=n,()=>`Error in clip: min (${e}) must be less than or equal to max (${n}).`);const s={x:r},a={clipValueMin:e,clipValueMax:n};return Ot.runKernelFunc((t,s)=>{const a=t.clip(r,e,n);return s([r]),a},s,null,"ClipByValue",a)}});const Xr=Ht({concat1d_:function(t){return Or(t,0)}});const Yr=Ht({concat2d_:function(t,e){return Or(t,e)}});const Jr=Ht({concat3d_:function(t,e){return Or(t,e)}});const Zr=Ht({concat4d_:function(t,e){return Or(t,e)}});const Qr=Ht({conv2d_:function(t,e,n,r,s="NHWC",a=[1,1],i){const o=Ut(t,"x","conv2d"),l=Ut(e,"filter","conv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=Ye(o,[1,o.shape[0],o.shape[1],o.shape[2]])),b(4===u.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),b(4===l.rank,()=>"Error in conv2d: filter must be rank 4, but got rank "+l.rank+"."),null!=i&&b(S(r),()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const h="NHWC"===s?u.shape[3]:u.shape[1];b(h===l.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`),b(Tr(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const p={x:u,filter:l},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},f=Ot.runKernelFunc((t,e)=>{const o=$r(s),c=vr(u.shape,l.shape,n,a,r,i,!1,o),h=t.conv2d(u,l,c);return e([u,l]),h},p,null,"Conv2D",d);return c?Ye(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const ts=Ht({conv1d_:function(t,e,n,r,s="NWC",a=1,i){const o=Ut(t,"x","conv1d"),l=Ut(e,"filter","conv1d");let u=o,c=!1;2===o.rank&&(c=!0,u=Ye(o,[1,o.shape[0],o.shape[1]])),b(3===u.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),b(3===l.rank,()=>"Error in conv1d: filter must be rank 3, but got rank "+l.rank+"."),null!=i&&b(S(r),()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`),b(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),b(Tr(n,a),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`),b("NWC"===s,()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`);const h=Ye(l,[1,l.shape[0],l.shape[1],l.shape[2]]),p=Ye(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=Qr(p,h,[1,n],r,"NHWC",[1,a],i);return Ye(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const es=Ht({conv2DBackpropInput_:function(t,e,n,r,s,a="NHWC",i){b(t.length===e.rank,()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`);let o=t,l=e,u=!1;3===e.rank&&(u=!0,l=Ye(e,[1,e.shape[0],e.shape[1],e.shape[2]]),o=[1,t[0],t[1],t[2]]),b(4===o.length,()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+o.length+"."),b(4===l.rank,()=>"Error in conv2dDerInput: dy must be rank 4, but got rank "+l.rank),b(4===n.rank,()=>"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank);const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?l.shape[3]:l.shape[1];b(c===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`),b(h===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`),null!=i&&b(S(s),()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`);const p={dy:l,filter:n},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:i,inputShape:o},f=Ot.runKernelFunc((t,e)=>{const u=$r(a),c=vr(o,n.shape,r,1,s,i,!1,u),h=t.conv2dDerInput(l,n,c);return e([l,n]),h},p,null,"Conv2DBackpropInput",d);return u?Ye(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const ns=Ht({conv2dTranspose_:function(t,e,n,r,s,a){const i=Ut(t,"x","conv2dTranspose"),o=Ut(e,"filter","conv2dTranspose");return es(n,i,o,r,s,"NHWC",a)}});const rs=Ht({conv3d_:function(t,e,n,r,s="NDHWC",a=[1,1,1]){const i=Ut(t,"x","conv3d"),o=Ut(e,"filter","conv3d");let l=i,u=!1;4===i.rank&&(u=!0,l=Ye(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),b(5===l.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),b(5===o.rank,()=>"Error in conv3d: filter must be rank 5, but got rank "+o.rank+"."),b(l.shape[4]===o.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`),b(Tr(n,a),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),b("NDHWC"===s,()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`);const c={x:l,filter:o},h={strides:n,pad:r,dataFormat:s,dilations:a},p=Ot.runKernelFunc((t,e)=>{const s=Nr(l.shape,o.shape,n,a,r),i=t.conv3d(l,o,s);return e([l,o]),i},c,null,"Conv3D",h);return u?Ye(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const ss=Ht({conv3DBackpropInput_:function(t,e,n,r,s){b(t.length===e.rank,()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`);let a=t,i=e,o=!1;4===e.rank&&(o=!0,i=Ye(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),a=[1,t[0],t[1],t[2],t[3]]);const l=a[4],u=i.shape[4];b(5===a.length,()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+a.length+"."),b(5===i.rank,()=>"Error in conv3dDerInput: dy must be rank 5, but got rank "+i.rank),b(5===n.rank,()=>"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank),b(l===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`),b(u===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`);const c={dy:i},h={pad:s},p=Ot.runKernelFunc(t=>{const e=Nr(a,n.shape,r,1,s);return t.conv3dDerInput(i,n,e)},c,null,"Conv3DBackpropInputV2",h);return o?Ye(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const as=Ht({conv3dTranspose_:function(t,e,n,r,s){const a=Ut(t,"x","conv3dTranspose"),i=Ut(e,"filter","conv3dTranspose");return ss(n,a,i,r,s)}});const is=Ht({cos_:function(t){const e=Ut(t,"x","cos"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.cos(e);return n([e]),r},n,null,"Cos")}});const os=Ht({cosh_:function(t){const e=Ut(t,"x","cosh"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.cosh(e);return n([e]),r},n,null,"Cosh")}});const ls=Ht({cumsum_:function(t,e=0,n=!1,r=!1){const s=Ut(t,"x","cumsum"),a={x:s},i={axis:e,exclusive:n,reverse:r};return Ot.runKernelFunc((t,a)=>{const i=ir([e],s.rank);let o=s;null!=i&&(o=Qe(s,i));const l=lr(1,s.rank)[0];let u=t.cumsum(o,l,n,r);if(a([s]),null!=i){const t=or(i);u=Qe(u,t)}return u},a,null,"Cumsum",i)}});const us=Ht({depthToSpace_:function(t,e,n="NHWC"){const r=Ut(t,"x","depthToSpace"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],i="NHWC"===n?r.shape[3]:r.shape[1];b(s*e>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${e}  for depthToSpace with input shape\n    ${r.shape}`),b(a*e>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${e} for depthToSpace with input shape\n        ${r.shape}`),b(i%(e*e)==0,()=>`Dimension size must be evenly divisible by ${e*e} but is ${i} for depthToSpace with input shape ${r.shape}`);const o={x:r},l={blockSize:e,dataFormat:n};return Ot.runKernelFunc(t=>t.depthToSpace(r,e,n),o,null,"DepthToSpace",l)}});const cs=Ht({depthwiseConv2d_:function(t,e,n,r,s="NHWC",a=[1,1],i){const o=Ut(t,"x","depthwiseConv2d"),l=Ut(e,"filter","depthwiseConv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=Ye(o,[1,o.shape[0],o.shape[1],o.shape[2]])),b(4===u.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),b(4===l.rank,()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+l.rank+"."),b(u.shape[3]===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`),null!=i&&b(S(r),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const h={x:u,filter:l},p={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},d=Ot.runKernelFunc((t,e)=>{null==a&&(a=[1,1]),b(Tr(n,a),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const s=vr(u.shape,l.shape,n,a,r,i,!0),o=t.depthwiseConv2D(u,l,s);return e([u,l]),o},h,null,"DepthwiseConv2dNative",p);return c?Ye(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const hs=Ht({diag_:function(t){const e=Ut(t,"x","diag"),n={x:e};return Ot.runKernelFunc(n=>{const r=Ye(e,[e.size]),s=n.diag(r),a=[...t.shape,...t.shape];return Ye(s,a)},n,null,"Diag")}});const ps=Ht({dilation2d_:function(t,e,n,r,s=[1,1],a="NHWC"){const i=Ut(t,"x","dilation2d"),o=Ut(e,"filter","dilation2d");b(3===i.rank||4===i.rank,()=>"Error in dilation2d: input must be rank 3 or 4, but got rank "+i.rank+"."),b(3===o.rank,()=>"Error in dilation2d: filter must be rank 3, but got rank "+o.rank+"."),b("NHWC"===a,()=>"Error in dilation2d: Only NHWC is currently supported, but got dataFormat of "+a);let l=i,u=!1;3===i.rank&&(l=Ye(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);const c={x:l,filter:o},h={strides:n,pad:r,dilations:s},p=Ot.runKernel("Dilation2D",c,h);return u?Ye(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});function ds(t,e){const n=t.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,i=t[a]||1;(e[e.length-1-s]||1)>1&&1===i&&r.unshift(a)}return r}function fs(t,e){const n=[];for(let r=0;r<e.length;r++){const s=t[t.length-r-1],a=e.length-r-1,i=e[a];(null==s||1===s&&i>1)&&n.unshift(a)}return n}function ms(t,e){const n=[],r=Math.max(t.length,e.length);for(let s=0;s<r;s++){let r=t[t.length-s-1];null==r&&(r=1);let a=e[e.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${t} and ${e}.`)}n.unshift(r)}}return n}const gs=Ht({equal_:function(t,e){let n=Ut(t,"a","equal"),r=Ut(e,"b","equal");[n,r]=Et(n,r),ms(n.shape,r.shape);const s={a:n,b:r};return Ot.runKernelFunc(t=>t.equal(n,r),s,null,"Equal")}});const ys=Ht({where_:function(t,e,n){const r=Ut(e,"a","where"),s=Ut(n,"b","where"),a=Ut(t,"condition","where","bool"),i=ms(r.shape,s.shape),o=jr(r,i),l=jr(s,i);1===a.rank&&b(a.shape[0]===r.shape[0],()=>"The first dimension of `a` must match the size of `condition`."),1!==a.rank&&x(a.shape,l.shape,"Error in where: ");const u={condition:a,t:o,e:l};return Ot.runKernelFunc((t,e)=>{const n=t.select(a,o,l);return e([a]),n},u,null,"SelectV2")}});const bs=Ht({zerosLike_:function(t){const e=Ut(t,"x","zerosLike"),n={x:e};return Ot.runKernelFunc(t=>t.zerosLike(e),n,null,"ZerosLike")}});const xs=Ht({divNoNan_:function(t,e){let n=Ut(t,"a","div"),r=Ut(e,"b","div");[n,r]=Et(n,r);const s=Xn(n,r),a=bs(s),i=gs(r,a);return ys(i,a,s)}});const ws=Ht({dot_:function(t,e){const n=Ut(t,"t1","dot"),r=Ut(e,"t2","dot");b(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`);const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(b(s===a,()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`),1===n.rank&&1===r.rank){const t=Ye(n,[1,-1]),e=Ye(r,[-1,1]),s=Je(t,e);return Ye(s,[])}if(1===n.rank&&2===r.rank){const t=Ye(n,[1,-1]),e=Ye(r,[r.shape[0],r.shape[1]]),s=Je(t,e);return Ye(s,[s.size])}if(2===n.rank&&1===r.rank){const t=Ye(r,[-1,1]),e=Je(n,t);return Ye(e,[e.size])}{const t=Ye(r,[r.shape[0],r.shape[1]]);return Je(n,t)}}});const vs=Ht({elu_:function(t){const e=Ut(t,"x","elu"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.elu(e);return n([r]),r},n,null,"Elu")}});const Ns=Ht({erf_:function(t){let e=Ut(t,"x","erf");b("int32"===e.dtype||"float32"===e.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===e.dtype&&(e=De(e,"float32"));const n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.erf(e);return n([e]),r},n,null,"Erf")}});const Cs=Ht({exp_:function(t){const e=Ut(t,"x","exp"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.exp(e);return n([r]),r},n,null,"Exp")}});const Ss=Ht({expandDims_:function(t,e=0){const n=Ut(t,"x","expandDims",null);b(e<=n.rank,()=>"Axis must be <= rank of the tensor");const r=n.shape.slice();return e<0&&(b(-(n.rank+1)<=e,()=>`Axis must be in the interval [${-(n.rank+1)}, ${n.rank}]`),e=n.rank+e+1),r.splice(e,0,1),Ye(n,r)}});const ks=Ht({expm1_:function(t){const e=Ut(t,"x","expm1"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.expm1(e);return n([e]),r},n,null,"Expm1")}});const Is=Ht({tile_:function(t,e){const n=Ut(t,"x","tile",null);b(n.rank===e.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${e}.`);const r=[n],s={x:n},a={reps:e};return Ot.runKernelFunc((t,r)=>{const s=t.tile(n,e);return r([n]),s},s,null,"Tile",a,r)}});const Es=Ht({eye_:function(t,e,n,r="float32"){null==e&&(e=t);const s=Re([t,e],r),a=t<=e?t:e;for(let t=0;t<a;++t)s.set(1,t,t);const i=Ye(s.toTensor(),[t,e]);if(null==n)return i;if(1===n.length)return Is(Ss(i,0),[n[0],1,1]);if(2===n.length)return Is(Ss(Ss(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return Is(Ss(Ss(Ss(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function As(t,e,n){const r={shape:t,value:e,dtype:n};return Ot.runKernelFunc(r=>r.fill(t,e,n),{},null,"Fill",r)}const Ts=Ht({floor_:function(t){const e=Ut(t,"x","floor"),n={x:e};return Ot.runKernelFunc(t=>t.floor(e),n,null,"Floor")}});function $s(t){return t<=30?t:H(t,Math.floor(Math.sqrt(t)))}function Rs(t,e,n){const r=t.shape[n],s=[];let a=1,i=1;for(let e=0;e<n;e++)s.push(t.shape[e]),a*=t.shape[e];for(let t=0;t<e.rank;t++)s.push(e.shape[t]);for(let e=n+1;e<t.rank;e++)s.push(t.shape[e]),i*=t.shape[e];return{batchSize:a,sliceSize:i,dimSize:r,outputShape:s}}var Ds=Object.freeze({__proto__:null,segOpComputeOptimalWindowSize:function(t,e){let n,r=!1;for(t<=30?(n=t,r=!0):n=H(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=H(t,n+1);return n},computeOutShape:function(t,e,n){const r=[],s=t.length;for(let a=0;a<s;a++)a!==e?r.push(t[a]):r.push(n);return r},collectGatherOpShapeInfo:Rs});const _s=Ht({gather_:function(t,e,n=0){const r=Ut(t,"x","gather"),s=Ut(e,"indices","gather","int32"),a={x:r,indices:s},i={axis:n};return Ot.runKernelFunc((t,e)=>{const a=$(n,r.shape)[0],i=Rs(r,s,a),o=t.gather(r,Ye(s,[s.size]),a);return e([r,s]),Ye(o,i.outputShape)},a,null,"GatherV2",i)}});const Fs=Ht({greater_:function(t,e){let n=Ut(t,"a","greater"),r=Ut(e,"b","greater");[n,r]=Et(n,r),ms(n.shape,r.shape);const s={a:n,b:r};return Ot.runKernelFunc(t=>t.greater(n,r),s,null,"Greater")}});const Os=Ht({greaterEqual_:function(t,e){let n=Ut(t,"a","greaterEqual"),r=Ut(e,"b","greaterEqual");[n,r]=Et(n,r),ms(n.shape,r.shape);const s={a:n,b:r};return Ot.runKernelFunc((t,e)=>{const s=t.greaterEqual(n,r);return e([n,r]),s},s,null,"GreaterEqual")}});const Ms=Ht({imag_:function(t){const e=Ut(t,"input","imag"),n={input:e};return Ot.runKernelFunc(t=>t.imag(e),n,null,"Imag")}});const zs=Ht({isFinite_:function(t){const e=Ut(t,"x","isFinite"),n={x:e};return Ot.runKernelFunc(t=>t.isFinite(e),n,null,"IsFinite")}});const Ls=Ht({isInf_:function(t){const e=Ut(t,"x","isInf"),n={x:e};return Ot.runKernelFunc(t=>t.isInf(e),n,null,"IsInf")}});const Bs=Ht({isNaN_:function(t){const e=Ut(t,"x","isNaN"),n={x:e};return Ot.runKernelFunc(t=>t.isNaN(e),n,null,"IsNan")}});const Ps=Ht({maximum_:function(t,e){let n=Ut(t,"a","maximum"),r=Ut(e,"b","maximum");[n,r]=Et(n,r),"bool"===n.dtype&&(n=De(n,"int32"),r=De(r,"int32")),ms(n.shape,r.shape);const s={a:n,b:r};return Ot.runKernelFunc((t,e)=>{const s=t.maximum(n,r);return e([n,r]),s},s,null,"Maximum")}});function Ws(t,e){if((z(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&z(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return qt(t,[],[],e)}const Vs=Ht({leakyRelu_:function(t,e=.2){const n=Ut(t,"x","leakyRelu");return Ps(Yn(Ws(e),n),n)}});const Us=Ht({less_:function(t,e){let n=Ut(t,"a","less"),r=Ut(e,"b","less");[n,r]=Et(n,r),ms(n.shape,r.shape);const s={a:n,b:r};return Ot.runKernelFunc(t=>t.less(n,r),s,null,"Less")}});const Gs=Ht({lessEqual_:function(t,e){let n=Ut(t,"a","lessEqual"),r=Ut(e,"b","lessEqual");[n,r]=Et(n,r),ms(n.shape,r.shape);const s={a:n,b:r};return Ot.runKernelFunc((t,e)=>{const s=t.lessEqual(n,r);return e([n,r]),s},s,null,"LessEqual")}});function Hs(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:t,stop:e,num:n};return Ot.runKernelFunc(r=>r.linspace(t,e,n),{},null,"LinSpace",r)}const js=Ht({localResponseNormalization_:function(t,e=5,n=1,r=1,s=.5){const a=Ut(t,"x","localResponseNormalization");b(4===a.rank||3===a.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`),b(S(e),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`);let i=a,o=!1;3===a.rank&&(o=!0,i=Ye(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:i},u={depthRadius:e,bias:n,alpha:r,beta:s},c=Ot.runKernelFunc((t,a)=>{const o=t.localResponseNormalization4D(i,e,n,r,s);return a([i,o]),o},l,null,"LRN",u);return o?Ye(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const qs=Ht({log_:function(t){const e=Ut(t,"x","log"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.log(e);return n([e]),r},n,null,"Log")}});const Ks=Ht({log1p_:function(t){const e=Ut(t,"x","log1p"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.log1p(e);return n([e]),r},n,null,"Log1p")}});function Xs(t,e){b(G(t),()=>"The f passed in variableGrads(f) must be a function"),b(null==e||Array.isArray(e)&&e.every(t=>t instanceof bt),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const n=null!=e;if(!n){e=[];for(const t in Ot.registeredVariables)e.push(Ot.registeredVariables[t])}const r=n?e.filter(t=>!t.trainable):null,s=e.length;b((e=e.filter(t=>t.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`);const{value:a,grads:i}=Ot.gradients(t,e,null,!0);b(i.some(t=>null!=t),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),b(0===a.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);const o={};return e.forEach((t,e)=>{null!=i[e]&&(o[t.name]=i[e])}),null!=r&&r.forEach(t=>o[t.name]=null),{value:a,grads:o}}function Ys(t){return Ot.customGrad(t)}function Js(t){if(t.filter(t=>null==t).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}const Zs=Ht({neg_:function(t){const e=Ut(t,"x","neg"),n={x:e};return Ot.runKernelFunc(t=>t.neg(e),n,null,"Negate")}});const Qs=Ht({softplus_:function(t){const e=Ut(t,"x","softplus"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.softplus(e);return n([e]),r},n,null,"Softplus")}});const ta=Ht({logSigmoid_:function(t){const e=Ut(t,"x","logSigmoid");return Ys(t=>({value:Zs(Qs(Zs(t))),gradFunc:e=>Yn(e,Mr(Zs(t)))}))(e)}});const ea=Ht({max_:function(t,e=null,n=!1){const r=Ut(t,"x","max"),s={x:r},a={reductionIndices:e,keepDims:n};return Ot.runKernelFunc((t,s)=>{let a=$(e,r.shape);const i=ir(a,r.rank);let o=r;null!=i&&(o=Qe(r,i),a=lr(a.length,o.rank));const l=t.max(o,a);null!=i&&o.dispose();let u=l;if(n){const t=sr(u.shape,$(e,r.shape));u=Ye(u,t),l.dispose()}return s([r,u]),u},s,null,"Max",a)}});const na=Ht({sub_:function(t,e){let n=Ut(t,"a","sub"),r=Ut(e,"b","sub");[n,r]=Et(n,r);const s={a:n,b:r};return Ot.runKernelFunc((t,e)=>{const s=t.subtract(n,r);return e([n,r]),s},s,null,"Sub")}});const ra=Ht({sum_:function(t,e=null,n=!1){let r=Ut(t,"x","sum");"bool"===r.dtype&&(r=De(r,"int32"));const s={x:r},a={axis:e,keepDims:n};return Ot.runKernelFunc((t,s)=>{s([r]);const a=$(e,r.shape),i=ir(a,r.rank);let o=a,l=r;null!=i&&(l=Qe(r,i),o=lr(o.length,r.rank));let u=t.sum(l,o);if(n){const t=sr(u.shape,a);u=Ye(u,t)}return u},s,null,"Sum",a)}});const sa=Ht({logSoftmax_:function(t,e=-1){const n=Ut(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${e}`);const r={logits:n},s={axis:e};return Ot.runKernelFunc((n,r)=>{const s=ea(t,e,!0),a=na(t,s),i=na(De(a,"float32"),qs(ra(Cs(a),e,!0)));return r([i]),i},r,null,"LogSoftmax",s)}});const aa=Ht({logSumExp_:function(t,e=null,n=!1){const r=Ut(t,"x","logSumExp"),s=$(e,r.shape),a=ea(r,s,!0),i=na(r,a),o=Cs(i),l=ra(o,s),u=qs(l),c=qn(Ye(a,u.shape),u);if(n){const t=sr(c.shape,s);return Ye(c,t)}return c}});const ia=Ht({logicalAnd_:function(t,e){const n=Ut(t,"a","logicalAnd","bool"),r=Ut(e,"b","logicalAnd","bool");ms(n.shape,r.shape);const s={a:n,b:r};return Ot.runKernelFunc(t=>t.logicalAnd(n,r),s,null,"LogicalAnd")}});const oa=Ht({logicalNot_:function(t){const e=Ut(t,"x","logicalNot","bool"),n={x:e};return Ot.runKernelFunc(t=>t.logicalNot(e),n,null,"LogicalNot")}});const la=Ht({logicalOr_:function(t,e){const n=Ut(t,"a","logicalOr","bool"),r=Ut(e,"b","logicalOr","bool");ms(n.shape,r.shape);const s={a:n,b:r};return Ot.runKernelFunc(t=>t.logicalOr(n,r),s,null,"LogicalOr")}});const ua=Ht({logicalXor_:function(t,e){const n=Ut(t,"a","logicalXor","bool"),r=Ut(e,"b","logicalXor","bool");return ms(n.shape,r.shape),ia(la(t,e),oa(ia(t,e)))}});const ca=Ht({maxPool_:function(t,e,n,r,s){const a=Ut(t,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=Ye(a,[1,a.shape[0],a.shape[1],a.shape[2]])),b(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),b(Tr(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),null!=s&&b(S(r),()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const l={x:i},u={filterSize:e,strides:n,pad:r,dimRoundingMode:s},c=Ot.runKernelFunc((t,a)=>{const o=xr(i.shape,e,n,1,r,s);let l;return l=1===o.filterWidth&&1===o.filterHeight&&C(o.inShape,o.outShape)?i.clone():t.maxPool(i,o),a([i,l]),l},l,null,"MaxPool",u);return o?Ye(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const ha=Ht({maxPool3d_:function(t,e=[1,1,1],n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:Ln("dilations is deprecated, this field will be gone in v3.0.0.");const o=Ut(t,"x","maxPool3d");let l=o,u=!1;4===o.rank&&(u=!0,l=Ye(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),b(5===l.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${l.rank}.`),b("NDHWC"===a,()=>"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),b(Tr(n,i),()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`),null!=s&&b(S(r),()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const c={x:l},h={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i},p=Ot.runKernelFunc((t,o)=>{null==i&&(i=[1,1,1]);const u=wr(l.shape,e,n,i,r,s,a),c=t.maxPool3d(l,u);return o([l,c]),c},c,null,"MaxPool3D",h);return u?Ye(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const pa=Ht({maxPoolWithArgmax_:function(t,e,n,r,s=!1){const a={x:Ut(t,"x","maxPoolWithArgmax")},i={filterSize:e,strides:n,pad:r,includeBatchInIndex:s},o=Ot.runKernel("MaxPoolWithArgmax",a,i);return{result:o[0],indexes:o[1]}}});function da(t,e="float32"){if("complex64"===e){const e=da(t,"float32"),n=da(t,"float32");return jt(e,n)}const n=Y(N(t),e);return Ot.makeTensor(n,t,e)}function fa(t,e="float32"){if("complex64"===e){const e=fa(t,"float32"),n=da(t,"float32");return jt(e,n)}const n=X(N(t),e);return Ot.makeTensor(n,t,e)}const ma=Ht({mean_:function(t,e=null,n=!1){const r=Ut(t,"x","mean"),s=$(e,r.shape),a=N(rr(r.shape,s)[1]);return Ys(t=>{const r=Ws(a),i=r.dtype===t.dtype?t:De(t,r.dtype),o=Xn(i,r);return{value:ra(o,e,n),gradFunc:e=>{const n=t.shape.slice();s.forEach(t=>{n[t]=1});const r=Ye(e,n);return Xn(Yn(r,fa(t.shape,"float32")),a)}}})(r)}});const ga=Ht({min_:function(t,e=null,n=!1){const r=Ut(t,"x","min"),s={x:r},a={axis:e,keepDims:n};return Ot.runKernelFunc((t,s)=>{const a=$(e,r.shape);let i=a;const o=ir(i,r.rank);let l=r;null!=o&&(l=Qe(r,o),i=lr(i.length,r.rank));const u=t.min(l,i);null!=o&&l.dispose();let c=u;if(n){const t=sr(c.shape,a);c=Ye(u,t),u.dispose()}return s([r,c]),c},s,null,"Min",a)}});const ya=Ht({minimum_:function(t,e){let n=Ut(t,"a","minimum"),r=Ut(e,"b","minimum");[n,r]=Et(n,r),"bool"===n.dtype&&(n=De(n,"int32"),r=De(r,"int32")),ms(n.shape,r.shape);const s={a:n,b:r};return Ot.runKernelFunc((t,e)=>{const s=t.minimum(n,r);return e([n,r]),s},s,null,"Minimum")}});const ba=Ht({mod_:function(t,e){let n=Ut(t,"a","mod"),r=Ut(e,"b","mod");[n,r]=Et(n,r);const s={a:n,b:r};return Ot.runKernelFunc((t,e)=>{const s=t.mod(n,r);return e([n,r]),s},s,null,"Mod")}});const xa=Ht({square_:function(t){const e=Ut(t,"x","square"),n=[e];return Ot.runKernelFunc((t,n)=>(n([e]),t.square(e)),{x:e},null,"Square",{},n,[])}});const wa=Ht({moments_:function(t,e=null,n=!1){const r=$(e,(t=Ut(t,"x","moments")).shape),s=ma(t,r,n);let a=s.shape;n||(a=sr(s.shape,r));const i=xa(na(De(t,"float32"),Ye(s,a)));return{mean:s,variance:ma(i,r,n)}}});const va=Ht({multiRNNCell_:function(t,e,n,r){const s=Ut(e,"data","multiRNNCell"),a=Gt(n,"c","multiRNNCell"),i=Gt(r,"h","multiRNNCell");let o=s;const l=[];for(let e=0;e<t.length;e++){const n=t[e](o,a[e],i[e]);l.push(n[0]),l.push(n[1]),o=n[1]}const u=[],c=[];for(let t=0;t<l.length;t+=2)u.push(l[t]),c.push(l[t+1]);return[u,c]}});const Na=Ht({multinomial_:function(t,e,n,r=!1){const s=Ut(t,"logits","multinomial"),a=s.size,i=s.rank;if(a<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+a+".");if(i>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+i);n=n||Math.random();const o=1===i?Ye(s,[1,-1]):s,l=Ot.runKernelFunc(t=>t.multinomial(o,r,e,n),{logits2D:o});return 1===i?Ye(l,[l.size]):l}});const Ca=Ht({notEqual_:function(t,e){let n=Ut(t,"a","notEqual"),r=Ut(e,"b","notEqual");[n,r]=Et(n,r),ms(n.shape,r.shape);const s={a:n,b:r};return Ot.runKernelFunc(t=>t.notEqual(n,r),s,null,"NotEqual")}});const Sa=Ht({real_:function(t){const e=Ut(t,"input","real"),n={input:e};return Ot.runKernelFunc(t=>t.real(e),n,null,"Real")}});const ka=Ht({onesLike_:function(t){const e=Ut(t,"x","onesLike"),n={x:e};return Ot.runKernelFunc((t,n)=>{if("complex64"===e.dtype){const t=ka(Sa(e)),n=bs(Ms(e));return jt(t,n)}return t.onesLike(e)},n,null,"OnesLike")}});const Ia=Ht({outerProduct_:function(t,e){const n=Ut(t,"v1","outerProduct"),r=Ut(e,"v2","outerProduct");b(1===n.rank&&1===r.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`);const s=Ye(n,[-1,1]),a=Ye(r,[1,-1]);return Je(s,a)}});const Ea=Ht({pad_:function(t,e,n=0){const r=Ut(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:e,constantValue:n},a={x:r};return Ot.runKernelFunc((t,s)=>(s([r]),t.pad(r,e,n)),a,null,"PadV2",s)}});const Aa=Ht({pad1d_:function(t,e,n=0){return b(2===e.length,()=>"Invalid number of paddings. Must be length of 2."),Ea(t,[e],n)}});const Ta=Ht({pad2d_:function(t,e,n=0){return b(2===e.length&&2===e[0].length&&2===e[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),Ea(t,e,n)}});const $a=Ht({pad3d_:function(t,e,n=0){return b(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),Ea(t,e,n)}});const Ra=Ht({pad4d_:function(t,e,n=0){return b(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),Ea(t,e,n)}});const Da=Ht({spaceToBatchND_:function(t,e,n){const r=Ut(t,"x","spaceToBatchND");b(r.rank>=1+e.length,()=>`input rank ${r.rank} should be > than [blockShape] ${e.length}`),b(n.length===e.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${e.length}`),b(r.shape.reduce((t,r,s)=>s>0&&s<=e.length?t&&(r+n[s-1][0]+n[s-1][1])%e[s-1]==0:t,!0),()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${e.toString()}`);const s={x:r},a={blockShape:e,paddings:n};return Ot.runKernelFunc(t=>t.spaceToBatchND(r,e,n),s,null,"SpaceToBatchND",a)}});const _a=Ht({pool_:function(t,e,n,r,s,a){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=Ut(t,"x","maxPool");let o=i,l=!1;3===i.rank&&(l=!0,o=Ye(i,[1,i.shape[0],i.shape[1],i.shape[2]])),b(Tr(a,s),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`);const u=xr(o.shape,e,a,s,r),c=[u.dilationHeight,u.dilationWidth];let h;h="same"===r?function(t,e){const n=t.map((t,n)=>t+(t-1)*(e[n]-1)).map(t=>t-1),r=n.map(t=>Math.floor(t/2)),s=n.map((t,e)=>t-r[e]);return n.map((t,e)=>[r[e],s[e]])}([u.filterHeight,u.filterWidth],c):[[0,0],[0,0]];const p=1===c[0]&&1===c[1],[d,f]=function(t,e,n){const r=n.map(t=>t[0]),s=n.map(t=>t[1]),a=t.concat(r,s),i=e.map((t,e)=>(t-a[e]%t)%t),o=s.map((t,e)=>t+i[e]),l=e.map((t,e)=>[r[e],o[e]]),u=e.map((t,e)=>[0,i[e]]);return[l,u]}([u.inHeight,u.inWidth],c,h),m=p?r:"valid",g=p?o:Da(o,c,d),y=("avg"===n?()=>Rr(g,e,a,m):()=>ca(g,e,a,m))(),x=p?y:Pr(y,c,f);return l?Ye(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});const Fa=Ht({pow_:function(t,e){let n=Ut(t,"base","pow"),r=Ut(e,"exp","pow");[n,r]=Et(n,r);const s={a:n,b:r};return Ot.runKernelFunc((t,e)=>{const s=t.pow(n,r);return e([n,r,s]),s},s,null,"Pow")}});const Oa=Ht({prelu_:function(t,e){const n=Ut(t,"x","prelu"),r=Ut(e,"alpha","prelu"),s={x:n,alpha:r};return Ot.runKernelFunc((t,e)=>{const s=t.prelu(n,r);return e([n,r]),s},s,null,"Prelu")}});const Ma=Ht({prod_:function(t,e=null,n=!1){let r=Ut(t,"x","prod");const s={x:r},a={axis:e,keepDims:n};return Ot.runKernelFunc(t=>{"bool"===r.dtype&&(r=De(r,"int32"));const s=$(e,r.shape),a=ir(s,r.rank);let i=s,o=r;null!=a&&(o=Qe(r,a),i=lr(i.length,r.rank));let l=t.prod(o,i);if(n){const t=sr(l.shape,s);l=Ye(l,t)}return l},s,null,"Prod",a)}});const za=Ht({rand_:function(t,e,n){const r=N(t);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type "+n);s=new Uint8Array(r)}for(let t=0;t<r;t++)s[t]=e();return Ot.makeTensor(s,t,n)}});"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function La(t,e){return t(e={exports:{}},e.exports),e.exports}var Ba=La((function(t){!function(t,e,n){function r(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function s(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function a(t,e){var n=new r(t),a=e&&e.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,t,!1)})),Pa=La((function(t){!function(t,e,n){function r(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function s(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,t,!1)})),Wa=La((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function s(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,t,!1)})),Va=La((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.x,s=e.i;return t=r[s],n=(t^=t>>>7)^t<<24,n^=(t=r[s+1&7])^t>>>10,n^=(t=r[s+3&7])^t>>>3,n^=(t=r[s+4&7])^t<<7,t=r[s+7&7],n^=(t^=t<<13)^t<<9,r[s]=n,e.i=s+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function s(t,e){return e.x=t.x.slice(),e.i=t.i,e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(a.x&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,t,!1)})),Ua=La((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.w,s=e.X,a=e.i;return e.w=r=r+1640531527|0,n=s[a+34&127],t=s[a=a+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=s[a]=n^t,e.i=a,n+(r^r>>>16)|0},function(t,e){var n,r,s,a,i,o=[],l=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,l=Math.max(l,e.length)),s=0,a=-32;a<l;++a)e&&(r^=e.charCodeAt((a+32)%e.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,s=0==(n=o[127&a]^=r+i)?s+1:0);for(s>=128&&(o[127&(e&&e.length||0)]=-1),s=127,a=512;a>0;--a)r=o[s+34&127],n=o[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,o[s]=r^n;t.w=i,t.X=o,t.i=s}(e,t)}function s(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(a.X&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,t,!1)})),Ga=La((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,s=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^s,e.a=s-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function s(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,t,!1)})),Ha=La((function(t){!function(e,n){var r,s=this,a=n.pow(256,6),i=n.pow(2,52),o=2*i;function l(t,l,d){var f=[],m=h(function t(e,n){var r,s=[],a=typeof e;if(n&&"object"==a)for(r in e)try{s.push(t(e[r],n-1))}catch(t){}return s.length?s:"string"==a?e:e+"\0"}((l=1==l?{entropy:!0}:l||{}).entropy?[t,p(e)]:null==t?function(){try{var t;return r&&(t=r.randomBytes)?t=t(256):(t=new Uint8Array(256),(s.crypto||s.msCrypto).getRandomValues(t)),p(t)}catch(t){var n=s.navigator,a=n&&n.plugins;return[+new Date,s,a,s.screen,p(e)]}}():t,3),f),g=new u(f),y=function(){for(var t=g.g(6),e=a,n=0;t<i;)t=256*(t+n),e*=256,n=g.g(1);for(;t>=o;)t/=2,e/=2,n>>>=1;return(t+n)/e};return y.int32=function(){return 0|g.g(4)},y.quick=function(){return g.g(4)/4294967296},y.double=y,h(p(g.S),e),(l.pass||d||function(t,e,r,s){return s&&(s.S&&c(s,g),t.state=function(){return c(g,{})}),r?(n.random=t,e):t})(y,m,"global"in l?l.global:this==n,l.state)}function u(t){var e,n=t.length,r=this,s=0,a=r.i=r.j=0,i=r.S=[];for(n||(t=[n++]);s<256;)i[s]=s++;for(s=0;s<256;s++)i[s]=i[a=255&a+t[s%n]+(e=i[s])],i[a]=e;(r.g=function(t){for(var e,n=0,s=r.i,a=r.j,i=r.S;t--;)e=i[s=255&s+1],n=256*n+i[255&(i[s]=i[a=255&a+e])+(i[a]=e)];return r.i=s,r.j=a,n})(256)}function c(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function h(t,e){for(var n,r=t+"",s=0;s<r.length;)e[255&s]=255&(n^=19*e[255&s])+r.charCodeAt(s++);return p(e)}function p(t){return String.fromCharCode.apply(0,t)}if(n.seedrandom=l,h(n.random(),e),t.exports){t.exports=l;try{r=require("crypto")}catch(t){}}else 0}([],Math)}));Ha.alea=Ba,Ha.xor128=Pa,Ha.xorwow=Wa,Ha.xorshift7=Va,Ha.xor4096=Ua,Ha.tychei=Ga;var ja=Ha.alea;class qa{constructor(t,e,n,r,s){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=ja(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const t=this.nextVal;return this.nextVal=NaN,t}let t,e,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);t=this.mean+this.stdDev*r*i,e=this.mean+this.stdDev*s*i,this.truncated&&!this.isValidTruncated(t)||(n=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class Ka{constructor(t,e,n,r){this.alpha=t,this.beta=1/e,this.dtype=n;const s=r||Math.random();this.randu=ja(s.toString()),this.randn=new qa(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,t=r*r,e=1-.331*t*t,n=.5*t+this.d*(1-a+Math.log(a)),s=this.randu(),s<e||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(t){return"float32"===this.dtype?t:Math.round(t)}}class Xa{constructor(t=0,e=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=ja(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Ya=Ht({randomGamma_:function(t,e,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);const a=new Ka(e,n,r,s),i=Re(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const Ja=Ht({randomNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);const a=new qa(e,n,r,!1,s),i=Re(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const Za=Ht({randomUniform_:function(t,e=0,n=1,r="float32",s){const a=Re(t,r),i=new Xa(e,n,null,s);for(let t=0;t<a.values.length;t++)a.values[t]=i.nextValue();return a.toTensor()}});function Qa(t,e){w(t);const n=Wt(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return qt(t,null,n,e)}function ti(t,e,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:t,stop:e,step:n,dtype:r};return Ot.runKernelFunc(()=>{if(t===e||t<e&&n<0||e<t&&n>1)return da([0],r);const s=Y(Math.abs(Math.ceil((e-t)/n)),r);e<t&&1===n&&(n=-1),s[0]=t;for(let t=1;t<s.length;t++)s[t]=s[t-1]+n;return Qa(s,r)},{},null,"Range",s)}const ei=Ht({reciprocal_:function(t){const e=Ut(t,"x","reciprocal"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.reciprocal(e);return n([e]),r},n,null,"Reciprocal")}});const ni=Ht({relu_:function(t){const e=Ut(t,"x","relu"),n={x:e};return Ot.runKernelFunc((t,n)=>(n([e]),"bool"===e.dtype?De(e,"int32"):t.relu(e)),n,null,"Relu")}});const ri=Ht({relu6_:function(t){const e=Ut(t,"x","relu6"),n={x:e};return Ot.runKernelFunc((t,n)=>(n([e]),"bool"===e.dtype?De(e,"int32"):t.relu6(e)),n,null,"Relu6")}});const si=Ht({reverse_:function(t,e){const n=Ut(t,"x","reverse"),r={x:n},s={dims:e};return Ot.runKernelFunc(t=>{const r=$(e,n.shape);if(0===n.rank)return _e(n);const s=t.reverse(n,r);return Ye(s,n.shape)},r,null,"Reverse",s)}});const ai=Ht({reverse1d_:function(t){const e=Ut(t,"x","reverse");return b(1===e.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`),si(e,0)}});const ii=Ht({reverse2d_:function(t,e){const n=Ut(t,"x","reverse");return b(2===n.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`),si(n,e)}});const oi=Ht({reverse3d_:function(t,e){const n=Ut(t,"x","reverse");return b(3===n.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`),si(n,e)}});const li=Ht({reverse4d_:function(t,e){const n=Ut(t,"x","reverse");return b(4===n.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`),si(n,e)}});const ui=Ht({round_:function(t){const e=Ut(t,"x","round"),n={x:e};return Ot.runKernelFunc(t=>t.round(e),n,null,"Round")}});const ci=Ht({rsqrt_:function(t){const e=Ut(t,"x","rsqrt"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.rsqrt(e);return n([e]),r},n,null,"Rsqrt")}});const hi=Ht({selu_:function(t){const e=Ut(t,"x","selu"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.selu(e);return n([e]),r},n,null,"Selu")}});const pi=Ht({separableConv2d_:function(t,e,n,r,s,a=[1,1],i="NHWC"){const o=Ut(t,"x","separableConv2d"),l=Ut(e,"depthwiseFilter","separableConv2d"),u=Ut(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=Ye(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");b(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),b(4===l.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),b(4===u.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),b(1===u.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),b(1===u.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);const p=l.shape[2],d=l.shape[3];b(u.shape[2]===p*d,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${u.shape[2]}.`);const f=cs(c,l,r,s,i,a),m=Qr(f,u,1,"valid",i);return h?Ye(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const di=async function(t,e){const n=Ut(t,"x","setdiff1d"),r=Ut(e,"y","setdiff1d");b(n.dtype===r.dtype,()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`),b(1===n.rank,()=>`x should be 1D tensor, but got x (${n.shape}).`),b(1===r.rank,()=>`y should be 1D tensor, but got y (${r.shape}).`);const s=await n.data(),a=await r.data(),i=new Set(a);let o=0;for(let t=0;t<s.length;t++)i.has(s[t])||o++;const l=new dt([o],n.dtype),u=new dt([o],"int32");for(let t=0,e=0;t<s.length;t++)i.has(s[t])||(l.values[e]=s[t],u.values[e]=t,e++);return[l.toTensor(),u.toTensor()]};const fi=Ht({sign_:function(t){const e=Ut(t,"x","sign"),n={x:e};return Ot.runKernelFunc(t=>t.sign(e),n,null,"Sign")}});const mi=Ht({sin_:function(t){const e=Ut(t,"x","sin"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.sin(e);return n([e]),r},n,null,"Sin")}});const gi=Ht({sinh_:function(t){const e=Ut(t,"x","sinh"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.sinh(e);return n([e]),r},n,null,"Sinh")}});const yi=Ht({slice1d_:function(t,e,n){const r=Ut(t,"x","slice1d");return b(1===r.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`),zr(r,[e],[n])}});const bi=Ht({slice2d_:function(t,e,n){const r=Ut(t,"x","slice2d");return b(2===r.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`),zr(r,e,n)}});const xi=Ht({slice3d_:function(t,e,n){const r=Ut(t,"x","slice3d");return b(3===r.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`),zr(r,e,n)}});const wi=Ht({slice4d_:function(t,e,n){const r=Ut(t,"x","slice4d");return b(4===r.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`),zr(r,e,n)}});const vi=Ht({softmax_:function(t,e=-1){const n=Ut(t,"logits","softmax","float32");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${e}`);const r={logits:n},s={dim:e};return Ot.runKernelFunc((t,r)=>{const s=t.softmax(n,e);return r([s]),s},r,null,"Softmax",s)}});const Ni=Ht({fft_:function(t){b("complex64"===t.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${t.dtype}.`);const e={input:t};return Ot.runKernelFunc(e=>{const n=t.shape[t.shape.length-1],r=t.size/n,s=t.as2D(r,n);return e.fft(s).reshape(t.shape)},e,null,"FFT")}});const Ci=Ht({ifft_:function(t){b("complex64"===t.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${t.dtype}.`);const e={input:t};return Ot.runKernelFunc(e=>{const n=t.shape[t.shape.length-1],r=t.size/n,s=Ye(t,[r,n]),a=e.ifft(s);return Ye(a,t.shape)},e,null,"IFFT")}});const Si=Ht({irfft_:function(t){const e=t.shape[t.shape.length-1],n=t.size/e;let r;if(e<=2){const s=Ye(t,[n,e]);r=Ci(s)}else{const s=[n,2*(e-1)],a=Ye(Sa(t),[n,e]),i=Ye(Ms(t),[n,e]),o=si(zr(a,[0,1],[n,e-2]),1),l=Yn(si(zr(i,[0,1],[n,e-2]),1),Ws(-1)),u=Or([a,o],1),c=Or([i,l],1),h=Ye(jt(u,c),[s[0],s[1]]);r=Ci(h)}if(r=Sa(r),3===t.rank&&0!==t.shape[0]){const e=r,n=t.shape[0];r=Ye(r,[n,r.shape[0]/n,r.shape[1]]),e.dispose()}return r}});function ki(t,e,n=0){let r=[];if("number"==typeof e)b(t.shape[n]%e==0,()=>"Number of splits must evenly divide the axis."),r=new Array(e).fill(t.shape[n]/e);else{b(e.reduce((t,e)=>(-1===e&&(t+=1),t),0)<=1,()=>"There should be only one negative value in split array.");const s=e.indexOf(-1);if(-1!==s){const r=e.reduce((t,e)=>e>0?t+e:t);e[s]=t.shape[n]-r}b(t.shape[n]===e.reduce((t,e)=>t+e),()=>"The sum of sizes must match the size of the axis dimension."),r=e}return r}const Ii=Ht({split_:function(t,e,n=0){const r=Ut(t,"x","split"),s={x:r},a={numOrSizeSplits:e,axis:n};return Ot.runKernelFunc((t,s)=>{const a=$(n,r.shape)[0],i=ki(r,e,a);return t.split(r,i,a)},s,null,"SplitV",a)}});const Ei=Ht({rfft_:function(t,e){b("float32"===t.dtype,()=>"The dtype for rfft() must be real value but got "+t.dtype);let n=t.shape[t.shape.length-1];const r=t.size/n;let s;if(null!=e&&e<n){const r=t.shape.map(t=>0),a=t.shape.map(t=>t);a[t.shape.length-1]=e,s=zr(t,r,a),n=e}else if(null!=e&&e>n){const r=t.shape.map(t=>t);r[t.shape.length-1]=e-n,s=Or([t,da(r)],t.shape.length-1),n=e}else s=t;const a=bs(s),i=Ye(jt(s,a),[r,n]),o=Ni(i),l=Math.floor(n/2)+1,u=Sa(o),c=Ms(o),h=Ii(u,[l,n-l],u.shape.length-1),p=Ii(c,[l,n-l],c.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=l,Ye(jt(h[0],p[0]),d)}});const Ai=Ht({sqrt_:function(t){const e=Ut(t,"x","sqrt"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.sqrt(e);return n([e]),r},n,null,"Sqrt")}});const Ti=Ht({squaredDifference_:function(t,e){let n=Ut(t,"a","squaredDifference"),r=Ut(e,"b","squaredDifference");[n,r]=Et(n,r),ms(n.shape,r.shape);const s={a:n,b:r};return Ot.runKernelFunc((t,e)=>{const s=t.squaredDifference(n,r);return e([n,r]),s},s,null,"SquaredDifference",{})}});const $i=Ht({squeeze_:function(t,e){const n=Ut(t,"x","squeeze");return Ye(n,R(n.shape,e).newShape)}});const Ri=Ht({stack_:function(t,e=0){const n=Gt(t,"tensors","stack");if(b(n.length>=1,()=>"Pass at least one tensor to tf.stack"),1===n.length)return Ss(n[0],e);const r=n[0].rank,s=n[0].shape,a=n[0].dtype;b(e<=r,()=>"Axis must be <= rank of the tensor"),n.forEach(t=>{x(s,t.shape,"All tensors passed to stack must have matching shapes"),b(a===t.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=n.map(t=>Ss(t,e));return Or(i,e)}});const Di=Ht({step_:function(t,e=0){const n=Ut(t,"x","step"),r={x:n},s={alpha:e};return Ot.runKernelFunc(t=>t.step(n,e),r,null,"Step",s)}});const _i=Ht({stridedSlice_:function(t,e,n,r,s=0,a=0,i=0,o=0,l=0){let u=Ut(t,"x","stridedSlice");const c={x:u},h={begin:e,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};return Ot.runKernelFunc(t=>{null==r&&(r=new Array(e.length));const c=fn(i);if(c.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==l)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const h=u.rank-e.length,p=fn(o),d=u.shape.slice();p.forEach(t=>{e[t]=0,n[t]=1,d.splice(t,0,1)}),u=Ye(u,d);const{begin:f,end:m,strides:g}=xn(u.shape,c,h,e,n,r,s,a,i);e=f,n=m,r=g;const y=fn(l);y.forEach(t=>{n[t]=e[t]+1,r[t]=1});const b=mn(e,n,r),x=b.filter((t,e)=>-1===y.indexOf(e));if(r.every(t=>1===t))return Ye(zr(u,e,b),x);const w=t.stridedSlice(u,e,n,r);return Ye(w,x)},c,null,"StridedSlice",h)}});const Fi=Ht({tan_:function(t){const e=Ut(t,"x","tan"),n={x:e};return Ot.runKernelFunc((t,n)=>{const r=t.tan(e);return n([e]),r},n,null,"Tan")}});function Oi(t,e,n){if(w(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Wt(t,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return qt(t,e,r,n)}function Mi(t,e,n){if(w(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");const r=Wt(t,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return qt(t,e,r,n)}const zi=Ht({topk_:function(t,e=1,n=!0){const r=Ut(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(e>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got `+e);const a={x:r},i={k:e,sorted:n},[o,l]=Ot.runKernelFunc(t=>t.topk(r,e,n),a,null,"TopK",i);return{values:o,indices:l}}});const Li=Ht({truncatedNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new qa(e,n,r,!0,s),i=Re(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const Bi=Ht({unsortedSegmentSum_:function(t,e,n){const r=Ut(t,"x","unsortedSegmentSum"),s=Ut(e,"segmentIds","unsortedSegmentSum","int32");b(S(n),()=>"numSegments must be of dtype int");const a={x:r,segmentIds:s},i={numSegments:n};return Ot.runKernelFunc((t,e)=>{const a=t.unsortedSegmentSum(r,s,n);return e([s]),a},a,null,"UnsortedSegmentSum",i)}});const Pi=Ht({unstack_:function(t,e=0){const n=Ut(t,"x","unstack");b(e>=-n.shape.length&&e<n.shape.length,()=>`Axis = ${e} is not in [-${n.shape.length}, ${n.shape.length})`),e<0&&(e+=n.shape.length);const r={value:n},s={axis:e};return Ot.runKernelFunc(t=>t.unstack(n,e),r,null,"Unpack",s)}});function Wi(t,e=!0,n,r){return Ot.makeVariable(t,e,n,r)}function Vi(t,e){const n=[];for(let t=0;t<e.length;t++)e[t]&&n.push(t);const r=Re(t,"int32"),s=Re([n.length,t.length],"int32");for(let e=0;e<n.length;e++){const a=r.indexToLoc(n[e]),i=e*t.length;s.values.set(a,i)}return s.toTensor()}const Ui=async function(t){const e=Ut(t,"condition","whereAsync","bool"),n=await e.data(),r=Vi(e.shape,n);return t!==e&&e.dispose(),r};const Gi=async function(t,e,n){const r=Ut(t,"tensor","boolMask"),s=Ut(e,"mask","boolMask","bool"),a=null==n?0:n,i=s.rank,o=r.shape;b(i>0,()=>"mask cannot be scalar"),x(o.slice(a,a+i),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let t=a;t<a+i;t++)l*=o[t];const u=o.slice(0,a).concat([l],o.slice(a+i)),c=Ye(r,u),h=Ye(s,[-1]),p=await Ui(h),d=$i(p,[1]),f=_s(c,d,a);return t!==r&&r.dispose(),e!==s&&s.dispose(),d.dispose(),c.dispose(),h.dispose(),p.dispose(),f};const Hi=Ht({equalStrict_:function(t,e){Ln("strict variants of ops have been deprecated and will be removed in future");const n=Ut(t,"a","equalStrict"),r=Ut(e,"b","equalStrict");return x(n.shape,r.shape,"Error in equalStrict: "),gs(n,r)}}),ji=Ht({greaterEqualStrict_:function(t,e){Ln("strict variants of ops have been deprecated and will be removed in future");const n=Ut(t,"a","greaterEqualStrict"),r=Ut(e,"b","greaterEqualStrict");return x(n.shape,r.shape,"Error in greaterEqualStrict: "),Os(n,r)}}),qi=Ht({greaterStrict_:function(t,e){Ln("strict variants of ops have been deprecated and will be removed in future");const n=Ut(t,"a","greaterStrict"),r=Ut(e,"b","greaterStrict");return x(n.shape,r.shape,"Error in greaterStrict: "),Fs(n,r)}}),Ki=Ht({lessEqualStrict_:function(t,e){Ln("strict variants of ops have been deprecated and will be removed in future");const n=Ut(t,"a","lessEqualStrict"),r=Ut(e,"b","lessEqualStrict");return x(n.shape,r.shape,"Error in lessEqualStrict: "),Gs(n,r)}}),Xi=Ht({lessStrict_:function(t,e){Ln("strict variants of ops have been deprecated and will be removed in future");const n=Ut(t,"a","lessStrict"),r=Ut(e,"b","lessStrict");return x(n.shape,r.shape,"Error in lessStrict: "),Us(n,r)}}),Yi=Ht({notEqualStrict_:function(t,e){Ln("strict variants of ops have been deprecated and will be removed in future");const n=Ut(t,"a","notEqualStrict"),r=Ut(e,"b","notEqualStrict");return x(n.shape,r.shape,"Error in notEqualStrict: "),Ca(n,r)}});const Ji=Ht({addStrict_:function(t,e){Ln("strict variants of ops have been deprecated and will be removed in future");const n=Ut(t,"a","addStrict"),r=Ut(e,"b","addStrict");return x(n.shape,r.shape,"Error in addStrict: "),qn(n,r)}}),Zi=Ht({divStrict_:function(t,e){Ln("strict variants of ops have been deprecated and will be removed in future");const n=Ut(t,"a","div"),r=Ut(e,"b","div");return x(n.shape,r.shape,"Error in divideStrict: "),Xn(n,r)}}),Qi=Ht({maximumStrict_:function(t,e){Ln("strict variants of ops have been deprecated and will be removed in future");const n=Ut(t,"a","maximumStrict"),r=Ut(e,"b","maximumStrict");return x(n.shape,r.shape,"Error in maximumStrict: "),Ps(n,r)}}),to=Ht({minimumStrict_:function(t,e){Ln("strict variants of ops have been deprecated and will be removed in future");const n=Ut(t,"a","minimumStrict"),r=Ut(e,"b","minimumStrict");return x(n.shape,r.shape,"Error in minimumStrict: "),ya(n,r)}}),eo=Ht({modStrict_:function(t,e){Ln("strict variants of ops have been deprecated and will be removed in future");const n=Ut(t,"a","modStrict"),r=Ut(e,"b","modStrict");return x(n.shape,r.shape,"Error in modStrict: "),ba(n,r)}}),no=Ht({mulStrict_:function(t,e){Ln("strict variants of ops have been deprecated and will be removed in future");const n=Ut(t,"a","mul"),r=Ut(e,"b","mul");return x(n.shape,r.shape,"Error in multiplyStrict: "),Yn(n,r)}}),ro=Ht({powStrict_:function(t,e){return Ln("strict variants of ops have been deprecated and will be removed in future"),x(t.shape,e.shape,"Error in powStrict: "),Fa(t,e)}}),so=Ht({squaredDifferenceStrict_:function(t,e){Ln("strict variants of ops have been deprecated and will be removed in future");const n=Ut(t,"a","squaredDifferenceStrict"),r=Ut(e,"b","squaredDifferenceStrict");return x(n.shape,r.shape,"Error in squaredDifferenceStrict: "),Ti(n,r)}}),ao=Ht({subStrict_:function(t,e){Ln("strict variants of ops have been deprecated and will be removed in future");const n=Ut(t,"a","subStrict"),r=Ut(e,"b","subStrict");return x(n.shape,r.shape,"Error in subStrict: "),na(n,r)}});const io=Ht({norm_:function(t,e="euclidean",n=null,r=!1){const s=function t(e,n,r=null){if(0===e.rank)return Jn(e);if(1!==e.rank&&null===r)return t(Ye(e,[-1]),n,r);if(1===e.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return ra(Jn(e),r);if(n===1/0)return ea(Jn(e),r);if(n===-1/0)return ga(Jn(e),r);if("euclidean"===n||2===n)return Ai(ra(Fa(Jn(e),Ws(2,"int32")),r));throw new Error("Error in norm: invalid ord value: "+n)}if(Array.isArray(r)&&2===r.length){if(1===n)return ea(ra(Jn(e),r[0]),r[1]-1);if(n===1/0)return ea(ra(Jn(e),r[1]),r[0]);if(n===-1/0)return ga(ra(Jn(e),r[1]),r[0]);if("fro"===n||"euclidean"===n)return Ai(ra(xa(e),r));throw new Error("Error in norm: invalid ord value: "+n)}throw new Error("Error in norm: invalid axis: "+r)}(t=Ut(t,"x","norm"),e,n);let a=s.shape;if(r){const e=$(n,t.shape);a=sr(s.shape,e)}return Ye(s,a)}});const oo=Ht({movingAverage_:function(t,e,n,r,s=!0){const a=Ut(t,"v","movingAverage"),i=Ut(e,"x","movingAverage"),o=Ut(n,"decay","movingAverage");At(a,i),b(C(a.shape,i.shape),()=>"Shape mismatch in v and x");const l=Ws(1),u=na(l,o);let c=Yn(na(i,a),u);if(s){b(null!=r,()=>"When using zeroDebias: true, step is required.");const t=Ut(r,"step","movingAverage");c=Xn(c,na(l,Fa(o,t)))}return qn(a,c)}});const lo=Ht({scatterND_:function(t,e,n){const r=Ut(t,"indices","scatterND","int32"),s=Ut(e,"updates","scatterND");cn(s,r,n);const a={indices:r,updates:s},i={shape:n};return Ot.runKernelFunc(t=>t.scatterND(r,s,n),a,null,"ScatterNd",i)}});const uo=Ht({sparseToDense_:function(t,e,n,r=0){const s=Ut(t,"sparseIndices","sparseToDense","int32"),a=Ut(e,"sparseValues","sparseToDense"),i=Ut(r,"defaultValue","sparseToDense",a.dtype);!function(t,e,n,r){if("int32"!==t.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${t.shape}.`);const s=t.rank>0?t.shape[0]:1,a=t.rank>1?t.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=e.size;if(0!==e.rank&&(1!==e.rank||i!==s))throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${s}]`);if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,i);const o={sparseIndices:s,sparseValues:a,defaultValue:i},l={outputShape:n};return Ot.runKernelFunc(t=>t.sparseToDense(s,a,n,i),o,null,"SparseToDense",l)}});const co=Ht({gatherND_:function(t,e){const n=Ut(e,"indices","gatherND","int32"),r=Ut(t,"x","gatherND"),s={params:r,indices:n};return Ot.runKernelFunc(t=>t.gatherND(r,n),s,null,"GatherNd")}});const ho=Ht({dropout_:function(t,e,n,r){const s=Ut(t,"x","dropout");if(b("float32"===s.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`),b(e>=0&&e<1,()=>`rate must be a float in the range [0, 1), but got ${e}.`),0===e)return t instanceof yt?s.clone():s;const a=function(t,e){if(null==e)return t.shape.slice();if(C(t.shape,e))return e;if(t.shape.length===e.length){const n=[];for(let r=0;r<t.shape.length;r++)null==e[r]&&null!=t.shape[r]?n.push(t.shape[r]):n.push(e[r]);return n}return e}(s,n),i=1-e,o=Xn(Ts(qn(Za(a,0,1,"float32",r),i)),i);return Yn(s,o)}});function po(t){return Math.floor(Math.pow(2,Math.ceil(Math.log(t)/Math.log(2))))}function fo(t,e,n){const r=1-t%2,s=new Float32Array(t);for(let a=0;a<t;++a){const i=2*Math.PI*a/(t+r-1);s[a]=e-n*Math.cos(i)}return Qa(s,"float32")}const mo=async function(t,e,n=1){const r=Ut(t,"predictions","inTopK"),s=Ut(e,"targets","inTopK");b(r.rank>1,()=>"inTopK() expects the predictions to be of rank 2 or higher, but got "+r.rank),b(r.rank-1===s.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`),x(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];b(n>0&&n<=a,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`);const i=await r.data(),o=await s.data(),[l,u]=[i.length/a,a],c=D("bool",l);for(let t=0;t<l;t++){const e=t*u,r=i.subarray(e,e+u),s=[];for(let t=0;t<r.length;t++)s.push({value:r[t],index:t});s.sort((t,e)=>e.value-t.value),c[t]=0;for(let e=0;e<n;e++)if(s[e].index===o[t]){c[t]=1;break}}return t!==r&&r.dispose(),e!==s&&s.dispose(),Kt(c,s.shape,"bool")};const go=Ht({conv2DBackpropFilter_:function(t,e,n,r,s,a="NHWC",i){let o=t;3===t.rank&&(o=Ye(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let l=e;3===l.rank&&(l=Ye(e,[1,e.shape[0],e.shape[1],e.shape[2]])),b(4===o.rank,()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+o.shape+"."),b(4===l.rank,()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+l.shape+"."),b(4===n.length,()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+".");const u="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];b(u===n[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`),b(c===n[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`),null!=i&&b(S(s),()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`);const h={x:o,dy:l},p={strides:r,pad:s,dataFormat:a,dimRoundingMode:i};return Ot.runKernelFunc(t=>{const e=$r(a),u=vr(o.shape,n,r,1,s,i,!1,e);return t.conv2dDerFilter(o,l,u)},h,null,"Conv2DBackpropFilter",p)}});function yo(t,e,n){if(null==n||"linear"===n)return t;if("relu"===n)return Yn(t,Di(e));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function bo(t,e){let n=e;const r=fs(t.shape,e.shape);return r.length>0&&(n=ra(n,r)),Ye(n,t.shape)}function xo(t,e,n){if("linear"===e)return t;if("relu"===e)return ni(t);if("elu"===e)return vs(t);if("relu6"===e)return ri(t);if("prelu"===e)return Oa(t,n);throw new Error(`Unknown fused activation ${e}.`)}const wo=(t,e)=>!(t>0)||"linear"===e;const vo=Ht({fusedConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u}){if(l=l||"linear",!1===wo(Ot.state.gradientDepth,l)){let c=Qr(t,e,n,r,s,a,i);return null!=o&&(c=qn(c,o)),xo(c,l,u)}const c=Ut(t,"x","conv2d"),h=Ut(e,"filter","conv2d");let p=c,d=!1;3===c.rank&&(d=!0,p=Ye(c,[1,c.shape[0],c.shape[1],c.shape[2]])),b(4===p.rank,()=>"Error in fused conv2d: input must be rank 4, but got rank "+p.rank+"."),b(4===h.rank,()=>"Error in fused conv2d: filter must be rank 4, but got rank "+h.rank+"."),null!=i&&b(S(r),()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`),b(p.shape[3]===h.shape[2],()=>`Error in conv2d: depth of input (${p.shape[3]}) must match input depth for filter ${h.shape[2]}.`),b(Tr(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),b("NHWC"===s,()=>`Error in conv2d: got dataFormat of ${s} but only NHWC is currently supported.`);const f=vr(p.shape,h.shape,n,a,r,i);let m,g;null!=o&&(m=Ut(o,"bias","fused conv2d"),[m]=Et(m,c),ms(f.outShape,m.shape)),null!=u&&(g=Ut(u,"prelu weights","fused conv2d"));const y=(t,e)=>{const[s,i,o,u]=e,c=yo(t,o,l);b(Ar(a),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);const h=[es(i.shape,c,s,n,r),go(i,c,s.shape,n,r)];if(null!=u){const t=bo(u,c);h.push(t)}return h},x=t=>t.fusedConv2d({input:p,filter:h,convInfo:f,bias:m,activation:l,preluActivationWeights:g}),w={x:p,filter:h,bias:m,preluActivationWeights:g},v={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:l};if(null==o){return Ys((t,e,n)=>{let r=Ot.runKernelFunc(x,w,null,"FusedConv2D",v);return n([e,t,r]),d&&(r=Ye(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:y}})(p,h)}return Ys((t,e,n,r)=>{let s=Ot.runKernelFunc(x,w,null,"FusedConv2D",v);return r([e,t,s,n]),d&&(s=Ye(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:y}})(p,h,m)}});const No=Ht({depthwiseConv2dNativeBackpropFilter_:function(t,e,n,r){let s=t;3===t.rank&&(s=Ye(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let a=e;3===a.rank&&(a=Ye(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const i={x:s,dy:a};return Ot.runKernelFunc(t=>t.depthwiseConv2DDerFilter(s,a,r),i,null,"DepthwiseConv2dNativeBackpropFilter")}});const Co=Ht({depthwiseConv2dNativeBackpropInput_:function(t,e,n,r){let s=e,a=!1;3===e.rank&&(a=!0,s=Ye(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const i={dy:s},o=Ot.runKernelFunc(t=>t.depthwiseConv2DDerInput(s,n,r),i,null,"DepthwiseConv2dNativeBackpropInput");return a?Ye(o,[o.shape[1],o.shape[2],o.shape[3]]):o}});const So=Ht({fusedDepthwiseConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u}){if(!1===wo(Ot.state.gradientDepth,l)){let c=cs(t,e,n,r,s,a,i);return null!=o&&(c=qn(c,o)),xo(c,l,u)}const c=Ut(t,"x","depthwiseConv2d"),h=Ut(e,"filter","depthwiseConv2d");let p=c,d=!1;3===c.rank&&(d=!0,p=Ye(c,[1,c.shape[0],c.shape[1],c.shape[2]])),b(4===p.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`),b(4===h.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`),b(p.shape[3]===h.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`),null==a&&(a=[1,1]),b(Tr(n,a),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),null!=i&&b(S(r),()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${r}.`);const f=vr(p.shape,h.shape,n,a,r,i,!0);let m,g;null!=o&&(m=Ut(o,"bias","fused conv2d"),[m]=Et(m,c),ms(f.outShape,m.shape)),null!=u&&(g=Ut(u,"prelu weights","fused depthwiseConv2d"));const y=(t,e)=>{b(Ar(a),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);const[n,r,s,i]=e,o=yo(t,s,l),u=Co(r.shape,o,n,f),c=No(r,o,n.shape,f);if(null!=i){return[u,c,bo(m,o)]}return[u,c]},x=t=>t.fusedDepthwiseConv2D({input:p,filter:h,convInfo:f,bias:m,activation:l,preluActivationWeights:g}),w={x:p,filter:h,bias:m,preluActivationWeights:g},v={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:l};if(null==o){return Ys((t,e,n)=>{let r=Ot.runKernelFunc(x,w,null,"FusedDepthwiseConv2D",v);return n([e,t,r]),d&&(r=Ye(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:y}})(p,h)}return Ys((t,e,n,r)=>{let s=Ot.runKernelFunc(x,w,null,"FusedDepthwiseConv2D",v);return r([e,t,s,n]),d&&(s=Ye(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:y}})(p,h,m)}});const ko=Ht({fusedMatMul_:function({a:t,b:e,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:i}){if(!1===wo(Ot.state.gradientDepth,a)){let o=Je(t,e,n,r);return null!=s&&(o=qn(o,s)),xo(o,a,i)}let o=Ut(t,"a","fused matMul"),l=Ut(e,"b","fused matMul");[o,l]=Et(o,l);const u=n?o.shape[o.rank-2]:o.shape[o.rank-1],c=r?l.shape[l.rank-1]:l.shape[l.rank-2],h=n?o.shape[o.rank-1]:o.shape[o.rank-2],p=r?l.shape[l.rank-2]:l.shape[l.rank-1],d=o.shape.slice(0,-2),f=l.shape.slice(0,-2),m=N(d),g=N(f);b(o.rank>=2&&l.rank>=2&&o.rank===l.rank,()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${o.rank} and ${l.rank}.`),b(C(d,f),()=>`Error in fused matMul: outer dimensions (${d}) and (${f}) of Tensors with shapes ${o.shape} and `+l.shape+" must match."),b(u===c,()=>`Error in fused matMul: inner shapes (${u}) and (${c}) of Tensors with shapes ${o.shape} and ${l.shape} and transposeA=${n} and transposeB=${r} must match.`);const y=o.shape.slice(0,-2).concat([h,p]),x=Ye(o,n?[m,u,h]:[m,h,u]),w=Ye(l,r?[g,p,c]:[g,c,p]);let v,S;null!=s&&(v=Ut(s,"bias","fused matMul"),[v]=Et(v,o),ms(y,v.shape)),null!=i&&(S=Ut(i,"prelu weights","fused matMul"));const k=(t,e)=>{const[i,o,l,u]=e,c=yo(Ye(t,l.shape),l,a);let h,p;if(n||r?!n&&r?(h=Je(c,o,!1,!1),p=Je(c,i,!0,!1)):n&&!r?(h=Je(o,c,!1,!0),p=Je(i,c,!1,!1)):(h=Je(o,c,!0,!0),p=Je(c,i,!0,!0)):(h=Je(c,o,!1,!0),p=Je(i,c,!0,!1)),null!=s){return[h,p,bo(u,c)]}return[h,p]},I=t=>t.fusedBatchMatMul({a:x,b:w,transposeA:n,transposeB:r,bias:v,activation:a,preluActivationWeights:S}),E={a:x,b:w,bias:v,preluActivationWeights:S},A={transposeA:n,transposeB:r,activation:a};if(null==s){return Ys((t,e,n)=>{const r=Ot.runKernelFunc(I,E,null,"_FusedMatMul",A);return n([t,e,r]),{value:Ye(r,y),gradFunc:k}})(x,w)}return Ys((t,e,n,r)=>{const s=Ot.runKernelFunc(I,E,null,"_FusedMatMul",A);return r([t,e,s,n]),{value:Ye(s,y),gradFunc:k}})(x,w,v)}});var Io=Object.freeze({__proto__:null,conv2d:vo,depthwiseConv2d:So,matMul:ko});const Eo=Ht({hammingWindow_:function(t){return fo(t,.54,.46)}});const Ao=Ht({hannWindow_:function(t){return fo(t,.5,.5)}});const To=Ht({frame_:function(t,e,n,r=!1,s=0){let a=0;const i=[];for(;a+e<=t.size;)i.push(zr(t,a,e)),a+=n;if(r)for(;a<t.size;){const r=a+e-t.size,o=Or([zr(t,a,e-r),As([r],s)]);i.push(o),a+=n}return 0===i.length?Oi([],[0,e]):Ye(Or(i),[i.length,e])}});const $o=Ht({stft_:function(t,e,n,r,s=Ao){null==r&&(r=po(e));const a=To(t,e,n),i=Yn(a,s(e)),o=[];for(let t=0;t<a.shape[0];t++)o.push(Ei(zr(i,[t,0],[1,e]),r));return Or(o)}});const Ro=Ht({cropAndResize_:function(t,e,n,r,s,a){const i=Ut(t,"image","cropAndResize"),o=Ut(e,"boxes","cropAndResize","float32"),l=Ut(n,"boxInd","cropAndResize","int32");s=s||"bilinear",a=a||0;const u=o.shape[0];b(4===i.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),b(2===o.rank&&4===o.shape[1],()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`),b(1===l.rank&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`),b(2===r.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`),b(r[0]>=1&&r[1]>=1,()=>"cropSize must be atleast [1,1], but was "+r),b("bilinear"===s||"nearest"===s,()=>"method must be bilinear or nearest, but was "+s);const c={image:i,boxes:o,boxInd:l},h={method:s,extrapolationValue:a,cropSize:r};return Ot.runKernelFunc(t=>t.cropAndResize(i,o,l,r,s,a),c,null,"CropAndResize",h)}});const Do=Ht({flipLeftRight_:function(t){const e=Ut(t,"image","flipLeftRight","float32");b(4===e.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`);const n={image:e};return Ot.runKernel("FlipLeftRight",n,{})}});const _o=Ht({rotateWithOffset_:function(t,e,n=0,r=.5){const s=Ut(t,"image","rotateWithOffset","float32");b(4===s.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`);const a={image:s},i={radians:e,fillValue:n,center:r};return Ot.runKernel("RotateWithOffset",a,i)}});function Fo(t,e,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=t.shape[0];return n=Math.min(n,i),b(0<=r&&r<=1,()=>`iouThreshold must be in [0, 1], but was '${r}'`),b(2===t.rank,()=>`boxes must be a 2D tensor, but was of rank '${t.rank}'`),b(4===t.shape[1],()=>"boxes must have 4 columns, but 2nd dimension was "+t.shape[1]),b(1===e.rank,()=>"scores must be a 1D tensor"),b(e.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was `+e.shape[0]),b(0<=a&&a<=1,()=>`softNmsSigma must be in [0, 1], but was '${a}'`),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const Oo=Ht({nonMaxSuppression_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Ut(t,"boxes","nonMaxSuppression"),i=Ut(e,"scores","nonMaxSuppression"),o=Fo(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const l={maxOutputSize:n,iouThreshold:r,scoreThreshold:s};return Ot.runKernelFunc(t=>t.nonMaxSuppression(a,i,n,r,s),{boxes:a,scores:i},null,"NonMaxSuppressionV3",l)}});function Mo(t,e,n){const r=function(t,e,n){return function(t,e,n){let r=0,s=t.length,a=0,i=!1;for(;r<s;){a=r+(s-r>>>1);const o=n(e,t[a]);o>0?r=a+1:(s=a,i=!o)}return i?r:-r-1}(t,e,n||zo)}(t,e,n),s=r<0?-(r+1):r;t.splice(s,0,e)}function zo(t,e){return t>e?1:t<e?-1:0}function Lo(t,e,n,r,s){return Wo(t,e,n,r,s,0).selectedIndices}function Bo(t,e,n,r,s,a){return Wo(t,e,n,r,s,0,!1,a,!0)}function Po(t,e,n,r,s,a){return Wo(t,e,n,r,s,a,!0)}function Wo(t,e,n,r,s,a,i=!1,o=!1,l=!1){const u=[];for(let t=0;t<e.length;t++)e[t]>s&&u.push({score:e[t],boxIndex:t,suppressBeginIndex:0});u.sort(Go);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&u.length>0;){const e=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=e;if(n<s)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=Vo(t,a,h[n]);if(i>=r){o=!0;break}if(e.score=e.score*Uo(r,c,i),e.score<=s)break}e.suppressBeginIndex=h.length,o||(e.score===n?(h.push(a),p.push(e.score)):e.score>s&&Mo(u,e,Go))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:Qa(h,"int32")};return i&&(m.selectedScores=Qa(p,"float32")),l&&(m.validOutputs=Ws(d,"int32")),m}function Vo(t,e,n){const r=t.subarray(4*e,4*e+4),s=t.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),o=Math.max(r[0],r[2]),l=Math.max(r[1],r[3]),u=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),h=Math.max(s[0],s[2]),p=Math.max(s[1],s[3]),d=(o-a)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function Uo(t,e,n){const r=Math.exp(e*n*n);return n<=t?r:0}function Go(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}const Ho=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Ut(t,"boxes","nonMaxSuppressionAsync"),i=Ut(e,"scores","nonMaxSuppressionAsync"),o=Fo(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const l=await Promise.all([a.data(),i.data()]),u=Lo(l[0],l[1],n,r,s);return a!==t&&a.dispose(),i!==e&&i.dispose(),u};const jo=Ht({nonMaxSuppressionWithScore_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Ut(t,"boxes","nonMaxSuppression"),o=Ut(e,"scores","nonMaxSuppression"),l=Fo(i,o,n,r,s,a),u={boxes:i,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:r=l.iouThreshold,scoreThreshold:s=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},h=Ot.runKernel("NonMaxSuppressionV5",u,c);return{selectedIndices:h[0],selectedScores:h[1]}}});const qo=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Ut(t,"boxes","nonMaxSuppressionAsync"),o=Ut(e,"scores","nonMaxSuppressionAsync"),l=Fo(i,o,n,r,s,a);n=l.maxOutputSize,r=l.iouThreshold,s=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=Po(u[0],u[1],n,r,s,a);return i!==t&&i.dispose(),o!==e&&o.dispose(),c};const Ko=Ht({nonMaxSuppressionPadded_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=Ut(t,"boxes","nonMaxSuppression"),o=Ut(e,"scores","nonMaxSuppression"),l=Fo(i,o,n,r,s,null),u={boxes:i,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},h=Ot.runKernel("NonMaxSuppressionV4",u,c);return{selectedIndices:h[0],validOutputs:h[1]}}});const Xo=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=Ut(t,"boxes","nonMaxSuppressionAsync"),o=Ut(e,"scores","nonMaxSuppressionAsync"),l=Fo(i,o,n,r,s,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),f=Bo(p,d,u,c,h,a);return i!==t&&i.dispose(),o!==e&&o.dispose(),f};const Yo=Ht({resizeBilinear_:function(t,e,n=!1){const r=Ut(t,"images","resizeBilinear");b(3===r.rank||4===r.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`),b(2===e.length,()=>"Error in resizeBilinear: new shape must 2D, but got shape "+e+".");let s=r,a=!1;3===r.rank&&(a=!0,s=Ye(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[i,o]=e,l={images:s},u={alignCorners:n,size:e},c=Ot.runKernelFunc((t,e)=>(e([s]),t.resizeBilinear(s,i,o,n)),l,null,"ResizeBilinear",u);return a?Ye(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Jo=Ht({resizeNearestNeighbor_:function(t,e,n=!1){const r=Ut(t,"images","resizeNearestNeighbor");b(3===r.rank||4===r.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`),b(2===e.length,()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+e+"."),b("float32"===r.dtype||"int32"===r.dtype,()=>"`images` must have `int32` or `float32` as dtype");let s=r,a=!1;3===r.rank&&(a=!0,s=Ye(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[i,o]=e,l={images:s},u={alignCorners:n,size:e},c=Ot.runKernelFunc((t,e)=>(e([s]),t.resizeNearestNeighbor(s,i,o,n)),l,null,"ResizeNearestNeighbor",u);return a?Ye(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Zo=Ht({bandPart_:function(t,e,n){b(e%1==0,()=>`bandPart(): numLower must be an integer, got ${e}.`),b(n%1==0,()=>`bandPart(): numUpper must be an integer, got ${n}.`);const r=Ut(t,"a","bandPart");b(r.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`);const s=r.shape,[a,i]=r.shape.slice(-2);if(!(e<=a))throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);e<0&&(e=a),n<0&&(n=i);const o=Ye(ti(0,a,1,"int32"),[-1,1]),l=ti(0,i,1,"int32"),u=na(o,l),c=ia(Gs(u,Ws(+e,"int32")),Os(u,Ws(-n,"int32"))),h=da([a,i],r.dtype);return Ye(Ri(Pi(Ye(r,[-1,a,i])).map(t=>ys(c,t,h))),s)}});const Qo=Ht({gramSchmidt_:function(t){let e;if(Array.isArray(t)){e=!1,b(null!=t&&t.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=t[0].shape[0];for(let e=1;e<t.length;++e)b(t[e].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${t[e].shape[0]} vs. ${n})`)}else e=!0,t=Ii(t,t.shape[0],0).map(t=>$i(t,[0]));b(t.length<=t[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${t.length}) exceeds number of dimensions (${t[0].shape[0]}).`);const n=[],r=t;for(let e=0;e<t.length;++e)n.push(Ot.tidy(()=>{let t=r[e];if(e>0)for(let r=0;r<e;++r){const e=Yn(ra(Yn(n[r],t)),n[r]);t=na(t,e)}return Xn(t,io(t,"euclidean"))}));return e?Ri(n,0):n}});function tl(t,e=!1){return Ot.tidy(()=>{b(2===t.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${t.shape.length}D Tensor.`);const n=t.shape[0],r=t.shape[1];let s=Es(n),a=_e(t);const i=Oi([[1]],[1,1]);let o=_e(i);const l=n>=r?r:n;for(let t=0;t<l;++t){const e=a,l=o,u=s;[o,a,s]=Ot.tidy(()=>{const e=zr(a,[t,t],[n-t,1]),l=io(e),u=zr(a,[t,t],[1,1]),c=ys(Fs(u,0),Oi([[-1]]),Oi([[1]])),h=na(u,Yn(c,l)),p=Xn(e,h);o=1===p.shape[0]?_e(i):Or([i,zr(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=Zs(Xn(Je(c,h),l)),f=zr(a,[t,0],[n-t,r]),m=Yn(d,o),g=Qe(o);if(0===t)a=na(f,Je(m,Je(g,f)));else{const e=na(f,Je(m,Je(g,f)));a=Or([zr(a,[0,0],[t,r]),e],0)}const y=Qe(m),b=zr(s,[0,t],[n,s.shape[1]-t]);if(0===t)s=na(b,Je(Je(b,o),y));else{const e=na(b,Je(Je(b,o),y));s=Or([zr(s,[0,0],[n,t]),e],1)}return[o,a,s]}),Vn([e,l,u])}return!e&&n>r&&(s=zr(s,[0,0],[n,r]),a=zr(a,[0,0],[r,r])),[s,a]})}const el=Ht({qr_:function(t,e=!1){if(b(t.rank>=2,()=>"qr() requires input tensor to have a rank >= 2, but got rank "+t.rank),2===t.rank)return tl(t,e);{const n=t.shape.slice(0,t.shape.length-2).reduce((t,e)=>t*e),r=Pi(Ye(t,[n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),s=[],a=[];return r.forEach(t=>{const[n,r]=tl(t,e);s.push(n),a.push(r)}),[Ye(Ri(s,0),t.shape),Ye(Ri(a,0),t.shape)]}}});var nl;(nl=t.Reduction||(t.Reduction={}))[nl.NONE=0]="NONE",nl[nl.MEAN=1]="MEAN",nl[nl.SUM=2]="SUM",nl[nl.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS";const rl=Ht({computeWeightedLoss_:function(e,n,r=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const s=Ut(e,"losses","computeWeightedLoss");let a=null;null!=n&&(a=Ut(n,"weights","computeWeightedLoss"));const i=null==a?s:Yn(s,a);if(r===t.Reduction.NONE)return i;if(r===t.Reduction.SUM)return ra(i);if(r===t.Reduction.MEAN){if(null==a)return ma(i);{const t=s.size/a.size,e=Xn(ra(i),ra(a));return t>1?Xn(e,Ws(t)):e}}if(r===t.Reduction.SUM_BY_NONZERO_WEIGHTS){if(null==a)return Xn(ra(i),Ws(s.size));{const t=Yn(a,fa(s.shape)),e=De(ra(Ca(t,Ws(0))),"float32");return Xn(ra(i),e)}}throw Error("Unknown reduction: "+r)}});const sl=Ht({absoluteDifference_:function(e,n,r,s=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const a=Ut(e,"labels","absoluteDifference"),i=Ut(n,"predictions","absoluteDifference");let o=null;null!=r&&(o=Ut(r,"weights","absoluteDifference")),x(a.shape,i.shape,"Error in absoluteDifference: ");const l=Jn(na(a,i));return rl(l,o,s)}});const al=Ht({cosineDistance_:function(e,n,r,s,a=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const i=Ut(e,"labels","cosineDistance"),o=Ut(n,"predictions","cosineDistance");let l=null;null!=s&&(l=Ut(s,"weights","cosineDistance")),x(i.shape,o.shape,"Error in cosineDistance: ");const u=Ws(1),c=na(u,ra(Yn(i,o),r,!0));return rl(c,l,a)}});const il=Ht({hingeLoss_:function(e,n,r,s=t.Reduction.SUM_BY_NONZERO_WEIGHTS){let a=Ut(e,"labels","hingeLoss");const i=Ut(n,"predictions","hingeLoss");let o=null;null!=r&&(o=Ut(r,"weights","hingeLoss")),x(a.shape,i.shape,"Error in hingeLoss: ");const l=Ws(1);a=na(Yn(Ws(2),a),l);const u=ni(na(l,Yn(a,i)));return rl(u,o,s)}});const ol=Ht({huberLoss_:function(e,n,r,s=1,a=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const i=Ut(e,"labels","huberLoss"),o=Ut(n,"predictions","huberLoss");let l=null;null!=r&&(l=Ut(r,"weights","huberLoss")),x(i.shape,o.shape,"Error in huberLoss: ");const u=Ws(s),c=Jn(na(o,i)),h=ya(c,u),p=na(c,h),d=qn(Yn(Ws(.5),xa(h)),Yn(u,p));return rl(d,l,a)}});const ll=Ht({logLoss_:function(e,n,r,s=1e-7,a=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const i=Ut(e,"labels","logLoss"),o=Ut(n,"predictions","logLoss");let l=null;null!=r&&(l=Ut(r,"weights","logLoss")),x(i.shape,o.shape,"Error in logLoss: ");const u=Ws(1),c=Ws(s),h=Zs(Yn(i,qs(qn(o,c)))),p=Yn(na(u,i),qs(qn(na(u,o),c))),d=na(h,p);return rl(d,l,a)}});const ul=Ht({meanSquaredError_:function(e,n,r,s=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const a=Ut(e,"labels","meanSquaredError"),i=Ut(n,"predictions","meanSquaredError");let o=null;null!=r&&(o=Ut(r,"weights","meanSquaredError")),x(a.shape,i.shape,"Error in meanSquaredError: ");const l=Ti(a,i);return rl(l,o,s)}});const cl=Ht({sigmoidCrossEntropy_:function(e,n,r,s=0,a=t.Reduction.SUM_BY_NONZERO_WEIGHTS){let i=Ut(e,"multiClassLabels","sigmoidCrossEntropy");const o=Ut(n,"logits","sigmoidCrossEntropy");let l=null;if(null!=r&&(l=Ut(r,"weights","sigmoidCrossEntropy")),x(i.shape,o.shape,"Error in sigmoidCrossEntropy: "),s>0){const t=Ws(s),e=Ws(1),n=Ws(.5);i=qn(Yn(i,na(e,t)),Yn(n,t))}const u=function(t,e){const n=Ut(t,"labels","sigmoidCrossEntropyWithLogits"),r=Ut(e,"logits","sigmoidCrossEntropyWithLogits");x(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=ni(r),a=Yn(r,n),i=Ks(Cs(Zs(Jn(r))));return qn(na(s,a),i)}(i,o);return rl(u,l,a)}});const hl=Ht({softmaxCrossEntropy_:function(e,n,r,s=0,a=t.Reduction.SUM_BY_NONZERO_WEIGHTS){let i=Ut(e,"onehotLabels","softmaxCrossEntropy");const o=Ut(n,"logits","softmaxCrossEntropy");let l=null;if(null!=r&&(l=Ut(r,"weights","softmaxCrossEntropy")),x(i.shape,o.shape,"Error in softmaxCrossEntropy: "),s>0){const t=Ws(s),e=Ws(1),n=Ws(i.shape[1]);i=qn(Yn(i,na(e,t)),Xn(t,n))}const u=function(t,e,n=-1){if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was `+n);return Ys((t,e,r)=>{const s=aa(e,[n],!0),a=na(De(e,"float32"),s);r([t,a]);const i=Zs(Yn(a,t));return{value:ra(i,[n]),gradFunc:(t,e)=>{const[r,s]=e,a=sr(t.shape,[n]);return[Yn(Ye(t,a),na(De(r,"float32"),Cs(s))),Yn(Ye(t,a),na(Cs(s),De(r,"float32")))]}}})(t,e)}(i,o);return rl(u,l,a)}}),pl={fft:Ni,ifft:Ci,rfft:Ei,irfft:Si},dl={hammingWindow:Eo,hannWindow:Ao,frame:To,stft:$o},fl={flipLeftRight:Do,resizeNearestNeighbor:Jo,resizeBilinear:Yo,rotateWithOffset:_o,cropAndResize:Ro,nonMaxSuppression:Oo,nonMaxSuppressionAsync:Ho,nonMaxSuppressionWithScore:jo,nonMaxSuppressionWithScoreAsync:qo,nonMaxSuppressionPadded:Ko,nonMaxSuppressionPaddedAsync:Xo},ml={bandPart:Zo,gramSchmidt:Qo,qr:el},gl={absoluteDifference:sl,computeWeightedLoss:rl,cosineDistance:al,hingeLoss:il,huberLoss:ol,logLoss:ll,meanSquaredError:ul,sigmoidCrossEntropy:cl,softmaxCrossEntropy:hl};class yl extends Tn{minimize(t,e=!1,n){const{value:r,grads:s}=this.computeGradients(t,n);if(null!=n){const t=n.map(t=>({name:t.name,tensor:s[t.name]}));this.applyGradients(t)}else this.applyGradients(s);return Vn(s),e?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return Xs(t,e)}dispose(){null!=this.iterations_&&Vn(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Ws(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}}Object.defineProperty(yl,Symbol.hasInstance,{value:t=>null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients});class bl extends yl{constructor(t,e,n=null){super(),this.learningRate=t,this.rho=e,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Ot.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Ot.registeredVariables[e];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:e+"/accum_grad",variable:Wn(()=>bs(r).variable(!1))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:e+"/accum_var",variable:Wn(()=>bs(r).variable(!1))});const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;Wn(()=>{const t=qn(Yn(a,this.rho),Yn(xa(s),1-this.rho)),e=Yn(Xn(Ai(qn(i,this.epsilon)),Ai(qn(a,this.epsilon))),s),n=qn(Yn(i,this.rho),Yn(xa(e),1-this.rho));a.assign(t),i.assign(n);const o=qn(Yn(e,-this.learningRate),r);r.assign(o)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Vn(this.accumulatedGrads.map(t=>t.variable)),Vn(this.accumulatedUpdates.map(t=>t.variable)))}async getWeights(){const t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){const e=(t=await this.extractIterations(t)).length/2;this.accumulatedGrads=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedUpdates=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}bl.className="Adadelta",Rn(bl);class xl extends yl{constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Ot.registeredVariables[e];if(null==this.accumulatedGrads[n]){const t=!1;this.accumulatedGrads[n]={originalName:e+"/accumulator",variable:Wn(()=>As(r.shape,this.initialAccumulatorValue).variable(t))}}const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedGrads[n].variable;Wn(()=>{const t=qn(a,xa(s));a.assign(t);const e=qn(Yn(Xn(s,Ai(qn(t,Ot.backend.epsilon()))),-this.learningRate),r);r.assign(e)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Vn(this.accumulatedGrads.map(t=>t.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);this.accumulatedGrads=t.map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}xl.className="Adagrad",Rn(xl);class wl extends yl{constructor(t,e,n,r=null){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Wn(()=>{this.accBeta1=Ws(e).variable(),this.accBeta2=Ws(n).variable()}),null==r&&(this.epsilon=Ot.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);Wn(()=>{const n=na(1,this.accBeta1),r=na(1,this.accBeta2);e.forEach((e,s)=>{const a=Ot.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:e+"/m",variable:Wn(()=>bs(a).variable(!1))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:e+"/v",variable:Wn(()=>bs(a).variable(!1))});const i=Array.isArray(t)?t[s].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,l=this.accumulatedSecondMoment[s].variable,u=qn(Yn(o,this.beta1),Yn(i,1-this.beta1)),c=qn(Yn(l,this.beta2),Yn(xa(i),1-this.beta2)),h=Xn(u,n),p=Xn(c,r);o.assign(u),l.assign(c);const d=qn(Yn(Xn(h,qn(Ai(p),this.epsilon)),-this.learningRate),a);a.assign(d)}),this.accBeta1.assign(Yn(this.accBeta1,this.beta1)),this.accBeta2.assign(Yn(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Vn(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedSecondMoment&&Vn(this.accumulatedSecondMoment.map(t=>t.variable))}async getWeights(){const t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t),Wn(()=>{this.accBeta1.assign(Fa(this.beta1,this.iterations_+1)),this.accBeta2.assign(Fa(this.beta2,this.iterations_+1))});const e=t.length/2;this.accumulatedFirstMoment=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedSecondMoment=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}wl.className="Adam",Rn(wl);class vl extends yl{constructor(t,e,n,r=null,s=0){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Wn(()=>{this.iteration=Ws(0).variable(),this.accBeta1=Ws(e).variable()}),null==r&&(this.epsilon=Ot.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);Wn(()=>{const n=na(1,this.accBeta1),r=Xn(-this.learningRate,qn(Yn(this.iteration,this.decay),1));e.forEach((e,s)=>{const a=Ot.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:e+"/m",variable:bs(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:e+"/v",variable:bs(a).variable(!1)});const i=Array.isArray(t)?t[s].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,l=this.accumulatedWeightedInfNorm[s].variable,u=qn(Yn(o,this.beta1),Yn(i,1-this.beta1)),c=Yn(l,this.beta2),h=Jn(i),p=Ps(c,h);o.assign(u),l.assign(p);const d=qn(Yn(Xn(r,n),Xn(u,qn(p,this.epsilon))),a);a.assign(d)}),this.iteration.assign(qn(this.iteration,1)),this.accBeta1.assign(Yn(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Vn(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedWeightedInfNorm&&Vn(this.accumulatedWeightedInfNorm.map(t=>t.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}vl.className="Adamax",Rn(vl);class Nl extends yl{constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Array.isArray(t)?t[n].tensor:t[e];if(null==r)return;const s=Ot.registeredVariables[e];Wn(()=>{const t=qn(Yn(this.c,r),s);s.assign(t)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=Un(Ws(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(0!==(t=await this.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}Nl.className="SGD",Rn(Nl);class Cl extends Nl{constructor(t,e,n=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=n,this.accumulations=[],this.m=Ws(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Ot.registeredVariables[e];if(null==this.accumulations[n]){const t=!1;this.accumulations[n]={originalName:e+"/momentum",variable:Wn(()=>bs(r).variable(t))}}const s=this.accumulations[n].variable,a=Array.isArray(t)?t[n].tensor:t[e];null!=a&&Wn(()=>{let t;const e=qn(Yn(this.m,s),a);t=this.useNesterov?qn(Yn(this.c,qn(a,Yn(e,this.m))),r):qn(Yn(this.c,e),r),s.assign(e),r.assign(t)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Vn(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);this.accumulations=t.map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}Cl.className="Momentum",Rn(Cl);class Sl extends yl{constructor(t,e=.9,n=0,r=null,s=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=Ot.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Ot.registeredVariables[e];null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:e+"/rms",variable:Wn(()=>bs(r).variable(!1))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:e+"/momentum",variable:Wn(()=>bs(r).variable(!1))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:e+"/mg",variable:Wn(()=>bs(r).variable(!1))});const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;Wn(()=>{const t=qn(Yn(a,this.decay),Yn(xa(s),1-this.decay));if(this.centered){const e=this.accumulatedMeanGrads[n].variable,o=qn(Yn(e,this.decay),Yn(s,1-this.decay)),l=Xn(Yn(s,this.learningRate),Ai(na(t,qn(xa(o),this.epsilon)))),u=qn(Yn(i,this.momentum),l);a.assign(t),e.assign(o),i.assign(u);const c=na(r,u);r.assign(c)}else{const t=qn(Yn(a,this.decay),Yn(xa(s),1-this.decay)),e=qn(Yn(i,this.momentum),Xn(Yn(s,this.learningRate),Ai(qn(t,this.epsilon))));a.assign(t),i.assign(e);const n=na(r,e);r.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Vn(this.accumulatedMeanSquares.map(t=>t.variable)),null!=this.accumulatedMeanGrads&&this.centered&&Vn(this.accumulatedMeanGrads.map(t=>t.variable)),null!=this.accumulatedMoments&&Vn(this.accumulatedMoments.map(t=>t.variable))}async getWeights(){const t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);const e=this.centered?t.length/3:t.length/2;this.accumulatedMeanSquares=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedMoments=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}Sl.className="RMSProp",Rn(Sl);class kl{static sgd(t){return new Nl(t)}static momentum(t,e,n=!1){return new Cl(t,e,n)}static rmsprop(t,e=.9,n=0,r=null,s=!1){return new Sl(t,e,n,r,s)}static adam(t=.001,e=.9,n=.999,r=null){return new wl(t,e,n,r)}static adadelta(t=.001,e=.95,n=null){return new bl(t,e,n)}static adamax(t=.002,e=.9,n=.999,r=null,s=0){return new vl(t,e,n,r,s)}static adagrad(t,e=.1){return new xl(t,e)}}const Il={sgd:kl.sgd,momentum:kl.momentum,adadelta:kl.adadelta,adagrad:kl.adagrad,rmsprop:kl.rmsprop,adamax:kl.adamax,adam:kl.adam},El="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:t=>t();function Al(){return new Promise(t=>El(()=>t()))}function Tl(t,e,n){return[n*("number"==typeof t?t:t[0]),e*("number"==typeof t?t:t[1])]}function $l(t,e,n,r=!0){let s=[];if(r)s=s.concat(e.slice(0)),s.push(t[0]/n),s=s.concat(t.slice(1));else{s=s.concat(t[0]);const n=e.length;for(let r=0;r<n;++r)s=s.concat([t[r+1]/e[r],e[r]]);s=s.concat(t.slice(n+1))}return s}function Rl(t,e,n=!0){const r=[];if(n){r.push(e);for(let n=e+1;n<t;++n)n<=2*e?(r.push(n),r.push(n-(e+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<t;++r)r>=2*e+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function Dl(t,e,n,r=!0){const s=[];r?s.push(t[0]/n):s.push(t[0]*n);for(let n=1;n<t.length;++n)n<=e.length?r?s.push(e[n-1]*t[n]):s.push(t[n]/e[n-1]):s.push(t[n]);return s}function _l(t,e){const n=[0];for(let r=0;r<e;++r)n.push(t[r][0]);return n}function Fl(t,e,n){const r=t.slice(0,1);for(let s=0;s<n;++s)r.push(t[s+1]-e[s][0]-e[s][1]);return r}const Ol=1.0507009873554805;function Ml(...t){n().getBool("IS_TEST")||console.warn(...t)}function zl(t,e){if(t.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${t.length}, imag: ${e.length}.`);const n=new Float32Array(2*t.length);for(let r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function Ll(t){const e=new Float32Array(t.length/2),n=new Float32Array(t.length/2);for(let r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return{real:e,imag:n}}function Bl(t){const e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=0;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}function Pl(t){const e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=2;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}function Wl(t,e){return{real:t[2*e],imag:t[2*e+1]}}function Vl(t,e,n,r){t[2*r]=e,t[2*r+1]=n}function Ul(t,e){const n=new Float32Array(t/2),r=new Float32Array(t/2);for(let s=0;s<Math.ceil(t/2);s++){const a=(e?2:-2)*Math.PI*(s/t);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function Gl(t,e,n){const r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}function Hl(t,e,n){if("complex64"===e){if("complex64"===t.dtype)return t.clone();const e=da(t.shape),r=De(t,"float32"),s=n.complex(r,e);return e.dispose(),r.dispose(),s}if(!M(t.dtype,e))return Ot.makeTensorFromDataId(t.dataId,t.shape,e);if("complex64"===t.dtype){const r=n.real(t),s=De(r,e);return r.dispose(),s}if("int32"===e)return n.int(t);if("bool"===e){const e=Ws(0,t.dtype),r=n.notEqual(t,e);return e.dispose(),r}throw new Error(`Error in Cast: failed to cast ${t.dtype} to ${e}`)}function jl(t,e){return Ot.makeTensorFromDataId(t.dataId,e,t.dtype)}function ql(t,e,n){const r=(e-t)/(n-1),s=Y(n,"float32");s[0]=t;for(let t=1;t<s.length;t++)s[t]=s[t-1]+r;return Qa(s,"float32")}var Kl=Object.freeze({__proto__:null,slice_util:An,segment_util:Ds,castTensor:Hl,reshapeTensor:jl,linspaceImpl:ql,upcastType:kt,axesAreInnerMostDims:er,combineLocations:nr,computeOutAndReduceShapes:rr,expandShapeToKeepDim:sr,assertAxesAreInnerMostDims:ar,getAxesPermutation:ir,getUndoAxesPermutation:or,getInnerMostAxes:lr,getBroadcastDims:ds,getReductionAxes:fs,assertAndGetBroadcastShape:ms,assertParamsConsistent:_r,computeOutShape:Fr,computeDilation2DInfo:br,computePool2DInfo:xr,computePool3DInfo:wr,computeConv2DInfo:vr,computeConv3DInfo:Nr,computeDefaultPad:Cr,tupleValuesAreOne:Ar,eitherStridesOrDilationsAreOne:Tr,convertConv2DDataFormat:$r,getFusedDyActivation:yo,getFusedBiasGradient:bo,applyActivation:xo,shouldFuse:wo,PARALLELIZE_THRESHOLD:30,computeOptimalWindowSize:$s,getImageCenter:Tl,getReshaped:$l,getPermuted:Rl,getReshapedPermuted:Dl,getSliceBeginCoords:_l,getSliceSize:Fl,prepareAndValidate:on,validateUpdateShape:un,validateInput:cn,calculateShapes:hn,SELU_SCALEALPHA:1.7580993408473768,SELU_SCALE:Ol,ERF_P:.3275911,ERF_A1:.254829592,ERF_A2:-.284496736,ERF_A3:1.421413741,ERF_A4:-1.453152027,ERF_A5:1.061405429,warn:Ml,log:function(...t){n().getBool("IS_TEST")||console.log(...t)},mergeRealAndImagArrays:zl,splitRealAndImagArrays:Ll,complexWithEvenIndex:Bl,complexWithOddIndex:Pl,getComplexWithIndex:Wl,assignToTypedArray:Vl,exponents:Ul,exponent:Gl,prepareSplitSize:ki});function Xl(t,e,n){const r=new Array(t.rank).fill(0),s=t.shape.slice();return e.map(e=>{const a=[...s];a[n]=e;const i=zr(t,r,a);return r[n]+=e,i})}function Yl(t,e){const n=new Array(t.rank);for(let r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];const r=Re(n,t.dtype);for(let e=0;e<r.values.length;++e){const n=r.indexToLoc(e),s=new Array(t.rank);for(let e=0;e<s.length;e++)s[e]=n[e]%t.shape[e];const a=t.locToIndex(s);r.values[e]=t.values[a]}return r.toTensor()}function Jl(t,e,n,r,s){const a=e[e.length-1],[i,o]=[t.length/a,a],l=D(n,i*r),u=D("int32",i*r);for(let e=0;e<i;e++){const n=e*o,s=t.subarray(n,n+o),a=[];for(let t=0;t<s.length;t++)a.push({value:s[t],index:t});a.sort((t,e)=>e.value-t.value);const i=e*r,c=l.subarray(i,i+r),h=u.subarray(i,i+r);for(let t=0;t<r;t++)c[t]=a[t].value,h[t]=a[t].index}const c=e.slice();return c[c.length-1]=r,[Kt(l,c,n),Kt(u,c,"int32")]}var Zl=Object.freeze({__proto__:null,nonMaxSuppressionV3Impl:Lo,nonMaxSuppressionV4Impl:Bo,nonMaxSuppressionV5Impl:Po,split:Xl,tile:Yl,topkImpl:Jl,whereImpl:Vi});class Ql{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class tu{time(t){return eu("time")}read(t){return eu("read")}readSync(t){return eu("readSync")}numDataIds(){return eu("numDataIds")}disposeData(t){return eu("disposeData")}write(t,e,n){return eu("write")}move(t,e,n,r){return eu("move")}memory(){return eu("memory")}floatPrecision(){return eu("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(t,e,n,r){return eu("batchMatMul")}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){return eu("fusedBatchMatMul")}slice(t,e,n){return eu("slice")}stridedSlice(t,e,n,r){return eu("stridedSlice")}unstack(t,e){return eu("unstack")}reverse(t,e){return eu("reverse")}concat(t,e){return eu("concat")}neg(t){return eu("neg")}add(t,e){return eu("add")}addN(t){return eu("addN")}subtract(t,e){return eu("subtract")}multiply(t,e){return eu("multiply")}realDivide(t,e){return eu("realDivide")}floorDiv(t,e){return eu("floorDiv")}sum(t,e){return eu("sum")}prod(t,e){return eu("prod")}unsortedSegmentSum(t,e,n){return eu("unsortedSegmentSum")}argMin(t,e){return eu("argMin")}argMax(t,e){return eu("argMax")}equal(t,e){return eu("equal")}notEqual(t,e){return eu("notEqual")}less(t,e){return eu("less")}lessEqual(t,e){return eu("lessEqual")}greater(t,e){return eu("greater")}greaterEqual(t,e){return eu("greaterEqual")}logicalNot(t){return eu("logicalNot")}logicalAnd(t,e){return eu("logicalAnd")}logicalOr(t,e){return eu("logicalOr")}where(t){return eu("where")}select(t,e,n){return eu("select")}topk(t,e,n){return eu("topk")}min(t,e){return eu("min")}minimum(t,e){return eu("minimum")}mod(t,e){return eu("mod")}max(t,e){return eu("max")}maximum(t,e){return eu("maximum")}all(t,e){return eu("all")}any(t,e){return eu("any")}squaredDifference(t,e){return eu("squaredDifference")}ceil(t){return eu("ceil")}floor(t){return eu("floor")}round(t){return eu("round")}sign(t){return eu("sign")}isNaN(t){return eu("isNaN")}isInf(t){return eu("isInf")}isFinite(t){return eu("isFinite")}pow(t,e){return eu("pow")}exp(t){return eu("exp")}expm1(t){return eu("expm1")}softmax(t,e){return eu("softmax")}log(t){return eu("log")}log1p(t){return eu("log1p")}sqrt(t){return eu("sqrt")}rsqrt(t){return eu("rsqrt")}square(t){return eu("square")}reciprocal(t){return eu("reciprocal")}relu(t){return eu("relu")}relu6(t){return eu("relu6")}prelu(t,e){return eu("prelu")}elu(t){return eu("elu")}eluDer(t,e){return eu("eluDer")}selu(t){return eu("selu")}int(t){return eu("int")}clip(t,e,n){return eu("clip")}abs(t){return eu("abs")}complexAbs(t){return eu("complexAbs")}sigmoid(t){return eu("sigmoid")}softplus(t){return eu("softplus")}sin(t){return eu("sin")}cos(t){return eu("cos")}tan(t){return eu("tan")}asin(t){return eu("asin")}acos(t){return eu("acos")}atan(t){return eu("atan")}atan2(t,e){return eu("atan2")}sinh(t){return eu("sinh")}cosh(t){return eu("cosh")}tanh(t){return eu("tanh")}asinh(t){return eu("asinh")}acosh(t){return eu("acosh")}atanh(t){return eu("atanh")}erf(t){return eu("erf")}step(t,e){return eu("step")}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){return eu("fusedConv2d")}conv2d(t,e,n){return eu("conv2d")}conv2dDerInput(t,e,n){return eu("conv2dDerInput")}conv2dDerFilter(t,e,n){return eu("conv2dDerFilter")}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){return eu("fusedDepthwiseConv2D")}depthwiseConv2D(t,e,n){return eu("depthwiseConv2D")}depthwiseConv2DDerInput(t,e,n){return eu("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(t,e,n){return eu("depthwiseConv2DDerFilter")}conv3d(t,e,n){return eu("conv3d")}conv3dDerInput(t,e,n){return eu("conv3dDerInput")}conv3dDerFilter(t,e,n){return eu("conv3dDerFilter")}maxPool(t,e){return eu("maxPool")}maxPoolBackprop(t,e,n,r){return eu("maxPoolBackprop")}avgPool(t,e){return eu("avgPool")}avgPoolBackprop(t,e,n){return eu("avgPoolBackprop")}avgPool3d(t,e){return eu("avgPool3d")}avgPool3dBackprop(t,e,n){return eu("avgPool3dBackprop")}maxPool3d(t,e){return eu("maxPool3d")}maxPool3dBackprop(t,e,n,r){return eu("maxPool3dBackprop")}reshape(t,e){return eu("reshape")}cast(t,e){return eu("cast")}tile(t,e){return eu("tile")}pad(t,e,n){return eu("pad")}transpose(t,e){return eu("transpose")}gather(t,e,n){return eu("gather")}gatherND(t,e){return eu("gatherND")}scatterND(t,e,n){return eu("scatterND")}batchToSpaceND(t,e,n){return eu("batchToSpaceND")}spaceToBatchND(t,e,n){return eu("spaceToBatchND")}resizeBilinear(t,e,n,r){return eu("resizeBilinear")}resizeBilinearBackprop(t,e,n){return eu("resizeBilinearBackprop")}resizeNearestNeighbor(t,e,n,r){return eu("resizeNearestNeighbor")}resizeNearestNeighborBackprop(t,e,n){return eu("resizeNearestNeighborBackprop")}batchNorm(t,e,n,r,s,a){return eu("batchNorm")}localResponseNormalization4D(t,e,n,r,s){return eu("localResponseNormalization4D")}LRNGrad(t,e,n,r,s,a,i){return eu("LRNGrad")}multinomial(t,e,n,r){return eu("multinomial")}oneHot(t,e,n,r){return eu("oneHot")}cumsum(t,e,n,r){return eu("cumsum")}nonMaxSuppression(t,e,n,r,s){return eu("nonMaxSuppression")}fft(t){return eu("fft")}ifft(t){return eu("ifft")}complex(t,e){return eu("complex")}real(t){return eu("real")}imag(t){return eu("imag")}cropAndResize(t,e,n,r,s,a){return eu("cropAndResize")}depthToSpace(t,e,n){return eu("depthToSpace")}split(t,e,n){return eu("split")}sparseToDense(t,e,n,r){return eu("sparseToDense")}diag(t){return eu("diag")}fill(t,e,n){return eu("fill")}onesLike(t){return eu("onesLike")}zerosLike(t){return eu("zerosLike")}linspace(t,e,n){return eu("linspace")}dispose(){return eu("dispose")}}function eu(t){throw new Error(`'${t}' not yet implemented or not found in the registry. Did you forget to import the kernel?`)}const nu={kernelName:"Abs",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yn(t,Di(De(n,"float32"),-1))}}},ru={kernelName:"Acos",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=xa(De(n,"float32")),r=Ai(na(Ws(1),e));return Zs(Xn(t,r))}}}},su={kernelName:"Acosh",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=Ai(na(xa(De(n,"float32")),1));return Xn(t,e)}}}},au={kernelName:"Add",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=ms(n.shape,r.shape);return{a:()=>{let e=t;const r=fs(n.shape,s);return r.length>0&&(e=ra(e,r)),Ye(e,n.shape)},b:()=>{let e=t;const n=fs(r.shape,s);return n.length>0&&(e=ra(e,n)),Ye(e,r.shape)}}}},iu={kernelName:"AddN",saveAllInputs:!0,gradFunc:(t,e)=>{const n={};return e.forEach((e,r)=>{n[r]=()=>t.clone()}),n}},ou={kernelName:"ArgMax",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>bs(n)}}},lu={kernelName:"ArgMin",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>bs(n)}}},uu={kernelName:"Asin",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Xn(t,Ai(na(Ws(1),xa(De(n,"float32")))))}}},cu={kernelName:"Asinh",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=Ai(qn(Ws(1),xa(De(n,"float32"))));return Xn(t,e)}}}},hu={kernelName:"Atan2",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=ms(n.shape,r.shape);return{a:()=>{const e=qn(xa(n),xa(r));let a=Yn(t,Xn(r,e));const i=fs(n.shape,s);return i.length>0&&(a=ra(a,i)),Ye(a,n.shape)},b:()=>{const e=qn(xa(n),xa(r));let a=Zs(Yn(t,Xn(n,e)));const i=fs(r.shape,s);return i.length>0&&(a=ra(a,i)),Ye(a,r.shape)}}}},pu={kernelName:"Atan",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Xn(t,qn(xa(De(n,"float32")),1))}}},du={kernelName:"Atanh",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Xn(t,na(Ws(1),xa(De(n,"float32"))))}}};const fu=Ht({avgPool3dBackprop_:function(t,e,n,r,s=[1,1,1],a,i){const o=Ut(t,"dy","avgPool3dBackprop"),l=Ut(e,"input","avgPool3dBackprop");let u=o,c=l,h=!1;4===l.rank&&(h=!0,u=Ye(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),c=Ye(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),b(5===u.rank,()=>"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+u.rank+"."),b(5===c.rank,()=>"Error in avgPool3dBackprop: input must be rank 5 but got rank "+c.rank+"."),b(Tr(r,s),()=>`Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides ${r} and dilations '${s}'`),null!=i&&b(S(a),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const p={dy:u,input:c},d={filterSize:n,strides:r,dilations:s,pad:a,dimRoundingMode:i},f=Ot.runKernelFunc(t=>{const e=wr(c.shape,n,r,s,a,i);return t.avgPool3dBackprop(u,c,e)},p,null,"AvgPool3DBackprop",d);return h?Ye(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),mu={kernelName:"AvgPool3D",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:s,strides:a,dilations:i,pad:o,dimRoundingMode:l}=n,u=null==i?[1,1,1]:i;return{x:()=>fu(t,r,s,a,u,o,l)}}};const gu=Ht({avgPoolBackprop_:function(t,e,n,r,s){const a=Ut(t,"dy","avgPoolBackprop"),i=Ut(e,"input","avgPoolBackprop");b(i.rank===a.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`);let o=i,l=a,u=!1;3===i.rank&&(u=!0,o=Ye(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=Ye(a,[1,a.shape[0],a.shape[1],a.shape[2]])),b(4===l.rank,()=>"Error in avgPoolBackprop: dy must be rank 4 but got rank "+l.rank+"."),b(4===o.rank,()=>"Error in avgPoolBackprop: input must be rank 4 but got rank "+o.rank+".");const c={dy:l,input:o},h={filterSize:n,strides:r,pad:s},p=Ot.runKernelFunc(t=>{const e=xr(o.shape,n,r,1,s);return t.avgPoolBackprop(l,o,e)},c,null,"AvgPoolBackprop",h);return u?Ye(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),yu={kernelName:"AvgPool",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:s,strides:a,pad:i}=n;return{x:()=>gu(t,r,s,a,i)}}},bu={kernelName:"BatchMatMul",inputsToSave:["a","b"],gradFunc:(t,e,n)=>{const[r,s]=e,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>Je(t,s,!1,!1),b:()=>Je(t,r,!0,!1)}:a&&!i?{a:()=>Je(s,t,!1,!0),b:()=>Je(r,t,!1,!1)}:{a:()=>Je(s,t,!0,!0),b:()=>Je(t,r,!0,!0)}:{a:()=>Je(t,s,!1,!0),b:()=>Je(r,t,!0,!1)}}},xu={kernelName:"BatchToSpaceND",gradFunc:(t,e,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>Da(t,r,s)}}},wu={kernelName:"BroadcastTo",gradFunc:(t,e,n)=>{const r=n,s=r.inputShape,a=r.shape,i=Array.from(a);for(let t=s.length-1;t>=0;t--)if(s[t]===a[t])i[t]=1;else if(1!==s[t])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const o=[];for(let t=0;t<i.length;t++)i[t]>1&&o.push(t);return{x:()=>ra(t,o,!0)}}},vu={kernelName:"Cast",gradFunc:t=>({x:()=>t.clone()})},Nu={kernelName:"Ceil",gradFunc:t=>({x:()=>bs(t)})},Cu={kernelName:"ClipByValue",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>ys(ia(Os(r,s),Gs(r,a)),t,bs(t))}}},Su={kernelName:"Concat",saveAllInputs:!0,gradFunc:(t,e,n)=>{const r=e.map(t=>t.shape),{axis:s}=n,a=$(s,e[0].shape)[0],i=r.map(t=>t[a]);return Ii(t,i,a).map(t=>()=>t)}},ku={kernelName:"Conv2D",inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,{dilations:a,strides:i,pad:o,dataFormat:l}=n;return b(Ar(a),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`),{x:()=>es(r.shape,t,s,i,o,l),filter:()=>go(r,t,s.shape,i,o,l)}}},Iu={kernelName:"Conv2DBackpropInput",inputsToSave:["dy","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>Qr(t,s,a,i,o,1,l),filter:()=>go(t,r,s.shape,a,i,o,l)}}};const Eu=Ht({conv3DBackpropFilter_:function(t,e,n,r,s){let a=t;4===t.rank&&(a=Ye(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]));let i=e;4===i.rank&&(i=Ye(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]])),b(5===a.rank,()=>"Error in conv3dDerFilter: input must be rank 5, but got shape "+a.shape+"."),b(5===i.rank,()=>"Error in conv3dDerFilter: dy must be rank 5, but got shape "+i.shape+"."),b(5===n.length,()=>"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."),b(a.shape[4]===n[3],()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`),b(i.shape[4]===n[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`);const o={x:a,y:i},l={strides:r,pad:s};return Ot.runKernelFunc(t=>{const e=Nr(a.shape,n,r,1,s);return t.conv3dDerFilter(a,i,e)},o,null,"Conv3DBackpropFilterV2",l)}}),Au={kernelName:"Conv3D",inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:r,strides:s,pad:a}=n;b(Ar(r),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`);const[i,o]=e;return{x:()=>ss(i.shape,t,o,s,a),filter:()=>Eu(i,t,o.shape,s,a)}}},Tu={kernelName:"Cos",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yn(Zs(mi(De(n,"float32"))),t)}}},$u={kernelName:"Cosh",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yn(gi(De(n,"float32")),t)}}},Ru={kernelName:"Cumsum",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{axis:s,exclusive:a,reverse:i}=n;return{x:()=>{const e=ir([s],r.rank);let n=ls(t,s,a,!i);return null!=e&&(n=Qe(n,e)),n}}}},Du={kernelName:"DepthwiseConv2dNative",inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:i}=n,o=null==r?[1,1]:r;b(Ar(o),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[l,u]=e;b(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),b(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),b(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),b(Tr(s,o),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${o}'.`),null!=i&&b(S(a),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const c=vr(l.shape,u.shape,s,o,a,i,!0);return{x:()=>Co(l.shape,t,u,c),filter:()=>No(l,t,u.shape,c)}}},_u={kernelName:"Dilation2D",inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,a={x:r,filter:s,dy:t},i={x:r,filter:s,dy:t};return{x:()=>Ot.runKernel("Dilation2DBackpropInput",a,n),filter:()=>Ot.runKernel("Dilation2DBackpropFilter",i,n)}}},Fu={kernelName:"Div",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=ms(n.shape,r.shape);return{a:()=>{const e=Xn(t,De(r,"float32")),a=fs(n.shape,s);return a.length>0?Ye(ra(e,a),n.shape):e},b:()=>{let e=Yn(t,De(n,"float32"));const a=fs(r.shape,s);a.length>0&&(e=Ye(ra(e,a),r.shape));const i=xa(r);return Zs(Xn(e,De(i,"float32")))}}}},Ou={kernelName:"Elu",outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e,r=e=>e.eluDer(t,n),s={dy:t,y:n};return{x:()=>Ot.runKernelFunc(r,s,null,"EluGrad")}}},Mu={kernelName:"Erf",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,r=Yn(Cs(Zs(xa(n))),2/Math.sqrt(Math.PI));return{x:()=>Yn(t,r)}}},zu={kernelName:"Exp",outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yn(t,n)}}},Lu={kernelName:"Expm1",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yn(t,Cs(n))}}},Bu={kernelName:"Floor",gradFunc:t=>({x:()=>bs(t)})},Pu={kernelName:"FloorDiv",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=ms(n.shape,r.shape);return{a:()=>{const e=Xn(t,De(r,"float32")),a=fs(n.shape,s);return a.length>0?Ye(ra(e,a),n.shape):e},b:()=>{let e=Yn(t,De(n,"float32"));const a=fs(r.shape,s);a.length>0&&(e=Ye(ra(e,a),r.shape));const i=xa(r);return Zs(Xn(e,De(i,"float32")))}}}},Wu={kernelName:"FusedBatchNorm",inputsToSave:["x","mean","variance","scale"],gradFunc:(t,e,n)=>{const{varianceEpsilon:r}=n,[s,a,i,o]=e,l=null==o?Ws(1):o,u=fs(a.shape,s.shape),c=[];if(1===a.rank){for(let t=0;t<s.shape.length-1;++t)c.push(s.shape[t]);c.push(1)}const h=na(s,a),p=Yn(t,l),d=ci(qn(i,Ws(r))),f=Yn(Yn(Yn(d,d),d),Ws(-.5));return{x:()=>1===a.rank?Ye(Yn(Yn(t,Is(Ye(d,[1,1,1,a.shape[0]]),c)),l),s.shape):Ye(Yn(Yn(t,d),l),s.shape),mean:()=>{let t=Yn(Yn(d,Ws(-1)),p);return 1===a.rank&&(t=ra(t,u)),Ye(t,a.shape)},variance:()=>{let t=Yn(Yn(f,h),p);return 1===a.rank&&(t=ra(t,u)),Ye(t,a.shape)},scale:()=>{const e=Yn(h,d);let n=Yn(t,e);return 1===a.rank&&(n=ra(n,u)),Ye(n,a.shape)},offset:()=>{let e=t;return 1===a.rank&&(e=ra(e,u)),Ye(e,a.shape)}}}},Vu={kernelName:"GatherV2",inputsToSave:["x","indices"],gradFunc:(t,e,n)=>{const[r,s]=e,{axis:a}=n,i=$(a,r.shape)[0];return{x:()=>{const e=r.shape,n=s.size,o=e.slice(0,i),l=o.length,u=e.slice(a,e.length).slice(1),c=u.length,h=Uu(0,l),p=Uu(l+1,l+1+c),d=Gu([o,[n],u]),f=Ye(t,d),m=Ye(s,[n]),g=Gu([[l],h,p]),y=Qe(f,g);let b=Bi(y,m,r.shape[i]);const x=or(g);return b=Qe(b,x),b},indices:()=>s}}};function Uu(t,e){const n=[];for(let r=t;r<e;++r)n.push(r);return n}function Gu(t){const e=[];for(let n=0;n<t.length;++n)for(let r=0;r<t[n].length;++r)e.push(t[n][r]);return e}const Hu={kernelName:"GreaterEqual",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>bs(n),b:()=>bs(r)}}},ju={kernelName:"Identity",gradFunc:t=>({x:()=>De(t,"float32")})},qu={kernelName:"IsFinite",gradFunc:t=>({x:()=>bs(t)})},Ku={kernelName:"IsInf",gradFunc:t=>({x:()=>bs(t)})},Xu={kernelName:"IsNan",gradFunc:t=>({x:()=>bs(t)})},Yu={kernelName:"Log1p",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Xn(t,qn(n,1))}}},Ju={kernelName:"Log",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Xn(t,De(n,"float32"))}}},Zu={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r]=e,{axis:s}=n;return{logits:()=>{const e=Cs(r);return na(t,Yn(ra(t,s,!0),e))}}}};const Qu=Ht({localResponseNormalizationBackprop_:function(t,e,n,r=5,s=1,a=1,i=.5){const o={x:t,y:e,dy:n},l={depthRadius:r,bias:s,alpha:a,beta:i};return Ot.runKernelFunc(o=>o.LRNGrad(n,t,e,r,s,a,i),o,null,"LRNBackprop",l)}}),tc={kernelName:"LRN",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>Qu(r,s,t,a,i,o,l)}}};function ec(t,e,n,r,s){return e.rank<n.rank&&(e=Ye(e,sr(e.shape,r))),t.rank<n.rank&&(t=Ye(t,sr(t.shape,r))),{x:()=>{const r=Yn(t,De(gs(n,e),t.dtype));return null==s?r:Qe(r,s)}}}const nc={kernelName:"Max",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const r=n,{reductionIndices:s}=r,[a,i]=e,o=$(s,a.shape),l=ir(o,a.rank),u=ec(t,i,a,o,l);return{x:()=>{let t=u.x();return null!=l&&(t=Qe(t)),t}}}},rc={kernelName:"Maximum",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>Yn(t,De(Os(n,r),"float32")),b:()=>Yn(t,De(Us(n,r),"float32"))}}};const sc=Ht({maxPool3dBackprop_:function(t,e,n,r,s,a=[1,1,1],i,o){const l=Ut(t,"dy","maxPool3dBackprop"),u=Ut(e,"input","maxPool3dBackprop"),c=Ut(n,"output","maxPool3dBackprop");let h=l,p=u,d=c,f=!1;4===u.rank&&(f=!0,h=Ye(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=Ye(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=Ye(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),b(5===h.rank,()=>"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+h.rank+"."),b(5===p.rank,()=>"Error in maxPool3dBackprop: input must be rank 5 but got rank "+p.rank+"."),b(5===d.rank,()=>"Error in maxPool3dBackprop: output must be rank 5 but got rank "+d.rank+"."),b(Tr(s,a),()=>`Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`),null!=o&&b(S(i),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`);const m={dy:h,input:p,output:d},g={filterSize:r,strides:s,dilations:a,pad:i,dimRoundingMode:o},y=Ot.runKernelFunc(t=>{const e=wr(p.shape,r,s,a,i,o);return t.maxPool3dBackprop(h,p,d,e)},m,null,"MaxPool3DBackprop",g);return f?Ye(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}}),ac={kernelName:"MaxPool3D",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{filterSize:a,strides:i,dilations:o,pad:l,dimRoundingMode:u}=n,c=null==o?[1,1,1]:o;return{x:()=>sc(t,r,s,a,i,c,l,u)}}};const ic=Ht({maxPoolBackprop_:function(t,e,n,r,s,a,i){const o=Ut(t,"dy","maxPoolBackprop"),l=Ut(e,"input","maxPoolBackprop"),u=Ut(n,"output","maxPoolBackprop");b(l.rank===o.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`),b(4===o.rank,()=>"Error in maxPoolBackprop: dy must be rank 4 but got rank "+o.rank+"."),b(4===l.rank,()=>"Error in maxPoolBackprop: input must be rank 4 but got rank "+l.rank+"."),null!=i&&b(S(a),()=>`Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const c={dy:o,input:l,output:u},h={filterSize:r,strides:s,pad:a,dimRoundingMode:i};return Ot.runKernelFunc(t=>{const e=xr(l.shape,r,s,1,a,i);return t.maxPoolBackprop(o,l,u,e)},c,null,"MaxPoolBackprop",h)}}),oc={kernelName:"PadV2",inputsToSave:["x"],gradFunc:(t,e,n)=>{const r=e[0],{paddings:s}=n,a=s.map(t=>t[0]);return{x:()=>zr(t,a,r.shape)}}},lc={kernelName:"SpaceToBatchND",gradFunc:(t,e,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>Pr(t,r,s)}}},uc={kernelName:"SplitV",gradFunc:(t,e,n)=>{const{axis:r}=n;return{x:()=>Or(t,r)}}};const cc=[nu,ru,su,au,iu,ou,lu,uu,cu,hu,pu,du,mu,yu,bu,xu,wu,vu,Nu,Cu,Su,Iu,ku,Au,Tu,$u,Ru,Du,_u,Fu,Ou,Mu,zu,Lu,Pu,Bu,Wu,Vu,Hu,ju,qu,Ku,Xu,Yu,Ju,Zu,tc,nc,nc,rc,ac,{kernelName:"MaxPool",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{filterSize:a,strides:i,pad:o}=n;return{x:()=>ic(t,r,s,a,i,o)}}},{kernelName:"Min",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const r=n,{axis:s}=r,[a,i]=e,o=$(s,a.shape),l=ir(o,a.rank),u=ec(t,i,a,o,l);return{x:()=>{let t=u.x();return null!=l&&(t=Qe(t)),t}}}},{kernelName:"Minimum",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>Yn(t,De(Gs(n,r),"float32")),b:()=>Yn(t,De(Fs(n,r),"float32"))}}},{kernelName:"Mod",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=ms(n.shape,r.shape);return{a:()=>{const e=fs(n.shape,s);return e.length>0?Ye(ra(t,e),n.shape):t},b:()=>{const e=Yn(t,Zs(Ts(Xn(n,r)))),a=fs(r.shape,s);return a.length>0?Ye(ra(e,a),r.shape):e}}}},{kernelName:"Multiply",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=ms(n.shape,r.shape);return{a:()=>{const e=Yn(t,De(r,"float32")),a=fs(n.shape,s);return a.length>0?Ye(ra(e,a),n.shape):e},b:()=>{const e=Yn(t,De(n,"float32")),a=fs(r.shape,s);return a.length>0?Ye(ra(e,a),r.shape):e}}}},{kernelName:"Negate",gradFunc:t=>({x:()=>Zs(t)})},{kernelName:"OneHot",inputsToSave:["indices"],gradFunc:(t,e)=>{const n=e[0];return{indices:()=>da(n.shape,"float32")}}},{kernelName:"OnesLike",gradFunc:t=>({x:()=>bs(t)})},oc,oc,{kernelName:"Pow",inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(t,e)=>{const[n,r,s]=e,a=n,i=r,o=ms(a.shape,i.shape);return{a:()=>{const e=De(i,"float32");let n=Yn(t,Yn(e,Fa(a,na(e,Ws(1)))));const r=fs(a.shape,o);return r.length>0&&(n=ra(n,r)),Ye(n,a.shape)},b:()=>{const e=Fs(a,0),n=ys(e,qs(a),bs(a));let r=Yn(t,Yn(s,n));const l=fs(i.shape,o);return l.length>0&&(r=ra(r,l)),Ye(r,i.shape)}}}},{kernelName:"Prelu",inputsToSave:["x","alpha"],gradFunc:(t,e)=>{const[n,r]=e,s=Fs(n,0);return{x:()=>ys(s,t,Yn(t,r)),alpha:()=>{let e=ys(s,bs(t),Yn(t,n));const a=fs(r.shape,t.shape);return a.length>0&&(e=ra(e,a)),Ye(e,r.shape)}}}},{kernelName:"Reciprocal",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Xn(t,Zs(xa(n)))}}},{kernelName:"Relu6",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,r=Yn(Gs(n,6),Di(n));return{x:()=>Yn(t,De(r,"float32"))}}},{kernelName:"Relu",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yn(t,De(Di(n),"float32"))}}},{kernelName:"Reshape",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ye(t,n.shape)}}},{kernelName:"ResizeBilinear",inputsToSave:["images"],gradFunc:(t,e,n)=>{const[r]=e,s=e=>{const{alignCorners:s}=n;return e.resizeBilinearBackprop(t,r,s)},a={images:r};return{images:()=>Ot.runKernelFunc(s,a,null,"ResizeBilinearGrad",n)}}},{kernelName:"ResizeNearestNeighbor",inputsToSave:["images"],gradFunc:(t,e,n)=>{const[r]=e,s=e=>{const{alignCorners:s}=n;return e.resizeNearestNeighborBackprop(t,r,s)},a={images:r};return{images:()=>Ot.runKernelFunc(s,a,null,"ResizeNearestNeighborGrad",n)}}},{kernelName:"Reverse",gradFunc:(t,e,n)=>{const{dims:r}=n,s=$(r,t.shape);return{x:()=>si(t,s)}}},{kernelName:"Round",gradFunc:t=>({x:()=>bs(t)})},{kernelName:"Rsqrt",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Zs(Xn(t,Yn(Fa(n,1.5),2)))}}},{kernelName:"SelectV2",inputsToSave:["condition"],gradFunc:(t,e)=>{const[n]=e;return{condition:()=>De(bs(n),"float32"),t:()=>Yn(t,De(n,t.dtype)),e:()=>Yn(t,De(oa(n),t.dtype))}}},{kernelName:"Selu",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=Fs(n,Ws(0)),r=Ws(1.7580993408473768),s=Ws(Ol),a=Yn(t,s),i=Yn(Yn(t,r),Cs(De(n,"float32")));return ys(e,a,i)}}}},{kernelName:"Sigmoid",outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yn(t,Yn(n,na(Ws(1),n)))}}},{kernelName:"Sign",gradFunc:t=>({x:()=>bs(t)})},{kernelName:"Sin",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yn(is(De(n,"float32")),t)}}},{kernelName:"Sinh",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yn(os(De(n,"float32")),t)}}},{kernelName:"Slice",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{begin:s,size:a}=n,i=r.shape,[o,l]=En(r,s,a),u=[];for(let e=0;e<t.rank;e++)u.push([o[e],i[e]-o[e]-l[e]]);return{x:()=>Ea(t,u)}}},{kernelName:"Softmax",outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r]=e,{dim:s}=n,a=Yn(t,r);return{logits:()=>na(a,Yn(ra(a,[s],!0),r))}}},{kernelName:"Softplus",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yn(t,Mr(n))}}},lc,lc,uc,uc,{kernelName:"Sqrt",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Xn(t,Yn(Ai(De(n,"float32")),2))}}},{kernelName:"SquaredDifference",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Ws(2);return{a:()=>Yn(t,Yn(s,na(n,r))),b:()=>Yn(t,Yn(s,na(r,n)))}}},{kernelName:"Square",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yn(t,Yn(De(n,"float32"),2))}}},{kernelName:"Step",gradFunc:t=>({x:()=>bs(t)})},{kernelName:"Sub",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=ms(n.shape,r.shape);return{a:()=>{let e=t;const r=fs(n.shape,s);return r.length>0&&(e=ra(e,r)),Ye(e,n.shape)},b:()=>{let e=t;const n=fs(r.shape,s);return n.length>0&&(e=ra(e,n)),Ye(Zs(e),r.shape)}}}},{kernelName:"Sum",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,s=r.shape.slice(),{axis:a}=n;$(a,r.shape).forEach(t=>{s[t]=1});const i=Ye(t,s),o=Yn(i,fa(r.shape,"float32"));return{x:()=>o}}},{kernelName:"Tan",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Xn(t,xa(is(n)))}}},{kernelName:"Tanh",outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yn(na(Ws(1),xa(n)),t)}}},{kernelName:"Tile",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{reps:s}=n;return{x:()=>{let e=bs(r);if(1===r.rank)for(let n=0;n<s[0];++n)e=qn(e,zr(t,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)e=qn(e,zr(t,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)e=qn(e,zr(t,[n*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)for(let o=0;o<s[3];++o)e=qn(e,zr(t,[n*r.shape[0],a*r.shape[1],i*r.shape[2],o*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return e}}}},{kernelName:"Transpose",gradFunc:(t,e,n)=>{const r=n,{perm:s}=r,a=or(s);return{x:()=>Qe(t,a)}}},{kernelName:"Unpack",gradFunc:(t,e,n)=>{const r=n,{axis:s}=r;return{value:()=>Ri(t,s)}}},{kernelName:"UnsortedSegmentSum",inputsToSave:["segmentIds"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>function(t,e){const n=Ps(e,bs(e)),r=_s(t,n);let s=Os(e,Ws(0,"int32"));const a=r.rank-s.rank;for(let t=0;t<a;++t)s=Ss(s,t+1);s=ia(s,fa(r.shape,"bool"));const i=bs(r);return ys(s,r,i)}(t,n)}}},{kernelName:"ZerosLike",gradFunc:t=>({x:()=>bs(t)})}];for(const t of cc)p(t);let hc;function pc(){return null==hc&&(hc=jn().epsilon()),hc}yt.prototype.abs=function(){return this.throwIfDisposed(),Jn(this)},yt.prototype.acos=function(){return this.throwIfDisposed(),Zn(this)},yt.prototype.acosh=function(){return this.throwIfDisposed(),Qn(this)},yt.prototype.addStrict=function(t){return this.throwIfDisposed(),Ji(this,t)},yt.prototype.add=function(t){return this.throwIfDisposed(),qn(this,t)},yt.prototype.all=function(t,e){return this.throwIfDisposed(),ur(this,t,e)},yt.prototype.any=function(t,e){return this.throwIfDisposed(),cr(this,t,e)},yt.prototype.argMax=function(t){return this.throwIfDisposed(),hr(this,t)},yt.prototype.argMin=function(t){return this.throwIfDisposed(),pr(this,t)},yt.prototype.asScalar=function(){return this.throwIfDisposed(),b(1===this.size,()=>"The array must have only 1 element."),Ye(this,[])},yt.prototype.asType=function(t){return this.throwIfDisposed(),De(this,t)},yt.prototype.as1D=function(){return this.throwIfDisposed(),Ye(this,[this.size])},yt.prototype.as2D=function(t,e){return this.throwIfDisposed(),Ye(this,[t,e])},yt.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),Ye(this,[t,e,n])},yt.prototype.as4D=function(t,e,n,r){return this.throwIfDisposed(),Ye(this,[t,e,n,r])},yt.prototype.as5D=function(t,e,n,r,s){return this.throwIfDisposed(),Ye(this,[t,e,n,r,s])},yt.prototype.asin=function(){return this.throwIfDisposed(),dr(this)},yt.prototype.asinh=function(){return this.throwIfDisposed(),fr(this)},yt.prototype.atan=function(){return this.throwIfDisposed(),mr(this)},yt.prototype.atan2=function(t){return this.throwIfDisposed(),gr(this,t)},yt.prototype.atanh=function(){return this.throwIfDisposed(),yr(this)},yt.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),Rr(this,t,e,n,r)},yt.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),Pr(this,t,e)},yt.prototype.batchNorm=function(t,e,n,r,s){return this.throwIfDisposed(),Vr(this,t,e,n,r,s)},yt.prototype.broadcastTo=function(t){return this.throwIfDisposed(),jr(this,t)},yt.prototype.cast=function(t){return this.throwIfDisposed(),De(this,t)},yt.prototype.ceil=function(){return this.throwIfDisposed(),qr(this)},yt.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),Kr(this,t,e)},yt.prototype.concat=function(t,e){return this.throwIfDisposed(),t instanceof yt&&(t=[t]),Or([this,...t],e)},yt.prototype.conv1d=function(t,e,n,r,s,a){return this.throwIfDisposed(),ts(this,t,e,n,r,s,a)},yt.prototype.conv2dTranspose=function(t,e,n,r,s){return this.throwIfDisposed(),ns(this,t,e,n,r,s)},yt.prototype.conv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),Qr(this,t,e,n,r,s,a)},yt.prototype.cos=function(){return this.throwIfDisposed(),is(this)},yt.prototype.cosh=function(){return this.throwIfDisposed(),os(this)},yt.prototype.cumsum=function(t,e,n){return this.throwIfDisposed(),ls(this,t,e,n)},yt.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),us(this,t,e)},yt.prototype.depthwiseConv2D=function(t,e,n,r,s,a){return Ln("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),cs(this,t,e,n,r,s,a)},yt.prototype.depthwiseConv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),cs(this,t,e,n,r,s,a)},yt.prototype.dilation2d=function(t,e,n,r,s){return this.throwIfDisposed(),ps(this,t,e,n,r,s)},yt.prototype.divNoNan=function(t){return this.throwIfDisposed(),xs(this,t)},yt.prototype.divStrict=function(t){return this.throwIfDisposed(),Zi(this,t)},yt.prototype.div=function(t){return this.throwIfDisposed(),Xn(this,t)},yt.prototype.dot=function(t){return this.throwIfDisposed(),ws(this,t)},yt.prototype.elu=function(){return this.throwIfDisposed(),vs(this)},yt.prototype.equalStrict=function(t){return this.throwIfDisposed(),Hi(this,t)},yt.prototype.equal=function(t){return this.throwIfDisposed(),gs(this,t)},yt.prototype.erf=function(){return this.throwIfDisposed(),Ns(this)},yt.prototype.exp=function(){return this.throwIfDisposed(),Cs(this)},yt.prototype.expandDims=function(t){return this.throwIfDisposed(),Ss(this,t)},yt.prototype.expm1=function(){return this.throwIfDisposed(),ks(this)},yt.prototype.fft=function(){return this.throwIfDisposed(),Ni(this)},yt.prototype.flatten=function(){return this.throwIfDisposed(),Ye(this,[this.size])},yt.prototype.floor=function(){return this.throwIfDisposed(),Ts(this)},yt.prototype.floorDiv=function(t){return this.throwIfDisposed(),Kn(this,t)},yt.prototype.gather=function(t,e){return this.throwIfDisposed(),_s(this,t,e)},yt.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),ji(this,t)},yt.prototype.greaterEqual=function(t){return this.throwIfDisposed(),Os(this,t)},yt.prototype.greaterStrict=function(t){return this.throwIfDisposed(),qi(this,t)},yt.prototype.greater=function(t){return this.throwIfDisposed(),Fs(this,t)},yt.prototype.ifft=function(){return this.throwIfDisposed(),Ci(this)},yt.prototype.irfft=function(){return this.throwIfDisposed(),Si(this)},yt.prototype.isFinite=function(){return this.throwIfDisposed(),zs(this)},yt.prototype.isInf=function(){return this.throwIfDisposed(),Ls(this)},yt.prototype.isNaN=function(){return this.throwIfDisposed(),Bs(this)},yt.prototype.leakyRelu=function(t){return this.throwIfDisposed(),Vs(this,t)},yt.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),Ki(this,t)},yt.prototype.lessEqual=function(t){return this.throwIfDisposed(),Gs(this,t)},yt.prototype.lessStrict=function(t){return this.throwIfDisposed(),Xi(this,t)},yt.prototype.less=function(t){return this.throwIfDisposed(),Us(this,t)},yt.prototype.localResponseNormalization=function(t,e,n,r){return this.throwIfDisposed(),js(this,t,e,n,r)},yt.prototype.logSigmoid=function(){return this.throwIfDisposed(),ta(this)},yt.prototype.logSoftmax=function(t){return this.throwIfDisposed(),sa(this,t)},yt.prototype.logSumExp=function(t,e){return this.throwIfDisposed(),aa(this,t,e)},yt.prototype.log=function(){return this.throwIfDisposed(),qs(this)},yt.prototype.log1p=function(){return this.throwIfDisposed(),Ks(this)},yt.prototype.logicalAnd=function(t){return this.throwIfDisposed(),ia(this,t)},yt.prototype.logicalNot=function(){return this.throwIfDisposed(),oa(this)},yt.prototype.logicalOr=function(t){return this.throwIfDisposed(),la(this,t)},yt.prototype.logicalXor=function(t){return this.throwIfDisposed(),ua(this,t)},yt.prototype.matMul=function(t,e,n){return this.throwIfDisposed(),Je(this,t,e,n)},yt.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),ca(this,t,e,n,r)},yt.prototype.max=function(t,e){return this.throwIfDisposed(),ea(this,t,e)},yt.prototype.maximumStrict=function(t){return this.throwIfDisposed(),Qi(this,t)},yt.prototype.maximum=function(t){return this.throwIfDisposed(),Ps(this,t)},yt.prototype.mean=function(t,e){return this.throwIfDisposed(),ma(this,t,e)},yt.prototype.min=function(t,e){return this.throwIfDisposed(),ga(this,t,e)},yt.prototype.minimumStrict=function(t){return this.throwIfDisposed(),to(this,t)},yt.prototype.minimum=function(t){return this.throwIfDisposed(),ya(this,t)},yt.prototype.modStrict=function(t){return this.throwIfDisposed(),eo(this,t)},yt.prototype.mod=function(t){return this.throwIfDisposed(),ba(this,t)},yt.prototype.mulStrict=function(t){return this.throwIfDisposed(),no(this,t)},yt.prototype.mul=function(t){return this.throwIfDisposed(),Yn(this,t)},yt.prototype.neg=function(){return this.throwIfDisposed(),Zs(this)},yt.prototype.norm=function(t,e,n){return this.throwIfDisposed(),io(this,t,e,n)},yt.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),Yi(this,t)},yt.prototype.notEqual=function(t){return this.throwIfDisposed(),Ca(this,t)},yt.prototype.oneHot=function(t,e=1,n=0){return this.throwIfDisposed(),Ze(this,t,e,n)},yt.prototype.onesLike=function(){return this.throwIfDisposed(),ka(this)},yt.prototype.pad=function(t,e){return this.throwIfDisposed(),Ea(this,t,e)},yt.prototype.pool=function(t,e,n,r,s){return this.throwIfDisposed(),_a(this,t,e,n,r,s)},yt.prototype.powStrict=function(t){return this.throwIfDisposed(),ro(this,t)},yt.prototype.pow=function(t){return this.throwIfDisposed(),Fa(this,t)},yt.prototype.prelu=function(t){return this.throwIfDisposed(),Oa(this,t)},yt.prototype.prod=function(t,e){return this.throwIfDisposed(),Ma(this,t,e)},yt.prototype.reciprocal=function(){return this.throwIfDisposed(),ei(this)},yt.prototype.relu=function(){return this.throwIfDisposed(),ni(this)},yt.prototype.relu6=function(){return this.throwIfDisposed(),ri(this)},yt.prototype.reshapeAs=function(t){return this.throwIfDisposed(),Ye(this,t.shape)},yt.prototype.reshape=function(t){return this.throwIfDisposed(),Ye(this,t)},yt.prototype.resizeBilinear=function(t,e){return this.throwIfDisposed(),Yo(this,t,e)},yt.prototype.resizeNearestNeighbor=function(t,e){return this.throwIfDisposed(),Jo(this,t,e)},yt.prototype.reverse=function(t){return this.throwIfDisposed(),si(this,t)},yt.prototype.rfft=function(){return this.throwIfDisposed(),Ei(this)},yt.prototype.round=function(){return this.throwIfDisposed(),ui(this)},yt.prototype.rsqrt=function(){return this.throwIfDisposed(),ci(this)},yt.prototype.selu=function(){return this.throwIfDisposed(),hi(this)},yt.prototype.separableConv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),pi(this,t,e,n,r,s,a)},yt.prototype.sigmoid=function(){return this.throwIfDisposed(),Mr(this)},yt.prototype.sign=function(){return this.throwIfDisposed(),fi(this)},yt.prototype.sin=function(){return this.throwIfDisposed(),mi(this)},yt.prototype.sinh=function(){return this.throwIfDisposed(),gi(this)},yt.prototype.slice=function(t,e){return this.throwIfDisposed(),zr(this,t,e)},yt.prototype.softmax=function(t){return this.throwIfDisposed(),vi(this,t)},yt.prototype.softplus=function(){return this.throwIfDisposed(),Qs(this)},yt.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),Da(this,t,e)},yt.prototype.split=function(t,e){return this.throwIfDisposed(),Ii(this,t,e)},yt.prototype.sqrt=function(){return this.throwIfDisposed(),Ai(this)},yt.prototype.square=function(){return this.throwIfDisposed(),xa(this)},yt.prototype.squaredDifference=function(t){return this.throwIfDisposed(),Ti(this,t)},yt.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),so(this,t)},yt.prototype.squeeze=function(t){return this.throwIfDisposed(),$i(this,t)},yt.prototype.stack=function(t,e){this.throwIfDisposed();const n=t instanceof yt?[this,t]:[this,...t];return Ri(n,e)},yt.prototype.step=function(t){return this.throwIfDisposed(),Di(this,t)},yt.prototype.stridedSlice=function(t,e,n,r,s,a,i,o){return this.throwIfDisposed(),_i(this,t,e,n,r,s,a,i,o)},yt.prototype.subStrict=function(t){return this.throwIfDisposed(),ao(this,t)},yt.prototype.sub=function(t){return this.throwIfDisposed(),na(this,t)},yt.prototype.sum=function(t,e){return this.throwIfDisposed(),ra(this,t,e)},yt.prototype.tan=function(){return this.throwIfDisposed(),Fi(this)},yt.prototype.tanh=function(){return this.throwIfDisposed(),Lr(this)},yt.prototype.tile=function(t){return this.throwIfDisposed(),Is(this,t)},yt.prototype.toBool=function(){return this.throwIfDisposed(),De(this,"bool")},yt.prototype.toFloat=function(){return this.throwIfDisposed(),De(this,"float32")},yt.prototype.toInt=function(){return this.throwIfDisposed(),De(this,"int32")},yt.prototype.topk=function(t,e){return this.throwIfDisposed(),zi(this,t,e)},yt.prototype.transpose=function(t){return this.throwIfDisposed(),Qe(this,t)},yt.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),Bi(this,t,e)},yt.prototype.unstack=function(t){return this.throwIfDisposed(),Pi(this,t)},yt.prototype.where=function(t,e){return this.throwIfDisposed(),ys(t,this,e)},yt.prototype.zerosLike=function(){return this.throwIfDisposed(),bs(this)};class dc extends Error{constructor(t){super(t),Object.setPrototypeOf(this,dc.prototype)}}class fc extends Error{constructor(t){super(t),Object.setPrototypeOf(this,fc.prototype)}}class mc extends Error{constructor(t){super(t),Object.setPrototypeOf(this,mc.prototype)}}class gc extends Error{constructor(t){super(t),Object.setPrototypeOf(this,gc.prototype)}}class yc extends Error{constructor(t){super(t),Object.setPrototypeOf(this,yc.prototype)}}Error;function bc(t,e){if(Array.isArray(t)){let n=[];for(let r=0;r<e;r++)n=n.concat(t);return n}{const n=new Array(e);return n.fill(t),n}}function xc(t,e){if(!t)throw new yc(e)}function wc(t,e){let n=0;for(const r of t)r===e&&n++;return n}function vc(t){return 1===t.length?t[0]:t}function Nc(t){return Array.isArray(t)?t:[t]}function Cc(t){const e=t.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function Sc(t){return t.length<=1||-1===t.indexOf("_")?t:t.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}let kc={};function Ic(t){if(null==t)return null;const e={};return e.className=t.getClassName(),e.config=t.getConfig(),e}function Ec(t,e={},n={},r="object",s=!1){if("string"==typeof t){const s=t;let a;if(s in n)a=n[s];else if(s in kc)a=kc[s];else if(a=e[s],null==a)throw new mc(`Unknown ${r}: ${t}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=t;if(null==a.className||null==a.config)throw new mc(r+": Improper config format: "+JSON.stringify(a)+".\n'className' and 'config' must set.");const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in kc?[o,l]=kc.className:i in e&&([o,l]=e[i]),null==o)throw new mc(`Unknown ${r}: ${i}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const t={};for(const e of Object.keys(kc))t[e]=kc[e];for(const e of Object.keys(n))t[e]=n[e];a.config.customObjects=t;const e=Object.assign({},kc);for(const t of Object.keys(n))kc[t]=n[t];!function t(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach(e=>t(e));else{const n=Object.keys(e);for(const r of n){const n=e[r];null!=n&&"object"==typeof n&&(Array.isArray(n)||"ndarray"!==n.type||"number"!=typeof n.value?t(n):e[r]=n.value)}}}(a.config);const r=l(o,a.config,n,s);return kc=Object.assign({},e),r}{const t=Object.assign({},kc);for(const t of Object.keys(n))kc[t]=n[t];const e=new o(a.config);return kc=Object.assign({},t),e}}}function Ac(t,e){return-1*function(t,e){return t<e?-1:t>e?1:0}(t,e)}function Tc(t){if(null==t)return t;const e=[];for(const n of t)-1===e.indexOf(n)&&e.push(n);return e}function $c(t){if(null==t)throw new mc("Invalid value in obj: "+JSON.stringify(t));for(const e in t)if(t.hasOwnProperty(e))return!1;return!0}function Rc(t,e,n){if(null!=n&&t.indexOf(n)<0)throw new mc(`${n} is not a valid ${e}.  Valid values are ${t} or null/undefined.`)}function Dc(t,e,n=0,r=1/0){return xc(n>=0),xc(r>=n),Array.isArray(t)&&t.length>=n&&t.length<=r&&t.every(t=>typeof t===e)}function _c(t,e){Array.isArray(t)?(b(t.length>0,()=>e+" is unexpectedly an empty array."),t.forEach((t,n)=>_c(t,`element ${n+1} of ${e}`))):b(Number.isInteger(t)&&t>0,()=>`Expected ${e} to be a positive integer, but got `+function t(e){return null===e?"null":Array.isArray(e)?"["+e.map(e=>t(e)).join(",")+"]":"string"==typeof e?`"${e}"`:""+e}(t)+".")}function Fc(t){return"relu"===t?"relu":"linear"===t?"linear":"elu"===t?"elu":null}function Oc(t,e){return Wn(()=>Ai(ra(Yn(t,t),e,!0)))}class Mc extends Tn{getConfig(){return{}}}class zc extends Mc{constructor(t){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Wn(()=>{const e=Oc(t,this.axis),n=Kr(e,0,this.maxValue);return Yn(t,Xn(n,qn(pc(),e)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}zc.className="MaxNorm",Rn(zc);class Lc extends Mc{constructor(t){super(),this.defaultAxis=0,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Wn(()=>Xn(t,qn(pc(),Oc(t,this.axis))))}getConfig(){return{axis:this.axis}}}Lc.className="UnitNorm",Rn(Lc);class Bc extends Mc{apply(t){return ni(t)}}Bc.className="NonNeg",Rn(Bc);class Pc extends Mc{constructor(t){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=t.minValue?t.minValue:this.defaultMinValue,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.rate=null!=t.rate?t.rate:this.defaultRate,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Wn(()=>{const e=Oc(t,this.axis),n=qn(Yn(this.rate,Kr(e,this.minValue,this.maxValue)),Yn(1-this.rate,e));return Yn(t,Xn(n,qn(pc(),e)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}Pc.className="MinMaxNorm",Rn(Pc);const Wc={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Vc(t){return Ic(t)}function Uc(t,e={}){return Ec(t,$n.getMap().classNameMap,e,"constraint")}function Gc(t){if(null==t)return null;if("string"==typeof t){return Uc({className:t in Wc?Wc[t]:t,config:{}})}return t instanceof Mc?t:Uc(t)}var Hc=Object.freeze({__proto__:null,maxNorm:function(t){return new zc(t)},unitNorm:function(t){return new Lc(t)},nonNeg:function(){return new Bc},minMaxNorm:function(t){return new Pc(t)}});const jc=["channelsFirst","channelsLast"],qc=["valid","same","causal"],Kc=["max","avg"],Xc=["sum","mul","concat","ave"],Yc=new Map;function Jc(t){Rc(jc,"DataFormat",t)}function Zc(t){Rc(qc,"PaddingMode",t)}function Qc(t){Rc(Kc,"PoolMode",t)}const th=[];function eh(t,e){th.push(t);try{const t=e();return th.pop(),t}catch(t){throw th.pop(),t}}function nh(t){if(!ah(t))throw new Error("Not a valid tensor name: '"+t+"'");return(0===th.length?"":th.join("/")+"/")+t}function rh(t){if(!ah(t))throw new Error("Not a valid tensor name: '"+t+"'");Yc.has(t)||Yc.set(t,0);const e=Yc.get(t);if(Yc.set(t,Yc.get(t)+1),e>0){const n=`${t}_${e}`;return Yc.set(n,1),n}return t}const sh=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function ah(t){return!!t.match(sh)}function ih(t,e,n){null==e&&(e=0),null==n&&(n=t.length);let r=1;for(let s=e;s<n;++s)r*=t[s];return r}function oh(t){return Qa(t=Array.isArray(t)?new Float32Array(t):t)}function lh(t){return ga(oh(t)).dataSync()[0]}function uh(t){return ea(oh(t)).dataSync()[0]}function ch(t,e){if(e<t)throw new mc(`end (${e}) < begin (${t}) is forbidden.`);const n=[];for(let r=t;r<e;++r)n.push(r);return n}function hh(t,e){return t.asType(e)}function ph(t,e=-1){const n=t.shape.slice();return e<0&&(e=n.length+e+1),n.splice(e,0,1),t.reshape(n)}function dh(t,e,n){return Wn(()=>{switch(t.rank){case 1:return yi(t,e,n);case 2:return bi(t,[e,0],[n,t.shape[1]]);case 3:return xi(t,[e,0,0],[n,t.shape[1],t.shape[2]]);case 4:return wi(t,[e,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3]]);case 5:return zr(t,[e,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4]]);case 6:return zr(t,[e,0,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4],t.shape[5]]);default:throw new mc("sliceAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}})}function fh(t,e,n){return Wn(()=>{switch(t.rank){case 1:return yi(t,e,n);case 2:return bi(t,[0,e],[t.shape[0],n]);case 3:return xi(t,[0,0,e],[t.shape[0],t.shape[1],n]);case 4:return wi(t,[0,0,0,e],[t.shape[0],t.shape[1],t.shape[2],n]);default:throw new mc("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}})}function mh(t,e,n,r){return Wn(()=>{switch(t.rank){case 1:return yi(t,e,n);case 2:switch(r){case 1:return dh(t,e,n);case 2:return fh(t,e,n);default:throw new mc("The axis is not within the rank of the tensor "+r)}case 3:switch(r){case 1:return dh(t,e,n);case 2:return xi(t,[0,e,0],[t.shape[0],n,t.shape[2]]);case 3:return fh(t,e,n);default:throw new mc("The axis is not within the rank of the tensor "+r)}case 4:switch(r){case 1:return dh(t,e,n);case 2:return wi(t,[0,e,0,0],[t.shape[0],n,t.shape[2],t.shape[3]]);case 3:return wi(t,[0,0,e,0],[t.shape[0],t.shape[1],n,t.shape[3]]);case 4:return fh(t,e,n);default:throw new mc("The axis is not within the rank of the tensor "+r)}default:throw new mc("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}})}function gh(t,e=-1){let n;return e<0&&(n=t[0].rank,e=0!==n?n:0),e===t[0].rank&&(e=-1),Or(t,e)}function yh(t,e){switch(t.rank){case 1:return Xr([t,e]);case 2:return Yr([t,e],0);case 3:return Jr([t,e],0);case 4:return Zr([t,e],0);default:throw new mc("concatAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}}function bh(t,e){if(Array.isArray(e)||(e=[e]),t.rank!==e.length)throw new mc(`The length of input n (${e.length}) does not match the number of dimensions in input x (${t.rank})`);return Is(t,e)}function xh(t,e=0,n=1,r,s){return Ja(t,e,n,r,s)}function wh(t,e,n,r){if(t.rank<2||e.rank<2)throw new gc(`dot requires both inputs to be rank >= 2 but got x shape = ${t.shape} and y shape = ${e.shape}`);if(e.rank>=3){if(t.shape.slice(-1)[0]!==e.shape.slice(-2)[0])throw new gc(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${t.shape} and  y shape = `+e.shape)}if(2===t.rank&&2===e.rank){return ko({a:t,b:e,transposeA:!1,transposeB:!1,bias:r?Ch(t.rank,r,"channelsLast"):null,activation:n})}{const s=t.shape.slice(),a=s.pop();t=t.reshape([-1,a]);const i=e.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:e.rank},(t,n)=>0===n?e.rank-2:n<=e.rank-2?n-1:n);e=e.transpose(c).reshape([l,-1]);const h=[...s,...u];return ko({a:t,b:e,transposeA:!1,transposeB:!1,bias:r?Ch(t.rank,r,"channelsLast"):null,activation:n}).reshape(h)}}function vh(t,e,n){return Wn(()=>(e=Array.isArray(e)?Qa(e,"int32"):e.toInt(),_s(t,e,n)))}function Nh(t){return Yn(t,t)}function Ch(t,e,n){const r=e.shape;if(1!==e.rank&&e.rank!==t)throw new mc("Unexpected bias dimensions: "+e.rank+"; expected it to be 1 or "+t);if(5===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1,1,1]):e.reshape([1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,1,1,r[0]]):e.reshape([1].concat(r))}else if(4===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1,1]):e.reshape([1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,1,r[0]]):e.reshape([1].concat(r))}else if(3===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1]):e.reshape([1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,r[0]]):e.reshape([1].concat(r))}else if(t<3)return e;throw new mc("Unsupported input rank by biasAdd: "+e.rank)}function Sh(t,e,n){return Wn(()=>(null==n&&(n="channelsLast"),Jc(n),t.add(Ch(t.rank,e,n))))}function kh(t,e,n,r){return Wn(()=>ho(t,e,n,r))}function Ih(t,e,n=!1){return n?t():e()}const Eh=["fanIn","fanOut","fanAvg"],Ah=["normal","uniform","truncatedNormal"];class Th extends Tn{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class $h extends Th{apply(t,e){return da(t,e)}}$h.className="Zeros",Rn($h);class Rh extends Th{apply(t,e){return fa(t,e)}}Rh.className="Ones",Rn(Rh);class Dh extends Th{constructor(t){if(super(),"object"!=typeof t)throw new mc("Expected argument of type ConstantConfig but got "+t);if(void 0===t.value)throw new mc("config must have value set but got "+t);this.value=t.value}apply(t,e){return Wn(()=>Yn(Ws(this.value),fa(t,e)))}getConfig(){return{value:this.value}}}Dh.className="Constant",Rn(Dh);class _h extends Th{constructor(t){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=t.minval||this.DEFAULT_MINVAL,this.maxval=t.maxval||this.DEFAULT_MAXVAL,this.seed=t.seed}apply(t,e){return Za(t,this.minval,this.maxval,e)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}_h.className="RandomUniform",Rn(_h);class Fh extends Th{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new gc(`randomNormal does not support dType ${e}.`);return xh(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Fh.className="RandomNormal",Rn(Fh);class Oh extends Th{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new gc(`truncatedNormal does not support dType ${e}.`);return Li(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Oh.className="TruncatedNormal",Rn(Oh);class Mh extends Th{constructor(t){super(),this.gain=null!=t.gain?t.gain:1}apply(t,e){return Wn(()=>{if(2!==t.length||t[0]!==t[1])throw new mc("Identity matrix initializer can only be used for 2D square matrices.");return Yn(this.gain,Es(t[0]))})}getConfig(){return{gain:this.gain}}}Mh.className="Identity",Rn(Mh);class zh extends Th{constructor(t){if(super(),t.scale<0)throw new mc("scale must be a positive float. Got: "+t.scale);var e;this.scale=null==t.scale?1:t.scale,this.mode=null==t.mode?"fanIn":t.mode,e=this.mode,Rc(Eh,"FanMode",e),this.distribution=null==t.distribution?"normal":t.distribution,function(t){Rc(Ah,"Distribution",t)}(this.distribution),this.seed=t.seed}apply(t,e){const n=function(t,e="channelsLast"){let n,r;if(Jc(e),2===t.length)n=t[0],r=t[1];else if(-1!==[3,4,5].indexOf(t.length)){if("channelsFirst"===e){const e=ih(t,2);n=t[1]*e,r=t[0]*e}else if("channelsLast"===e){const e=ih(t,0,t.length-2);n=t[t.length-2]*e,r=t[t.length-1]*e}}else{const e=ih(t);n=Math.sqrt(e),r=Math.sqrt(e)}return[n,r]}(t),r=n[0],s=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,r):"fanOut"===this.mode?a/=Math.max(1,s):a/=Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(e=e||"float32")&&"int32"!==e)throw new gc(`${this.getClassName()} does not support dType ${e}.`);return Li(t,0,n,e,this.seed)}{const n=Math.sqrt(3*a);return Za(t,-n,n,e)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}zh.className="VarianceScaling",Rn(zh);class Lh extends zh{constructor(t){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return zh.className}}Lh.className="GlorotUniform",Rn(Lh);class Bh extends zh{constructor(t){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return zh.className}}Bh.className="GlorotNormal",Rn(Bh);class Ph extends zh{constructor(t){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return zh.className}}Ph.className="HeNormal",Rn(Ph);class Wh extends zh{constructor(t){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return zh.className}}Wh.className="HeUniform",Rn(Wh);class Vh extends zh{constructor(t){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return zh.className}}Vh.className="LeCunNormal",Rn(Vh);class Uh extends zh{constructor(t){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return zh.className}}Uh.className="LeCunNormal",Rn(Uh);class Gh extends Th{constructor(t){if(super(),this.DEFAULT_GAIN=1,this.gain=null==t.gain?this.DEFAULT_GAIN:t.gain,this.seed=t.seed,null!=this.seed)throw new gc("Random seed is not implemented for Orthogonal Initializer yet.")}apply(t,e){return Wn(()=>{if(t.length<2)throw new gc("Shape must be at least 2D.");t[0]*t[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0]*t[1]}) elements: Slowness may result.`);const e=xh(t[0]>t[1]?[t[1],t[0]]:t,0,1,"float32");let n=ml.gramSchmidt(e);return t[0]>t[1]&&(n=n.transpose()),Yn(this.gain,n)})}getConfig(){return{gain:this.gain,seed:this.seed}}}Gh.className="Orthogonal",Rn(Gh);const Hh={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function jh(t,e={}){return Ec(t,$n.getMap().classNameMap,e,"initializer")}function qh(t){return Ic(t)}function Kh(t){if("string"==typeof t){const e=t in Hh?Hh[t]:t;if("GlorotNormal"===e)return new Bh;if("GlorotUniform"===e)return new Lh;if("HeNormal"===e)return new Ph;if("HeUniform"===e)return new Wh;if("LeCunNormal"===e)return new Vh;if("LeCunUniform"===e)return new Uh;{const t={};return t.className=e,t.config={},jh(t)}}return t instanceof Th?t:jh(t)}var Xh=Object.freeze({__proto__:null,zeros:function(){return new $h},ones:function(){return new Rh},constant:function(t){return new Dh(t)},randomUniform:function(t){return new _h(t)},randomNormal:function(t){return new Fh(t)},truncatedNormal:function(t){return new Oh(t)},identity:function(t){return new Mh(t)},varianceScaling:function(t){return new zh(t)},glorotUniform:function(t){return new Lh(t)},glorotNormal:function(t){return new Bh(t)},heNormal:function(t){return new Ph(t)},heUniform:function(t){return new Wh(t)},leCunNormal:function(t){return new Vh(t)},leCunUniform:function(t){return new Uh(t)},orthogonal:function(t){return new Gh(t)}});let Yh=0;function Jh(){return Yh++}const Zh={};function Qh(t=""){return t in Zh||(Zh[t]=0),Zh[t]+=1,t+Zh[t].toString()}function tp(t){return Array.isArray(t)&&Array.isArray(t[0])}function ep(t){return 0===t.length?[]:Array.isArray(t[0])?t:[t]}function np(t){let e;if(Array.isArray(t)){if(1!==t.length)throw new mc("Expected Tensor length to be 1; got "+t.length);e=t[0]}else e=t;return e}function rp(t){if(Array.isArray(t)&&Array.isArray(t[0])){if(1===t.length)return(t=t)[0];throw new mc("Expected exactly 1 Shape; got "+t.length)}return t}function sp(t){let e=0;for(const n of t)0===n.shape.length?e+=1:e+=n.shape.reduce((t,e)=>t*e);return e}class ap{constructor(t,e="float32",n="Variable",r=!0,s=null){this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=Jh(),n=null==n?"Variable":n,this.originalName=nh(n),this.name=rh(this.originalName),this.trainable_=r,this.constraint=s,this.val=Wi(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function(t,e){if(t.shape.toString()!==e.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(t.shape)+" vs. "+JSON.stringify(e.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function ip(t){return t.map(t=>t.read())}function op(t){t.forEach(t=>{t[0].write(t[1])})}class lp{constructor(t){this.dtype=t.dtype,this.shape=t.shape,null!=t.shape?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class up{constructor(t,e,n,r,s,a,i){this.dtype=t,this.shape=e,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=i,this.id=Jh(),null!=a&&(this.originalName=nh(a),this.name=rh(this.originalName)),this.rank=e.length}}let cp=0;class hp{constructor(t,e){this.callArgs=e,this.id=cp++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const e of t.inboundLayers)null!=e&&e.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)null!=e?t.push(e.name):t.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let pp=0;class dp extends Tn{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=pp++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const t=this.getClassName();e=Cc(t)+"_"+Qh(t)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let e;if(null!=t.batchInputShape)e=t.batchInputShape;else if(null!=t.inputShape){let n=null;null!=t.batchSize&&(n=t.batchSize),e=[n].concat(t.inputShape)}this.batchInputShape=e;let n=t.dtype;null==n&&(n=t.inputDType),null==n&&(n="float32"),this.dtype=n}null!=t.weights?this.initialWeights=t.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new fc(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new mc(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return vc(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return vc(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new dc("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if(0===this.inboundNodes.length)throw new dc("Layer "+this.name+" is not connected, no input to return.");return vc(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new dc("Layer "+this.name+" has no inbound nodes.");if(this.inboundNodes.length>1)throw new dc("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return vc(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=Nc(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=Nc(this.inputSpec);if(t.length!==e.length)throw new mc(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: `+t);for(let n=0;n<t.length;n++){const r=t[n],s=e[n];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new mc(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new mc(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new mc(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new mc(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const t=r.shape;for(const e in s.axes){const r=Number(e),a=s.axes[e],i=r>=0?t[r]:t[t.length+r];if(null!=a&&-1===[a,null].indexOf(i))throw new mc(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${t}.`)}}if(null!=s.shape)for(let t=0;t<s.shape.length;++t){const e=s.shape[t],a=r.shape[t];if(null!=e&&null!=a&&e!==a)throw new mc(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const n=Nc(t);let r=!0;for(const t of n)if(!(t instanceof up)){r=!1;break}let s=!0;for(const t of n)if(t instanceof up){s=!1;break}if(r===s)throw new mc("Arguments to apply() must be all SymbolicTensors or all Tensors");return eh(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);const e=[];for(const n of Nc(t))e.push(n.shape);this.build(vc(e)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(t),s){let r=this.call(t,e);const s=Nc(r),a=[];for(let t of s)-1!==n.indexOf(t)&&(t=t.clone()),a.push(t);if(r=vc(a),null!=this.activityRegularizer)throw new gc("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(t){t=Nc(t);const e=[];for(const n of t)e.push(n.shape);return vc(e)}(t),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map((n,r)=>new up(a,n,this,Nc(t),e,this.name,r)):new up(a,r,this,Nc(t),e,this.name),this.addInboundNode(t,s,null,null,n,r,e),this._refCount++,null!=this.activityRegularizer)throw new gc("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}})}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn("The rank of the input tensor provided (shape: "+JSON.stringify(t)+") does not match that of the "+`batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer `+this.name);else{let e=!1;this.batchInputShape.forEach((n,r)=>{null!=n&&null!=t[r]&&t[r]!==n&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: `+JSON.stringify(this.batchInputShape))}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new dc(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const n=JSON.stringify(e.outputShapes);-1===t.indexOf(n)&&t.push(n)}if(1===t.length){const t=this.inboundNodes[0].outputShapes;return Array.isArray(t)&&Array.isArray(t[0])&&1===t.length?t[0]:t}throw new dc(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new fc(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return sp(this.weights)}build(t){this.built=!0}getWeights(t=!1){return ip(t?this.trainableWeights:this.weights)}setWeights(t){Wn(()=>{const e=this.weights;if(e.length!==t.length)throw new mc(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const n=[],r=ip(e);for(let s=0;s<r.length;++s){const a=r[s],i=e[s],o=t[s];if(!C(a.shape,o.shape))throw new mc(`Layer weight shape ${a.shape} not compatible with provided weight shape `+o.shape);n.push([i,o])}op(n)})}addWeight(t,e,n,r,s,a,i){if(-1!==this._addedWeightNames.indexOf(t))throw new mc(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=Kh("zeros"));const o=r.apply(e,n),l=new ap(o,n,t,a,i);return o.dispose(),null!=s&&this.addLoss(()=>s.apply(l.read())),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=Nc(t),void 0!==this._losses&&null!==this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach(t=>{if(null!=t)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return e}addInboundNode(t,e,n,r,s,a,i=null){const o=Nc(t);e=Nc(e),n=Nc(n),r=Nc(r),s=ep(s),a=ep(a);const l=[],u=[],c=[];for(const t of o)l.push(t.sourceLayer),u.push(t.nodeIndex),c.push(t.tensorIndex);new hp({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:e,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},i);for(let t=0;t<e.length;t++)e[t].sourceLayer=this,e[t].nodeIndex=this.inboundNodes.length-1,e[t].tensorIndex=t}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}class fp extends dp{constructor(t){if(super({dtype:t.dtype,name:null!=t.name?t.name:Qh("input").toString()}),null==t.batchSize&&(t.batchSize=null),null==t.sparse&&(t.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=t.sparse,null!=t.inputShape&&null!=t.batchInputShape)throw new mc("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let e=t.batchInputShape;if(null==e){if(null==t.inputShape)throw new mc("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");e=[t.batchSize].concat(t.inputShape)}else if(null!=t.batchSize)throw new mc("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=t.dtype||"float32";this.batchInputShape=e,this.dtype=n,this.inputSpec=[{shape:e}];const r=new up(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new hp({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[e],outputShapes:[e]})}apply(t,e){throw new mc("Cannot pass any input to an InputLayer's apply() method. InputLayer name: "+this.name)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function mp(t){if(null==t.batchShape&&null==t.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=t.batchShape&&null!=t.shape)throw new mc("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let e=t.batchShape;null!=t.shape&&null==e&&(e=[null].concat(t.shape));let n=t.dtype;return null==n&&(n="float32"),new fp({batchInputShape:e,name:t.name,dtype:n,sparse:t.sparse}).inboundNodes[0].outputTensors[0]}async function gp(t){if(null==t)return;const e=[],n=[],r=[];for(const s in t){const a=t[s];if("number"!=typeof a){const t=a;e.push(t.data()),n.push(s),r.push(t)}}if(e.length>0){const s=await Promise.all(e);for(let e=0;e<s.length;++e)t[n[e]]=s[e][0];Vn(r)}}function yp(t){if(null!=t)for(const e in t){const n=t[e];"number"!=typeof n&&n.dispose()}}var bp;fp.className="InputLayer",Rn(fp),function(t){t[t.SILENT=0]="SILENT",t[t.VERBOSE=1]="VERBOSE"}(bp||(bp={}));class xp{constructor(){this.validationData=null}setParams(t){this.params=t}async onEpochBegin(t,e){}async onEpochEnd(t,e){}async onBatchBegin(t,e){}async onBatchEnd(t,e){}async onTrainBegin(t){}async onTrainEnd(t){}setModel(t){}}class wp{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}async onEpochBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochBegin(t,e)}async onEpochEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochEnd(t,e)}async onBatchBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchBegin(t,e)}async onBatchEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchEnd(t,e)}async onTrainBegin(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainBegin(t)}async onTrainEnd(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainEnd(t)}}class vp extends xp{constructor(){super()}async onEpochBegin(t){this.seen=0,this.totals={}}async onBatchEnd(t,e){null==e&&(e={});const n=null==e.size?0:e.size;this.seen+=n;for(const t in e){const r=e[t];if("number"==typeof r)this.totals.hasOwnProperty(t)||(this.totals[t]=0),this.totals[t]=this.totals[t]+r*n;else{let e;t in this.totals?e=this.totals[t]:this.totals[t]=0;const s=Wn(()=>qn(this.totals[t],Yn(r,n)));this.totals[t]=s,null!=e&&e.dispose()}}}async onEpochEnd(t,e){if(null!=e)for(const t of this.params.metrics)null!=this.totals[t]&&("number"==typeof this.totals[t]?e[t]=this.totals[t]/this.seen:Wn(()=>{const n=Yn(Xn(1,this.seen),this.totals[t]);e[t]=n,this.totals[t].dispose(),Un(e[t])}))}}class Np extends xp{async onTrainBegin(t){this.epoch=[],this.history={}}async onEpochEnd(t,e){null==e&&(e={}),this.epoch.push(t);for(const t in e)null==this.history[t]&&(this.history[t]=[]),this.history[t].push(e[t])}async syncData(){const t=[],e=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)if("number"!=typeof s[a]){const i=s[a];t.push(i.data()),e.push(r),n.push(a)}}const r=await Promise.all(t);for(let t=0;t<r.length;++t){this.history[e[t]][n[t]].dispose(),this.history[e[t]][n[t]]=r[t][0]}}}class Cp extends xp{constructor(t,e){if(super(),this.currentEpoch=0,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");V(this.yieldEvery)&&(this.maybeWait=function(t,e){let n,r=Z();return(...s)=>{const a=Z();return a-r<e||(r=a,n=t(...s)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,e,n){const r=[];null!=this.yield&&(await gp(n),r.push(this.yield(t,e,n))),r.push(Al()),await Promise.all(r)}async onEpochBegin(t,e){this.currentEpoch=t,null!=this.epochBegin&&(await gp(e),await this.epochBegin(t,e))}async onEpochEnd(t,e){const n=[];null!=this.epochEnd&&(await gp(e),n.push(this.epochEnd(t,e))),"epoch"===this.yieldEvery&&n.push(Al()),await Promise.all(n)}async onBatchBegin(t,e){null!=this.batchBegin&&(await gp(e),await this.batchBegin(t,e))}async onBatchEnd(t,e){const n=[];null!=this.batchEnd&&(await gp(e),n.push(this.batchEnd(t,e))),"batch"===this.yieldEvery?n.push(Al()):V(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,t,e)),await Promise.all(n)}async onTrainBegin(t){null!=this.trainBegin&&(await gp(t),await this.trainBegin(t))}async onTrainEnd(t){null!=this.trainEnd&&(await gp(t),await this.trainEnd(t))}}function Sp(t,e){if(null==t&&(t={}),t instanceof xp)return[t];if(Array.isArray(t)&&t[0]instanceof xp)return t;return Nc(t).map(t=>new Cp(t,e))}class kp{constructor(){}static registerCallbackConstructor(t,e){b(t>=0&&Number.isInteger(t),()=>"Verbosity level is expected to be an integer >= 0, but got "+t),kp.checkForDuplicate(e),null==kp.constructors[t]&&(kp.constructors[t]=[]),kp.constructors[t].push(e)}static checkForDuplicate(t){for(const e in kp.constructors){kp.constructors[+e].forEach(e=>{if(e===t)throw new mc("Duplicate callback constructor.")})}}static clear(){kp.constructors={}}static createCallbacks(t){const e=[];for(const n in kp.constructors){const r=+n;t>=r&&e.push(...kp.constructors[r])}return e.map(t=>new t)}}function Ip(t,e,n,r,s,a,i,o,l){const u=new Np,c=[new vp,...kp.createCallbacks(e)];null!=t&&c.push(...t),c.push(u);const h=new wp(c);return h.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:i,verbose:e,doValidation:o,metrics:l}),{callbackList:h,history:u}}function Ep(t,e={},n=!1){return Ec(t,$n.getMap().classNameMap,e,"layer",n)}function Ap(t,e){return Wn(()=>{"float32"!==t.dtype&&(t=t.asType("float32"));const n=ra(Nh(t),e,!0),r=As(n.shape,pc()),s=Ai(Ps(n,r));return Xn(t,s)})}function Tp(t,e){return Wn(()=>ma(Nh(na(e,t)),-1))}function $p(t,e){return Wn(()=>ma(Jn(na(e,t)),-1))}function Rp(t,e){return Wn(()=>{const n=na(t,e),r=Kr(Jn(t),pc(),Number.MAX_VALUE),s=Jn(Xn(n,r));return Yn(100,ma(s,-1))})}function Dp(t,e){return Wn(()=>{const n=Kr(e,pc(),Number.MAX_VALUE),r=qs(qn(1,n)),s=Kr(t,pc(),Number.MAX_VALUE),a=qs(qn(1,s));return ma(Nh(na(r,a)),-1)})}function _p(t,e,n=!1){return Wn(()=>{if(n)e=vi(e);else{const t=ra(e,e.shape.length-1,!0);e=Xn(e,t)}return e=Kr(e,pc(),1-pc()),Zs(ra(Yn(t.toFloat(),qs(e)),e.shape.length-1))})}function Fp(t,e,n=!1){return Wn(()=>{const r=Ts(function(t){const e=[ih(t.shape)];return t.reshape(e)}(t)).toInt(),s=(e=Kr(e,pc(),1-pc())).shape;return _p(Ze(r,s[s.length-1]).reshape(s),e,n)})}function Op(t,e){return Wn(()=>{let n;return n=Kr(e,pc(),1-pc()),n=qs(Xn(n,na(1,n))),ma(function(t,e){if(!C(t.shape,e.shape))throw new mc(`logits and labels must have the same shape, but got shapes ${JSON.stringify(t.shape)} and ${JSON.stringify(e.shape)}`);return Wn(()=>{const n=e.relu(),r=e.abs().neg();return n.sub(e.mul(t)).add(r.exp().log1p())})}(t,n),-1)})}function Mp(t,e){return Wn(()=>{const n=Kr(t,pc(),1),r=Kr(e,pc(),1);return ra(Yn(t,qs(Xn(n,r))),-1)})}function zp(t,e){return Wn(()=>{const n=Ap(t,-1),r=Ap(e,-1),s=Yn(n,r);return Zs(ra(s,-1))})}kp.constructors={};const Lp={meanSquaredError:Tp,meanAbsoluteError:$p,meanAbsolutePercentageError:Rp,meanSquaredLogarithmicError:Dp,squaredHinge:function(t,e){return Wn(()=>{const n=Ps(0,na(1,Yn(t,e)));return ma(Nh(n),-1)})},hinge:function(t,e){return Wn(()=>{const n=Ps(0,na(1,Yn(t,e)));return ma(n,-1)})},categoricalHinge:function(t,e){return Wn(()=>{const n=ra(Yn(t,e),-1),r=ea(Yn(na(1,t),e),-1);return Ps(0,qn(1,na(r,n)))})},logcosh:function(t,e){return Wn(()=>{const n=Math.log(2),r=na(e,t),s=na(qn(r,Qs(Yn(-2,r))),n);return ma(s,-1)})},categoricalCrossentropy:_p,sparseCategoricalCrossentropy:Fp,binaryCrossentropy:Op,kullbackLeiblerDivergence:Mp,poisson:function(t,e){return Wn(()=>{const n=qs(qn(pc(),e));return ma(na(e,Yn(t,n)),-1)})},cosineProximity:zp};function Bp(t){if("string"==typeof t){if(t in Lp)return Lp[t];let e="Unknown loss "+t;throw t.toLowerCase().includes("softmaxcrossentropy")&&(e=`Unknown loss ${t}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new mc(e)}return t}function Pp(t,e){return Wn(()=>{const n=Yn(.5,ka(e)),r=hh(Fs(e,n),t.dtype);return ma(gs(t,r),-1)})}function Wp(t,e){return Wn(()=>hh(gs(hr(t,-1),hr(e,-1)),"float32"))}function Vp(t,e){return Wn(()=>ia(t.equal(1),e.equal(1)).sum().cast("float32"))}function Up(t,e){return Wn(()=>{const n=Vp(t,e),r=function(t,e){return Wn(()=>ia(t.equal(0),e.equal(1)).sum().cast("float32"))}(t,e),s=n.add(r);return ys(Fs(s,0),n.div(s),0).cast("float32")})}function Gp(t,e){return Wn(()=>{const n=Vp(t,e),r=function(t,e){return Wn(()=>ia(t.equal(1),e.equal(0)).sum().cast("float32"))}(t,e),s=n.add(r);return ys(Fs(s,0),n.div(s),0).cast("float32")})}function Hp(t,e){return Op(t,e)}function jp(t,e){return t.rank===e.rank&&(t=t.squeeze([t.rank-1])),(e=e.argMax(-1)).dtype!==t.dtype&&(e=e.asType(t.dtype)),gs(t,e).asType("float32")}const qp=_p,Kp=Fp,Xp={binaryAccuracy:Pp,categoricalAccuracy:Wp,precision:Up,categoricalCrossentropy:qp,sparseCategoricalCrossentropy:Kp,mse:Tp,MSE:Tp,mae:$p,MAE:$p,mape:Rp,MAPE:Rp,cosine:zp};function Yp(t){if("string"==typeof t&&t in Xp)return Xp[t];if("string"!=typeof t&&null!=t)return t;throw new mc("Unknown metric "+t)}function Jp(t){if(xc(null!==t,"Unknown LossOrMetricFn "+t),"string"==typeof t)return t;{let e;for(const n of Object.keys(Lp))if(Lp[n]===t){e=n;break}if(void 0!==e)return e;for(const n of Object.keys(Xp))if(Xp[n]===t){e=n;break}return void 0!==e?e:t.name}}function Zp(t,e,n=!1){if(null==t||"object"!=typeof t||Object.getPrototypeOf(t)!==Object.prototype||!function t(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const n=Object.keys(e);for(const r of n){if("string"!=typeof r)return!1;if(!t(e[r]))return!1}return!0}if(Array.isArray(e)){for(const n of e)if(!t(n))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}(t))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(t);n.length>1048576&&console.warn(`User-defined metadata of model "${e}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Qp(t,e,n,r=console.log){const s=function(t){let e=!0;const n=[],r=[];for(const e in t.nodesByDepth)n.push(t.nodesByDepth[e]);for(const t of n){if(t.length>1||1===t.length&&t[0].inboundLayers.length>1){e=!1;break}r.push(...t)}if(e)for(const n of t.layers){let t=!1;for(const s of n.inboundNodes)if(-1!==r.indexOf(s)){if(t){e=!1;break}t=!0}if(!e)break}return e}(t),a=["Layer (type)","Output shape","Param #"];let i;if(s?(e=e||65,n=n||[.45,.85,1]):(e=e||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map(t=>Math.floor(e*t))),!s){a.push("Receives inputs"),i=[];for(const e in t.nodesByDepth)i.push(...t.nodesByDepth[e])}r("_".repeat(e)),td(a,n,r),r("=".repeat(e));const o=t.layers;for(let t=0;t<o.length;++t)s?ed(o[t],n,r):nd(o[t],n,i,r),r((t===o.length-1?"=":"_").repeat(e));t.checkTrainableWeightsConsistency();const l=function(t){let e;e=null!=t.collectedTrainableWeights?sp(t.collectedTrainableWeights):sp(t.trainableWeights);return e}(t),u=sp(t.nonTrainableWeights);r("Total params: "+(l+u)),r("Trainable params: "+l),r("Non-trainable params: "+u),r("_".repeat(e))}function td(t,e,n=console.log){let r="";for(let n=0;n<t.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=t[n],r=r.slice(0,e[n]),r+=" ".repeat(e[n]-r.length);n(r)}function ed(t,e,n){let r;try{r=JSON.stringify(t.outputShape)}catch(t){r="multiple"}td([`${t.name} (${t.getClassName()})`,r,t.countParams().toString()],e,n)}function nd(t,e,n,r){let s;try{s=JSON.stringify(t.outputShape)}catch(t){s="multiple"}const a=[];for(const e of t.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(e)))for(let t=0;t<e.inboundLayers.length;++t){const n=e.inboundLayers[t].name,r=e.nodeIndices[t],s=e.tensorIndices[t];a.push(`${n}[${r}][${s}]`)}const i=t.name,o=t.getClassName(),l=0===a.length?"":a[0];td([`${i} (${o})`,s,t.countParams().toString(),l],e,r);for(let t=1;t<a.length;++t)td(["","","",a[t]],e,r)}function rd(t,e,n){return("inboundNodes"===t||"outputLayers"===t||"inputLayers"===t)&&0===e&&"string"==typeof n}function sd(t,e){if(null===t)return null;if("string"==typeof t)return Sc(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const n=[],r=t.length;for(let s=0;s<r;++s){const r=t[s];rd(e,s,r)?n.push(r):n.push(sd(r,e))}return n}{const e={};for(const n of Object.keys(t)){const r=t[n];if("name"===n&&"string"==typeof r)e[n]=r;else{const t=Sc(n);e[t]=sd(r,t)}}return e}}class ad{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof ad)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,n){if(null!=this.id2Value[t.id])throw new mc(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function(t,e){if(null==t.dtype||t.dtype===e.dtype)return e;try{return De(e,t.dtype)}catch(n){throw new mc(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${t.name}' (${t.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=n&&(this.id2Mask[t.id]=n),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof up){if(null==this.id2Value[t.id])throw new mc("Nonexistent key: "+t.name);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new mc("Feed dict has no SymbolicTensor name: "+t);return this.id2Value[e]}}getMask(t){if(t instanceof up){if(null==this.id2Value[t.id])throw new mc("Nonexistent key: "+t.name);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new mc("Feed dict has no SymbolicTensor name: "+t);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&Vn(this.id2Mask)}}const id={},od={};function ld(t,e,n,r){const s=null!=n&&n.training,a=Array.isArray(t),i=a?t:[t],o=i.map(t=>t.name),l=[],u=e.names();for(const t of o)-1!==u.indexOf(t)?l.push(e.getValue(t)):l.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const c=o.join(",")+"|"+e.names().join(",");let h,p;if(null==id[c]){const t=function(t,e){b(null!=t&&t.length>0,()=>"Expected at least one fetch, got none");let n=[],r={};if(1===t.length){const s=cd(t[0],e);n=s.sorted,r=s.recipientMap}else{const s=new Set;for(const a of t){const{sorted:t,recipientMap:i}=cd(a,e);for(const e of t)s.has(e.name)||(n.push(e),s.add(e.name));for(const t in i)null==r[t]&&(r[t]=new Set),i[t].forEach(e=>r[t].add(e))}}return{sorted:n,recipientCounts:ud(r)}}(i,e);h=t.sorted,p=t.recipientCounts,id[c]=h,od[c]=p}h=id[c],p={},s||Object.assign(p,od[c]);const d=new ad(e);for(let t=0;t<h.length;++t){if(null!=r){const t=Pn().numTensors;t>r.maxNumTensors&&(r.maxNumTensors=t),t<r.minNumTensors&&(r.minNumTensors=t)}const a=h[t],i=a.sourceLayer;if(i instanceof fp)continue;const u=[],c=[],f=[];let m=!1;for(const t of a.inputs){const n=d.getValue(t),r=d.getMask(t);u.push(n),c.push(r),null!=r&&(m=!0),s||(p[t.name]--,0!==p[t.name]||e.hasKey(t)||-1!==o.indexOf(t.name)||n.isDisposed||!0===t.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=Nc(i.apply(u,n));let y=null;i.supportsMasking&&(y=i.computeMask(u,c));const b=hd(a),x=Array.isArray(b)?b:[b];for(let t=0;t<x.length;++t){d.hasKey(x[t])||d.add(x[t],g[t],Array.isArray(y)?y[0]:y);const e=o.indexOf(x[t].name);-1!==e&&(l[e]=g[t])}s||Vn(f)}return d.disposeMasks(),a?l:l[0]}function ud(t){const e={};for(const n in t)e[n]=t[n].size;return e}function cd(t,e){const n=new Set,r=[],s={};for(const t of e.names())n.add(t);const a=[],i=[];for(a.push(t);a.length>0;){const t=a[a.length-1];if(n.has(t.name)){a.pop();continue}const e=i[i.length-1]===a.length-1;if(0===t.inputs.length||e)a.pop(),r.push(t),n.add(t.name),e&&i.pop();else{i.push(a.length-1);for(const e of t.inputs)null==s[e.name]&&(s[e.name]=new Set),s[e.name].add(t.name),n.has(e.name)||a.push(e)}}return{sorted:r,recipientMap:s}}function hd(t){let e;if(1===t.sourceLayer.inboundNodes.length)e=t.sourceLayer.output;else{let n=null;for(let e=0;e<t.sourceLayer.inboundNodes.length;++e)for(const r of t.sourceLayer.inboundNodes[e].outputTensors)if(r.id===t.id){n=e;break}e=t.sourceLayer.getOutputAt(n)}return e}class pd extends dp{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const t=this.getClassName().toLowerCase();this.name=Qh(t)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(t.inputs)?this.inputs=t.inputs.slice():this.inputs=[t.inputs],Array.isArray(t.outputs)?this.outputs=t.outputs.slice():this.outputs=[t.outputs],Tc(this.inputs).length!==this.inputs.length)throw new mc("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: "+this.inputs.map(t=>t.name));Tc(this.outputs).length!==this.outputs.length&&console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: "+this.outputs.map(t=>t.name)),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const t of this.outputs){const e=t.sourceLayer,n=t.nodeIndex,r=t.tensorIndex;this.outputLayers.push(e),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const t of this.inputs){const e=t.sourceLayer,n=t.nodeIndex,r=t.tensorIndex;xc(0===n,"input layer has >1 nodes"),xc(0===r,"input layer has >1 tensors"),this.inputLayers.push(e),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e];if(!(n instanceof fp))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${e} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const t of this.outputLayers)this.outputNames.push(t.name);this.internalInputShapes=this.inputs.map(t=>t.shape),this.internalOutputShapes=this.outputs.map(t=>t.shape);const e={},n={},r={},s={},a={},i=[],o=(t,e,n,r,s,l)=>{null!=r&&null!=s&&null!=l||(r=t.sourceLayer,s=t.nodeIndex,l=t.tensorIndex);const u=r.inboundNodes[s];if(-1!==n.indexOf(u))throw new fc(`The tensor ${t.name} at layer "${r.name}" is part of a cycle.`);if(-1!==e.indexOf(u))return;this.containerNodes.add(pd.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let t=0;t<c;t++){const r=u.inputTensors[t],s=u.inboundLayers[t],a=u.nodeIndices[t],i=u.tensorIndices[t];o(r,e,n,s,a,i)}for(e.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const t of this.outputs)o(t,l,u);const c=i.slice().reverse();for(const t of c){n[t.id]=t,t.id in e||(e[t.id]=0);let a=e[t.id];const i=null==r[t.outboundLayer.id]?0:r[t.outboundLayer.id];a=Math.max(a,i),r[t.outboundLayer.id]=a,s[t.outboundLayer.id]=t.outboundLayer,e[t.id]=a;for(let r=0;r<t.inboundLayers.length;r++){const s=t.inboundLayers[r],i=t.nodeIndices[r],o=s.inboundNodes[i],l=null==e[o.id]?0:e[o.id];e[o.id]=Math.max(a+1,l),n[o.id]=o}}const h={};for(const t in e){const r=e[t];r in h||(h[r]=[]),h[r].push(n[t])}const p={};for(const t in r){const e=r[t];e in p||(p[e]=[]),p[e].push(s[t])}let d=Object.keys(p).map(t=>parseInt(t,10)).sort(Ac);this.layers=[];for(const t of d){const e=p[t];e.sort((t,e)=>{const n=a[t.id],r=a[e.id];return n<r?-1:n>r?1:0});for(const t of e)t instanceof pd&&this.internalContainerRefs.push(t),this.layers.push(t)}this.layersByDepth=p,d=Object.keys(h).map(t=>parseInt(t,10)).sort(Ac);const f=this.inputs.slice(),m=[];for(const t of d)for(const e of h[t]){const t=e.outboundLayer;if(null!=t){for(const n of e.inputTensors)if(-1===f.indexOf(n))throw new fc("Graph disconnected: cannot obtain value for tensor "+n+` at layer "${t.name}". The following previous layers were accessed without issue: `+m);for(const t of e.outputTensors)f.push(t);m.push(t.name)}}this.nodesByDepth=h;const g=this.layers.map(t=>t.name);for(const t of g){const e=g.filter(e=>e===t).length;if(1!==e)throw new fc(`The name "${t}" is used ${e} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new hp({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(t=>null),outputMasks:this.outputs.map(t=>null),inputShapes:this.inputs.map(t=>t.shape),outputShapes:this.outputs.map(t=>t.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(e=>e.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new mc("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.layers)e.push(...t.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const n={};let r=0;for(const t of this.layers)for(const e of t.weights){if(null!=n[e.originalName])throw new mc("Duplicate weight name: "+e.originalName);n[e.originalName]=e,r++}const s=[];for(const r in t){let a=r;if(null==n[r]){const t=r.split("/");a=t.slice(0,-2).concat([t[t.length-1]]).join("/")}if(null!=n[a])s.push([n[a],t[r]]);else if(e)throw new mc("Provided weight data has no target variable: "+r);delete n[a]}if(e){const t=[];for(const e in n)t.push(e);if(t.length>0)throw new mc(`${t.length} of ${r} weights are not set: `+t)}op(s)}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers 2.4.0",e.backend="TensorFlow.js",e}toJSON(t,e=!0){const n=function t(e,n){if(null==e)return null;if("string"==typeof e)return Cc(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const r=[],s=e.length;for(let a=0;a<s;++a){const s=e[a];rd(n,a,s)?r.push(s):r.push(t(s,n))}return r}{const n={};for(const r of Object.keys(e)){const s=e[r],a=Cc(r);n[a]="name"!==r&&"className"!==r||"string"!=typeof s?t(s,r):s}return n}}(this.updatedConfig());return e?JSON.stringify(n):n}call(t,e){return Wn(()=>{t=Nc(t);const n=new ad;for(let e=0;e<this.inputs.length;++e)n.add(this.inputs[e],t[e]);return ld(this.outputs,n,e)})}computeMask(t,e){return Wn(()=>{let n;return t=Nc(t),n=null==e?bc(null,t.length):Nc(e),this.runInternalGraph(t,n)[1]})}computeOutputShape(t){const e=ep(t);if(e.length!==this.inputLayers.length)throw new mc(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let t=0;t<e.length;t++){const r=this.inputLayers[t],s=e[t];n[r.name+"_0_0"]=s}const r=Object.keys(this.nodesByDepth).map(t=>parseInt(t,10)).sort(Ac);if(r.length>1)for(const t of r){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer;if(-1!==this.inputLayers.map(t=>t.id).indexOf(e.id))continue;const r=[];for(let e=0;e<t.inboundLayers.length;e++){const s=t.inboundLayers[e],a=t.nodeIndices[e],i=t.tensorIndices[e],o=n[`${s.name}_${a}_${i}`];r.push(o)}const s=ep(e.computeOutputShape(vc(r))),a=e.inboundNodes.indexOf(t);for(let t=0;t<s.length;t++){n[`${e.name}_${a}_${t}`]=s[t]}}}const s=[],a=[];for(let t=0;t<this.outputLayers.length;t++){const e=this.outputLayers[t],n=this.outputLayersNodeIndices[t],r=this.outputLayersTensorIndices[t],s=`${e.name}_${n}_${r}`;a.push(s)}for(let t=0;t<a.length;t++){const e=a[t];xc(e in n),s.push(n[e])}return vc(s)}runInternalGraph(t,e){null==e&&(e=bc(null,t.length));const n={};for(let r=0;r<this.inputs.length;++r){const s=this.inputs[r],a=t[r],i=e[r];n[s.id]=[a,i]}const r=Object.keys(this.nodesByDepth).map(t=>parseInt(t,10)).sort(Ac);for(const t of r){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer,r=t.inputTensors,s=t.outputTensors,a=new Array;for(const t of r)t.id in n&&a.push(n[t.id]);if(a.length===r.length){let r,i,o,l,u={};if(null!=t.callArgs&&(u=t.callArgs),1===a.length){const[t,n]=a[0];null==u.mask&&(u.mask=n),o=Nc(e.call(t,u)),l=Nc(e.computeMask(t,n)),r=[t],i=[n]}else r=a.map(t=>t[0]),i=a.map(t=>t[1]),null==u.mask&&(u.mask=i),o=Nc(e.call(r,u)),l=Nc(e.computeMask(r,i));if(e.activityRegularizer)throw new gc("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let t=0;t<s.length;++t){const e=s[t],r=o[t],a=l[t];n[e.id]=[r,a]}}}}const s=[],a=[],i=[];for(const t of this.outputs){xc(t.id in n,`Could not compute output ${t.name} : ${t.id}`);const[e,r]=n[t.id];i.push(e.shape),s.push(e),a.push(r)}return[s,a,i]}buildNodeConversionMap(t){const e={};let n;for(const t of this.layers){n=t instanceof pd?1:0;for(let r=0;r<t.inboundNodes.length;r++){const s=pd.nodeKey(t,r);this.containerNodes.has(s)&&(e[s]=n,n+=1)}}return e}getLayer(t,e){if(null!=e){if(this.layers.length<=e)throw new mc(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}if(null==t)throw new mc("Provide either a layer name or layer index");for(const e of this.layers)if(e.name===t)return e;throw new mc("No such layer: "+t)}calculateLosses(){return Wn(()=>{const t=[];for(const e of this.layers)for(let n=0;n<e.inboundNodes.length;++n){const r=pd.nodeKey(e,n);this.containerNodes.has(r)&&t.push(...e.calculateLosses())}return t})}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),n=[];for(const t of this.layers){const r=t.getClassName(),s=t.getConfig(),a=[];for(let n=0;n<t.inboundNodes.length;n++){const r=t.inboundNodes[n],s=pd.nodeKey(t,n);let i={};if(this.containerNodes.has(s)){if(r.callArgs)try{JSON.stringify(r.callArgs),i=r.callArgs}catch(e){console.warn(`Layer ${t.name} was passed non-serializable keyword arguments: `+r.callArgs+". They will not be included in the serialized model (and thus will be missing at deserialization time)."),i={}}if(r.inboundLayers.length>0){const t=[];for(let n=0;n<r.inboundLayers.length;n++){const s=r.inboundLayers[n],a=r.nodeIndices[n],o=r.tensorIndices[n];let l=e[pd.nodeKey(s,a)];null==l&&(l=0),t.push([s.name,l,o,i])}a.push(t)}}}const i={};i.name=t.name,i.className=r,i.config=s,i.inboundNodes=a,n.push(i)}t.layers=n;const r=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t],s=this.inputLayersNodeIndices[t],a=pd.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=e[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[t];r.push([n.name,i,o])}t.inputLayers=r;const s=[];for(let t=0;t<this.outputLayers.length;t++){const n=this.outputLayers[t],r=this.outputLayersNodeIndices[t],a=pd.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=e[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[t];s.push([n.name,i,o])}return t.outputLayers=s,t}static fromConfig(t,e,n={},r=!1){const s={},a={};function i(t,e){t.name in a?a[t.name].push(e):a[t.name]=[e]}function o(t,e){const n=[];let r;for(const a of e){const o=a[0],l=a[1],u=a[2];if(r=null==a[3]?{}:a[3],!(o in s))return void i(t,e);const c=s[o];if(c.inboundNodes.length<=l)return void i(t,e);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&t.apply(vc(n),r)}function l(t){const n=t.name,a=Ep(t,null!=e.customObjects?e.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a,t.inboundNodes.forEach(t=>{if(!(t instanceof Array))throw new mc("Corrupted configuration, expected array for nodeData: "+t);i(a,t)})}const u=e.name,c=e.layers;for(const t of c)l(t);for(;!$c(a);)for(const t of c){const e=s[t.name];if(e.name in a){const t=a[e.name];delete a[e.name];for(const n of t)o(e,n)}}const h=[],p=[],d=e.inputLayers;for(const t of d){const e=t[0],n=t[1],r=t[2];xc(e in s);const a=s[e].inboundNodes[n].outputTensors;h.push(a[r])}const f=e.outputLayers;for(const t of f){const e=t[0],n=t[1],r=t[2];xc(e in s);const a=s[e].inboundNodes[n].outputTensors;p.push(a[r])}return new t({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new mc("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){Wn(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}}function dd(t,e,n){const r=e.length;if(null==t||Array.isArray(t)&&0===t.length)return e.map(t=>null);if(1===r)return Array.isArray(t)&&1===t.length?t:"object"==typeof t&&e[0]in t?[t[e[0]]]:[t];if(Array.isArray(t)){if(t.length!==r)throw new Error(`Provided ${n} is an array of ${t.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return t}if("object"==typeof t&&Object.keys(t).length>0&&"object"==typeof t[Object.keys(t)[0]]){const n=[];return e.forEach(e=>{e in t?n.push(t[e]):n.push(null)}),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${e} keys. Provided ${n} not understood: ${JSON.stringify(t)}`)}function fd(t,e){return dd(t,e,"classWeight")}async function md(t,e,n,r){if(null!=e||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const e=Wn(()=>{if(1===t.shape.length)return t.clone();if(2===t.shape.length){if(t.shape[1]>1){const e=1;return t.argMax(e)}if(1===t.shape[1])return t.reshape([t.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${t.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${t.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),r=Array.from(await e.data());Vn(e);const s=[];return r.forEach(t=>{if(null==n[t])throw new Error(`classWeight must contain all classes in the training data. The class ${t} exists in the data but not in classWeight`);s.push(n[t])}),Qa(s,"float32")}return null}function gd(t,e){return Yn(t,e)}function yd(t,e){let n,r;const s=e;n=s.xs,r=s.ys,b(null!=n&&null!=r,()=>"A Dataset iterator for fitDataset() is expected to generate objects of the form `{xs: xVal, ys: yVal}`, where the two values may be `tf.Tensor`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates "+e);const a=bd("input",t.inputNames,n),i=bd("output",t.outputNames,r),o=a[0].shape[0];b(a.length===t.inputs.length,()=>`LayersModel has ${t.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: `+JSON.stringify(t.inputNames)+")"),b(i.length===t.outputs.length,()=>`LayersModel has ${t.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: `+JSON.stringify(t.outputNames)+")");for(let e=0;e<a.length;e++)b(a[e].shape[0]===o,()=>`Batch size mismatch: input ${t.inputNames[e]} has ${a[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`);for(let e=0;e<i.length;e++)b(i[e].shape[0]===o,()=>`Batch size mismatch: output ${t.outputNames[e]} has ${i[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`);return{xs:a,ys:i}}function bd(t,e,n){if(n instanceof yt)return[n];if(Array.isArray(n))return b(n.length===e.length,()=>`Received an array of ${n.length} Tensors, but expected ${e.length} to match the ${t} keys ${e}.`),n;{const r=[];for(const s of e){if(null==n[s])throw new mc(`The feature data generated by the dataset lacks the required ${t} key '${s}'.`);r.push(n[s])}return r}}async function xd(t,e,n){const r=null!=n.batchesPerEpoch;if(b(null!=t.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),b(null!=n,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),b(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),()=>"For fitDataset(), config.epochs is expected to be a positive integer, but got "+n.epochs),b(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),()=>"For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got "+n.batchesPerEpoch),b(null==n.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");t.isTraining=!0;try{const s=null!=n.validationData;let a,i;if(s)if(wd(n.validationData))b(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),()=>"For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got "+n.validationBatches);else{const t=function(t){if(3===t.length)throw new gc("Validation with sample weights is not implemented yet.");return{xs:t[0],ys:t[1]}}(n.validationData);a=t.xs,i=t.ys}const o=t.makeTrainFunction(),l=t.getDedupedMetricsNames();let u;u=s?l.slice().concat(l.map(t=>"val_"+t)):l.slice();const c=Sp(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:p,history:d}=Ip(c,h,n.epochs,null,null,function(t,e){let n=null;null!=e.batchesPerEpoch?n=e.batchesPerEpoch:Number.isFinite(t.size)&&(n=t.size);return n}(e,n),null,s,u);p.setModel(t),t.history=d,await p.onTrainBegin(),t.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await e.iterator();for(;f<n.epochs;){const u={};await p.onEpochBegin(f);let c=0,h=0;for(r||(m=await e.iterator());!r||c<n.batchesPerEpoch;){const e=await m.next();if(r&&e.done){console.warn("You provided `batchesPerEpoch` as "+n.batchesPerEpoch+", but your dataset iterator ran out of data after "+c+" batches; interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, "+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=e.value){const{xs:r,ys:s}=yd(t,e.value),a={};a.batch=h,a.size=r[0].shape[0],await p.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const e=fd(n.classWeight,t.outputNames);for(let t=0;t<e.length;++t)i.push(await md(s[t],null,e[t]))}const u=r.concat(s).concat(i),d=o(u);Vn(u);for(let t=0;t<l.length;++t){const e=l[t],n=d[t];a[e]=n,Un(n)}await p.onBatchEnd(h,a),yp(a),h++,c++}if(r?c>=n.batchesPerEpoch:e.done){if(s){let e;e=wd(n.validationData)?Nc(await t.evaluateDataset(n.validationData,{batches:n.validationBatches})):Nc(t.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<t.metricsNames.length;++n)u["val_"+t.metricsNames[n]]=e[n]}break}if(t.stopTraining_)break}if(await p.onEpochEnd(f,u),f++,t.stopTraining_)break}return await p.onTrainEnd(),await t.history.syncData(),t.history}finally{t.isTraining=!1}}function wd(t){return"function"==typeof t.iterator}function vd(t){b(t>0&&Number.isInteger(t),()=>"batchSize is required to be a positive integer, but got "+t)}function Nd(t,e,n){return null==t?[null]:Array.isArray(t)?t.map(t=>dh(t,e,n-e)):dh(t,e,n-e)}function Cd(t,e){return Wn(()=>null==t?null:Array.isArray(t)?t.map(t=>Cd(t,e)):vh(t,"int32"===e.dtype?e:e.toInt()))}function Sd(t,e){const n=[];let r=0,s=null;for(;r<t;)s=r+e,s>=t&&(s=t),n.push([r,s]),r=s;return n}async function kd(t,e,n,r={}){if(t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,a,i,o,l,u,c;t.isTraining=!0;try{const h=null==r.batchSize?32:r.batchSize;vd(h);const p=!1,d=await t.standardizeUserData(e,n,r.sampleWeight,r.classWeight,p,h);s=d[0],a=d[1],c=d[2];let m,g=!1;if(null!=r.validationData&&r.validationData.length>0){if(g=!0,2!==r.validationData.length)throw 3===r.validationData.length?new gc("validationData including sample weights is not supported yet."):new mc("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; "+r.validationData+" is invalid.");i=r.validationData[0],o=r.validationData[1];const e=!0,n=await t.standardizeUserData(i,o,null,null,e,h);l=n[0],u=n[1],m=l.concat(u)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){g=!0;const t=Math.floor(s[0].shape[0]*(1-r.validationSplit)),e=s[0].shape[0];l=Nd(s,t,e),s=Nd(s,0,t),u=Nd(a,t,e),a=Nd(a,0,t),m=l.concat(u)}else null!=r.validationSteps&&(g=!0);const y=s.concat(a).concat(c);t.checkTrainableWeightsConsistency();const b=t.makeTrainFunction(),x=t.getDedupedMetricsNames();let w,v;g?(t.makeTestFunction(),w=t.testFunction,v=x.slice().concat(x.map(t=>"val_"+t))):(w=null,m=[],v=x.slice());const N=Sp(r.callbacks,r.yieldEvery);return await async function(t,e,n,r,s,a,i,o,l,u,c,h,p,d,m){null==s&&(s=32),null==a&&(a=1),null==c&&(c=!0),null==p&&(p=0);let g=!1;if(null!=l&&null!=u&&(g=!0),null!=m&&(g=!0,null==d))throw new mc("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const y=t.checkNumSamples(n,s,d,"steps_per_epoch");let b;null!=y&&(b=ch(0,y)),null==i&&(i=1);const{callbackList:x,history:w}=Ip(o,i,a,p,y,d,s,g,h);x.setModel(t),t.history=w,await x.onTrainBegin(),t.stopTraining_=!1;for(let i=p;i<a;++i){await x.onEpochBegin(i);const a={};if(null!=d)throw new gc("stepsPerEpoch mode is not implemented yet.");{if("batch"===c)throw new gc("batch shuffling is not implemneted yet");c&&f(b);const i=Qa(b),o=Sd(y,s);for(let c=0;c<o.length;++c){const h={};if(await x.onBatchBegin(c,h),Wn(()=>{const p=o[c][0],d=o[c][1],f=dh(i,p,d-p);h.batch=c,h.size=d-p;const m=Cd(n,f),y=e(m);for(let t=0;t<r.length;++t){const e=r[t],n=y[t];h[e]=n,Un(n)}if(c===o.length-1&&g){const e=t.testLoop(l,u,s);for(let t=0;t<r.length;++t){const n=r[t],s=e[t];Un(s),a["val_"+n]=s}}}),await x.onBatchEnd(c,h),yp(h),t.stopTraining_)break}i.dispose()}if(await x.onEpochEnd(i,a),t.stopTraining_)break}return await x.onTrainEnd(),await t.history.syncData(),t.history}(t,b,y,x,h,r.epochs,r.verbose,N,w,m,r.shuffle,v,r.initialEpoch,null,null)}finally{t.isTraining=!1,Ed(s,e),Ed(a,n),Ed(l,i),Ed(u,o),null!=c&&Vn(c)}}function Id(t){const e=[];t instanceof yt&&(t=[t]);for(let n=0;n<t.length;++n){const r=t[n];if(1===r.rank)e.push(ph(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");e.push(r)}}return e}function Ed(t,e){if(null==t)return;const n=[];if(e instanceof yt)n.push(e.id);else if(Array.isArray(e))e.forEach(t=>n.push(t.id));else if(null!=e)for(const t in e){const r=e[t];n.push(r.id)}const r=[];if(t instanceof yt)-1===n.indexOf(t.id)&&r.push(t);else if(Array.isArray(t))t.forEach(t=>{-1===n.indexOf(t.id)&&r.push(t)});else if(null!=t)for(const e in t){const s=t[e];-1===n.indexOf(s.id)&&r.push(s)}r.forEach(t=>{t.isDisposed||t.dispose()})}function Ad(t){return Array.isArray(t)}function Td(t){return!function(t){return t instanceof yt}(t)&&!Ad(t)}function $d(t,e,n,r=!0,s=""){if(null==e||0===e.length){if(null!=t){let e=!1;if(Ad(t)&&t.length>0)e=!0;else if(Td(t)){for(const n in t)if(t.hasOwnProperty(n)){e=!0;break}}else e=!0;if(e)throw new mc(`Error when checking model ${s} expected no data, but got `+t)}return[]}if(null==t)return e.map(t=>null);let a;if(Td(t)){t=t,a=[];for(const n of e){if(null==t[n])throw new mc(`No data provided for "${n}". Need data for each key in: `+e);a.push(t[n])}}else if(Ad(t)){if((t=t).length!==e.length)throw new mc(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): `+t);a=t}else{if(t=t,e.length>1)throw new mc(`The model ${s} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape `+t.shape);a=[t]}if(a=Id(a),null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const i=a[t];if(i.shape.length!==n[t].length)throw new mc(`Error when checking ${s}: expected ${e[t]} to have ${n[t].length} dimension(s). but got array with shape `+i.shape);for(let a=0;a<n[t].length;++a){if(0===a&&!r)continue;const o=i.shape[a],l=n[t][a];if(null!=l&&l>=0&&o!==l)throw new mc(`Error when checking ${s}: expected ${e[t]} to have shape [${n[t]}], but got array with shape [${i.shape}].`)}}return a}function Rd(t,e,n,r=!0,s=""){let a;if(Array.isArray(t)){if(t.length!==e.length)throw new mc(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${t.length} Tensors(s).`);a=t}else{if(e.length>1)throw new mc(`The model expects ${e.length} ${s} Tensors, but only received one Tensor. Found: array with shape `+JSON.stringify(t.shape)+".");a=[t]}if(null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const i=a[t];if(i.shape.length!==n[t].length)throw new mc(`Error when checking ${s}: expected ${e[t]} to have ${n[t].length} dimension(s), but got array with shape `+JSON.stringify(i.shape));for(let a=0;a<n[t].length;++a){if(0===a&&!r)continue;const o=i.shape[a],l=n[t][a];if(null!=l&&l!==o)throw new mc(`Error when checking ${s}: expected ${e[t]} to have shape ${JSON.stringify(n[t])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class Dd extends pd{constructor(t){super(t),this.isTraining=!1}summary(t,e,n=console.log){if(!this.built)throw new mc("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");Qp(this,t,e,n)}compile(t){if(null==t.loss&&(t.loss=[]),this.loss=t.loss,"string"==typeof t.optimizer)this.optimizer_=function(t){const e={Adagrad:()=>Il.adagrad(.01),Adadelta:()=>Il.adadelta(1,.95,pc()),Adam:()=>Il.adam(.001,.9,.999,pc()),Adamax:()=>Il.adamax(.002,.9,.999,pc(),0),RMSProp:()=>Il.rmsprop(.001,.9,0,pc()),SGD:()=>Il.sgd(.01)};if(e.adagrad=e.Adagrad,e.adadelta=e.Adadelta,e.adam=e.Adam,e.adamax=e.Adamax,e.rmsprop=e.RMSProp,e.sgd=e.SGD,t in e)return e[t]();throw new mc("Unknown Optimizer "+t)}(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof yl))throw new mc("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let e=[];if(Array.isArray(t.loss)||"string"==typeof t.loss||"function"==typeof t.loss)if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new mc(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);const n=t.loss;e=n.map(t=>Bp(t))}else{const n=Bp(t.loss);this.outputs.forEach(t=>{e.push(n)})}else{t.loss=t.loss;for(const e in t.loss)if(-1===this.outputNames.indexOf(e))throw new mc(`Unknown entry in loss dictionary: "${e}". Only expected the following keys: `+this.outputNames);for(const n of this.outputNames)null==t.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),e.push(Bp(t.loss[n]))}this.lossFunctions=e,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let t=0;t<this.outputs.length;++t){const e=this.internalOutputShapes[t],n=this.outputNames[t];this.feedOutputNames.push(n),this.feedOutputShapes.push(e),this.feedLossFns.push(this.lossFunctions[t])}const n=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],eh("loss",()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;const e=this.lossFunctions[t];this.outputs.length>1&&(this.metricsTensors.push([e,t]),this.metricsNames.push(this.outputNames[t]+"_loss"))}});const r=function(t,e){if(null==t||Array.isArray(t)&&0===t.length)return e.map(t=>[]);let n;if("string"==typeof t||"function"==typeof t)n=[t];else{if(!Array.isArray(t)&&"object"!=typeof t)throw new TypeError("Type of metrics argument not understood. Expected an string,function, Array, or Object, found: "+t);n=t}if(Array.isArray(n))return e.map(t=>n);{const t=[];for(const r of e){let e=n.hasOwnProperty(r)?n[r]:[];Array.isArray(e)||(e=[e]),t.push(e)}return t}}(t.metrics,this.outputNames),s=(t,e,n)=>{this.outputNames.length>1&&(e=this.outputNames[t]+"_"+e),this.metricsNames.push(e),this.metricsTensors.push([n,t])};eh("metric",()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;(e=>{let n,r,a;for(const i of e){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const e=this.internalOutputShapes[t];let s;1===e[e.length-1]||this.lossFunctions[t]===Op?-1!==["accuracy","acc"].indexOf(i)?r=Pp:-1!==["crossentropy","ce"].indexOf(i)&&(r=Hp):this.lossFunctions[t]===Fp?-1!==["accuracy","acc"].indexOf(i)?r=jp:-1!==["crossentropy","ce"].indexOf(i)&&(r=Kp):-1!==["accuracy","acc"].indexOf(i)?r=Wp:-1!==["crossentropy","ce"].indexOf(i)&&(r=qp),-1!==["accuracy","acc"].indexOf(i)?s="acc":-1!==["crossentropy","ce"].indexOf(i)&&(s="ce"),a=r,n=""+s}else{const t=Yp(i);a=t,n=""+Jp(i)}let e;eh(n,()=>{e=a}),s(t,n,e)}})(r[t])}}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(t,e,n={}){const r=null==n.batchSize?32:n.batchSize;vd(r);const s=this.standardizeUserDataXY(t,e,!0,r);try{const a=s[0].concat(s[1]);this.makeTestFunction();const i=this.testFunction;return vc(this.testLoop(i,a,r,n.verbose,n.steps))}finally{Ed(s[0],t),Ed(s[1],e)}}async evaluateDataset(t,e){return this.makeTestFunction(),async function(t,e,n){const r=null!=(n=n||{}).batches,s=t.testFunction;let a=[];if(n.verbose>0)throw new gc("Verbose mode is not implemented yet.");b(!r||n.batches>0&&Number.isInteger(n.batches),()=>"Test loop expects `batches` to be a positive integer, but received "+JSON.stringify(n.batches));const i="function"==typeof e.next?e:await e.iterator();let o=0,l=0;for(;!r||l<n.batches;){const e=await i.next();if(a=Wn(()=>{if(e.value){const{xs:n,ys:r}=yd(t,e.value),i=n.concat(r),u=Wn(()=>s(i));if(Vn(i),0===l)for(let t=0;t<u.length;++t)a.push(Ws(0));const c=i[0].shape[0];for(let t=0;t<u.length;++t){const e=u[t],n=a[t];a[t]=Wn(()=>qn(a[t],Yn(c,e))),l>0&&Vn(n)}Vn(u),o+=c,++l}return a}),e.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let t=0;t<a.length;++t){const e=a[t];a[t]=Xn(a[t],o),Vn(e)}return vc(a)}(this,t,e)}checkNumSamples(t,e,n,r="steps"){let s;if(null!=n){if(s=null,null!=e)throw new mc(`If ${r} is set, batchSize must be null or undefined.Got batchSize = `+e)}else{if(null==t)throw new mc("Either the input data should have a defined shape, or "+r+" shoud be specified.");s=Array.isArray(t)?t[0].shape[0]:t.shape[0]}return s}execute(t,e){if(Array.isArray(e)&&0===e.length)throw new mc("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(e),r=n?e:[e],s=this.retrieveSymbolicTensors(r),a=new ad;if(t instanceof yt&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new mc(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let e=0;e<this.inputs.length;++e)a.add(this.inputs[e],t[e])}else for(const e of this.inputs){const n=t[e.name];if(null==n)throw new mc("No value is provided for the model's input "+e.name);a.add(e,n)}const i=ld(s,a);return n?i:i[0]}retrieveSymbolicTensors(t){const e=bc(null,t.length);let n=t.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map(t=>t.name);for(let r=0;r<t.length;++r){const i=a.indexOf(t[r]);if(-1!==i&&(e[r]=s[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw e.forEach((e,r)=>{null==e&&n.push(t[r])}),new mc("Cannot find SymbolicTensors for output name(s): "+JSON.stringify(n))}return e}predictLoop(t,e=32,n=!1){return Wn(()=>{const r=this.checkNumSamples(t);if(n)throw new gc("Verbose predictLoop() is not implemented yet.");const s=Sd(r,e),a=this.outputs.map(t=>[]);for(let e=0;e<s.length;++e){Wn(()=>{const n=s[e][0],r=s[e][1],a=Nd(t,n,r),i=[];if(Array.isArray(a))for(let t=0;t<a.length;++t)i.push({key:this.inputs[t],value:a[t]});else i.push({key:this.inputs[0],value:a});const o=new ad(i);return ld(this.outputs,o)}).forEach((t,e)=>a[e].push(t))}return vc(a.map(t=>Or(t,0)))})}predict(t,e={}){const n=Id(t);Rd(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==e.batchSize?32:e.batchSize;return vd(r),this.predictLoop(n,r)}finally{Ed(n,t)}}predictOnBatch(t){Rd(t,this.inputNames,this.feedInputShapes,!0);const e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)}standardizeUserDataXY(t,e,n=!0,r){if(null==this.optimizer_)throw new fc("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const s=[];for(let t=0;t<this.feedOutputShapes.length;++t){const e=this.feedOutputShapes[t];this.feedLossFns[t]===Fp?s.push(e.slice(0,e.length-1).concat([1])):s.push(e)}if(function(t,e,n){const r=Tc(t.map(t=>t.shape[0]));r.sort();const s=Tc(e.map(t=>t.shape[0]));if(s.sort(),r.length>1)throw new mc("All input Tensors (x) should have the same number of samples. Got array shapes: "+JSON.stringify(t.map(t=>t.shape)));if(s.length>1)throw new mc("All target Tensors (y) should have the same number of samples. Got array shapes: "+JSON.stringify(e.map(t=>t.shape)));if(r.length>0&&s.length>0&&!C(r,s))throw new mc(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${s[0]} target sample(s).`)}(t=$d(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=$d(e,this.feedOutputNames,s,!1,"target")),function(t,e,n){const r=[Tp,Op,_p];for(let s=0;s<t.length;++s){const a=t[s],i=e[s],o=n[s];if(null!=i){if(i===_p&&1===a.shape[a.shape.length-1])throw new mc(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(i)){const t=a.shape.slice(1),e=o.slice(1);for(let n=0;n<t.length;++n){const r=t[n],s=e[n];if(null!=s&&r!==s)throw new mc(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&t[0].shape[0]%r!=0)throw new mc(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${t[0].shape[0]} sample(s).`);return[t,e]}async standardizeUserData(t,e,n,r,s=!0,a){const[i,o]=this.standardizeUserDataXY(t,e,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=r){const t=fd(r,this.outputNames);l=[];for(let e=0;e<t.length;++e)l.push(await md(o[e],null,t[e]))}return[i,o,l]}testLoop(t,e,n,r=0,s){return Wn(()=>{const a=this.checkNumSamples(e,n,s,"steps"),i=[];if(r>0)throw new gc("Verbose mode is not implemented yet.");if(null!=s)throw new gc("steps mode in testLoop() is not implemented yet");{const r=Sd(a,n),s=Qa(ch(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],o=r[n][1],l=dh(s,a,o-a),u=Cd(e,l),c=t(u);if(0===n)for(let t=0;t<c.length;++t)i.push(Ws(0));for(let t=0;t<c.length;++t){const e=c[t];i[t]=qn(i[t],Yn(o-a,e))}}for(let t=0;t<i.length;++t)i[t]=Xn(i[t],a)}return i})}getDedupedMetricsNames(){const t=this.metricsNames,e=[];for(let n=0;n<t.length;++n){const r=t[n];let s=r;if(wc(t,r)>1){s+="_"+wc(t.slice(0,n),r)}e.push(s)}return e}makeTrainFunction(){return t=>{const e=[],n=t.slice(0,this.inputs.length),r=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map(t=>t.read());return[this.optimizer_.minimize(()=>{const t=[];for(let e=0;e<this.inputs.length;++e)t.push({key:this.inputs[e],value:n[e]});const i=new ad(t),o=ld(this.outputs,i,{training:!0});let l;for(let t=0;t<this.lossFunctions.length;++t){let n=(0,this.lossFunctions[t])(r[t],o[t]);null!=s[t]&&(n=gd(n,s[t]));const a=ma(n);e.push(a),l=0===t?n:qn(l,n)}for(let t=0;t<this.metricsTensors.length;++t){let n;if(this.outputs.length>1&&t<this.outputs.length)n=e[t];else{const e=this.metricsTensors[t][0],s=this.metricsTensors[t][1];n=ma(e(r[s],o[s]))}Un(n),a.push(n)}return l=ma(l),this.calculateLosses().forEach(t=>{l=qn(l,t)}),l},!0,i)].concat(a)}}makeTestFunction(){this.testFunction=t=>Wn(()=>{const e=[];let n;const r=t.slice(0,this.inputs.length),s=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let t=0;t<this.inputs.length;++t)a.push({key:this.inputs[t],value:r[t]});const i=new ad(a),o=ld(this.outputs,i);for(let t=0;t<this.lossFunctions.length;++t){const r=this.lossFunctions[t],a=ma(r(s[t],o[t]));n=0===t?a:qn(n,a),e.push(n)}for(let t=0;t<this.metricsTensors.length;++t){const n=this.metricsTensors[t][0],r=this.metricsTensors[t][1],a=ma(n(s[r],o[r]));e.push(a)}return e})}async fit(t,e,n={}){return kd(this,t,e,n)}async fitDataset(t,e){return xd(this,t,e)}async trainOnBatch(t,e){const n=await this.standardizeUserData(t,e),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),i=[];for(const t of a){const e=await t.data();i.push(e[0])}return Vn(a),vc(i)}getNamedWeights(t){const e=[],n=null!=t&&t.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let t=0;t<r.length;++t)n&&!r[t].trainable||e.push({name:r[t].originalName,tensor:s[t]});return e}set stopTraining(t){this.stopTraining_=t}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)}dispose(){const t=super.dispose();if(0===t.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const e=Pn().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=e-Pn().numTensors}return t}getLossIdentifiers(){let t;if("string"==typeof this.loss)t=Cc(this.loss);else if(Array.isArray(this.loss)){for(const t of this.loss)if("string"!=typeof t)throw new Error("Serialization of non-string loss is not supported.");t=this.loss.map(t=>Cc(t))}else{const e=Object.keys(this.loss);t={};const n=this.loss;for(const r of e){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");t[r]=Cc(n[r])}}return t}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Cc(Jp(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(t=>Cc(Jp(t)));{const t={};for(const e in this.metrics)t[e]=Cc(Jp(this.metrics[e]));return t}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(t){if(null!=t.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=t.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=t.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const e=Ep(sd(t.optimizer_config));let n,r;if("string"==typeof t.loss)n=Sc(t.loss);else if(Array.isArray(t.loss))n=t.loss.map(t=>Sc(t));else if(null!=t.loss){n={};for(const e in t.loss)n[e]=Sc(t.loss[e])}if(Array.isArray(t.metrics))r=t.metrics.map(t=>Sc(t));else if(null!=t.metrics){r={};for(const e in t.metrics)r[e]=Sc(t.metrics[e])}this.compile({loss:n,metrics:r,optimizer:e})}async save(t,e){if("string"==typeof t){const e=ie(t);if(0===e.length)throw new mc(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new mc(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new mc("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await Yt(this.getNamedWeights(e)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v2.4.0",convertedBy:null};if(null!=e&&e.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const t="optimizer",{data:e,specs:s}=await Yt(await this.optimizer.getWeights(),t);n.specs.push(...s),n.data=ee([n.data,e])}if(null!=this.userDefinedMetadata){const t=!0;Zp(this.userDefinedMetadata,this.name,t),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=n.data,r.weightSpecs=n.specs,t.save(r)}setUserDefinedMetadata(t){Zp(t,this.name),this.userDefinedMetadata=t}getUserDefinedMetadata(){return this.userDefinedMetadata}}Dd.className="Model",Rn(Dd);class _d extends Dd{}async function Fd(t,e){if(null==e&&(e={}),"string"==typeof t){const n=oe(t,e);if(0===n.length)n.push(je(t,e));else if(n.length>1)throw new mc(`Found more than one (${n.length}) load handlers for URL '${t}'`);t=n[0]}return async function(t,e,n){null==n&&(n={});if(null==t.load)throw new mc("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const r=await t.load();let s=r.modelTopology;null!=s.model_config&&(s=s.model_config);const a=null==n.strict||n.strict,i=null!=r.weightData&&null!=r.weightSpecs&&a,o=Ep(sd(s),e,i),l=r.trainingConfig;null!=l&&o.loadTrainingConfig(l);null!=r.userDefinedMetadata&&o.setUserDefinedMetadata(r.userDefinedMetadata);if(null!=r.weightData){if(null==r.weightSpecs)throw new mc("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:t,optimizerWeights:e}=function(t,e){const n=Jt(t,e),r={},s=[];return e.forEach(t=>{"optimizer"===t.group?s.push({name:t.name,tensor:n[t.name]}):r[t.name]=n[t.name]}),{modelWeights:r,optimizerWeights:s}}(r.weightData,r.weightSpecs);o.loadWeights(t,a),null!=o.optimizer&&e.length>0&&await o.optimizer.setWeights(e),Vn(t),Vn(e.map(t=>t.tensor))}return o}(t,void 0,e)}_d.className="Functional",Rn(_d);class Od extends Dd{constructor(t){if(super({inputs:[],outputs:[]}),t=t||{},this.trainable=!0,this.built=!1,this.name=null!=t.name?t.name:Qh("sequential_"),null!=t.layers)for(const e of t.layers)this.add(e)}checkShape(t){if(t.inboundNodes[0].outputTensors[0].shape.some(t=>t<0))throw new mc("Negative dimension size caused by adding layer "+t.name+" with input shape ["+t.inboundNodes[0].inputTensors[0].shape+"]")}add(t){const e=t instanceof Od||t instanceof Dd;let n;if(e){if(n=t,1!==n.outputs.length)throw new mc("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new mc("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===t.inboundNodes.length){if(null==t.batchInputShape)throw new mc("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const e=mp({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(e)}if(e)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==t.inboundNodes.length)throw new mc(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);if(1!==t.inboundNodes[0].outputTensors.length)throw new mc("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=function t(e,n,r){if((null==n||null!=r&&r>0)&&(n=e.sourceLayer,r=e.nodeIndex),0===n.inboundNodes.length)return[e];{const e=n.inboundNodes[r];if(0===e.inboundLayers.length)return e.inputTensors;{const n=[];for(let r=0;r<e.inboundLayers.length;r++){const s=t(e.inputTensors[r],e.inboundLayers[r],e.nodeIndices[r]);for(const t of s)-1===n.indexOf(t)&&n.push(t)}return n}}}(this.outputs[0])}this.inboundNodes=[],new hp({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:bc(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(t=>t.shape),outputShapes:this.outputs[0].shape})}else{const e=t.apply(this.outputs[0]);if(Array.isArray(e))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[e],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(t,e){return null==this.model&&this.build(),this.model.call(t,e)}build(t){if(rp(t),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Dd({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(t,e,n=console.log){this.built||this.build(),super.summary(t,e,n)}setWeights(t){null==this.model&&this.build(),this.model.setWeights(t)}evaluate(t,e,n={}){if(!this.built)throw new fc("The model needs to be compiled before being used.");return this.model.evaluate(t,e,n)}async evaluateDataset(t,e){if(!this.built)throw new fc("The model needs to be compiled before being used.");return this.model.evaluateDataset(t,e)}predict(t,e={}){return null==this.model&&this.build(),this.model.predict(t,e)}predictOnBatch(t){return null==this.model&&this.build(),this.model.predictOnBatch(t)}compile(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(t){this.model.optimizer=t}async fit(t,e,n={}){if(!this.built)throw new fc("The model needs to be compiled before being used.");return this.model.fit(t,e,n)}async fitDataset(t,e){if(!this.built)throw new fc("The model needs to be compiled before being used.");return this.model.fitDataset(t,e)}async trainOnBatch(t,e){return this.model.trainOnBatch(t,e)}static fromConfig(t,e,n={},r=!1){let s,a={};if(e instanceof Array){if(null==e[0].className||"Merge"===e[0].className)throw new mc("Legacy serialization format not supported yet.");s=e}else b(null!=e.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),s=e.layers,delete e.layers,a=e;const i=new t(a);if(!(i instanceof Od))throw new gc("Sequential.fromConfig called on non-Sequential input: "+i);for(const t of s){const e=Ep(t,void 0,r);r&&e.setFastWeightInitDuringBuild(!0),i.add(e)}return i}set stopTraining(t){if(null==this.model)throw new mc("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=t}get stopTraining(){if(null==this.model)throw new mc("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const t=[];for(const e of this.layers){const n={};n.className=e.getClassName(),n.config=e.getConfig(),t.push(n)}return{name:this.name,layers:t}}}function Md(t){return mp(t)}Od.className="Sequential",Rn(Od);class zd extends Tn{getConfig(){return{}}}class Ld extends zd{apply(t,e=1){return function(t,e=1){if(1!==e)throw new gc(`Support for alpha values other than 1 (${e}) is not implemented yet.`);return vs(t)}(t,e)}}Ld.className="elu",Rn(Ld);class Bd extends zd{apply(t){return hi(t)}}Bd.className="selu",Rn(Bd);class Pd extends zd{apply(t){return ni(t)}}Pd.className="relu",Rn(Pd);class Wd extends zd{apply(t){return Wn(()=>ya(6,ni(t)))}}Wd.className="relu6",Rn(Wd);class Vd extends zd{apply(t){return t}}Vd.className="linear",Rn(Vd);class Ud extends zd{apply(t){return Mr(t)}}Ud.className="sigmoid",Rn(Ud);class Gd extends zd{apply(t){return function(t){return Wn(()=>{const e=qn(.5,Yn(.2,t));return Kr(e,0,1)})}(t)}}Gd.className="hardSigmoid",Rn(Gd);class Hd extends zd{apply(t){return Qs(t)}}Hd.className="softplus",Rn(Hd);class jd extends zd{apply(t){return function(t){return Wn(()=>Xn(t,Jn(t).add(1)))}(t)}}jd.className="softsign",Rn(jd);class qd extends zd{apply(t){return Lr(t)}}qd.className="tanh",Rn(qd);class Kd extends zd{apply(t,e=-1){return vi(t,e)}}Kd.className="softmax",Rn(Kd);class Xd extends zd{apply(t,e=-1){return sa(t,e)}}function Yd(t){return t.getClassName()}function Jd(t,e={}){return Ec(t,$n.getMap().classNameMap,e,"activation")}function Zd(t){if(null==t){const t={className:"linear",config:{}};return Jd(t)}if("string"==typeof t){const e={};return e.className=t,e.config={},Jd(e)}return t instanceof zd?t:Jd(t)}function Qd(t){if(null!=t&&"object"!=typeof t)throw new Error("Argument to L1L2 regularizer's constructor is expected to be an object, but received: "+t)}Xd.className="logSoftmax",Rn(Xd);class tf extends Tn{}class ef extends tf{constructor(t){super(),Qd(t),this.l1=null==t||null==t.l1?.01:t.l1,this.l2=null==t||null==t.l2?.01:t.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(t){return Wn(()=>{let e=da([1]);return this.hasL1&&(e=qn(e,ra(Yn(this.l1,Jn(t))))),this.hasL2&&(e=qn(e,ra(Yn(this.l2,Nh(t))))),e.asScalar()})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(t,e){return new t({l1:e.l1,l2:e.l2})}}ef.className="L1L2",Rn(ef);const nf={l1l2:"L1L2"};function rf(t){return Ic(t)}function sf(t,e={}){return Ec(t,$n.getMap().classNameMap,e,"regularizer")}function af(t){if(null==t)return null;if("string"==typeof t){return sf({className:t in nf?nf[t]:t,config:{}})}return t instanceof tf?t:sf(t)}class of extends dp{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,null!=t&&(this.maxValue=t.maxValue)}call(t,e){t=np(t);let n=ni(t);return null!=this.maxValue&&(n=Kr(n,0,this.maxValue)),n}computeOutputShape(t){return t}getConfig(){const t={maxValue:this.maxValue},e=super.getConfig();return Object.assign(t,e),t}}of.className="ReLU",Rn(of);class lf extends dp{constructor(t){super(null==t?{}:t),this.DEFAULT_ALPHA=.3,null==t&&(t={}),this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=np(t);return Vs(n,this.alpha)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}lf.className="LeakyReLU",Rn(lf);class uf extends dp{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==t&&(t={}),this.supportsMasking=!0,this.alphaInitializer=Kh(t.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=af(t.alphaRegularizer),this.alphaConstraint=Gc(t.alphaConstraint),null==t.sharedAxes)this.sharedAxes=null;else if(Array.isArray(t.sharedAxes))this.sharedAxes=t.sharedAxes;else{if("number"!=typeof t.sharedAxes)throw new mc("Expected sharedAxes to be a number or an array of numbers, but got "+t.sharedAxes);this.sharedAxes=[t.sharedAxes]}}build(t){const e=(t=rp(t)).slice(1);if(null!=this.sharedAxes)for(const t of this.sharedAxes)e[t-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let e=1;e<t.length;++e)n[e]=t[e];this.inputSpec=[new lp({ndim:t.length,axes:n})],this.built=!0}call(t,e){return t=np(t),Oa(t,this.alpha.read())}getConfig(){const t={alphaInitializer:qh(this.alphaInitializer),alphaRegularizer:rf(this.alphaRegularizer),alphaConstraint:Vc(this.alphaConstraint),sharedAxes:this.sharedAxes},e=super.getConfig();return Object.assign(t,e),t}}uf.className="PReLU",Rn(uf);class cf extends dp{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA=1,null==t&&(t={}),null!=t.alpha&&t.alpha!==this.DEFAULT_ALPHA)throw new gc(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=np(t);return vs(n)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}cf.className="ELU",Rn(cf);class hf extends dp{constructor(t){super(null==t?{}:t),this.DEFAULT_THETA=1,null==t&&(t={}),this.theta=null==t.theta?this.DEFAULT_THETA:t.theta}call(t,e){const n=np(t);return n.mul(hh(n.greater(this.theta),"float32"))}computeOutputShape(t){return t}getConfig(){const t={theta:this.theta},e=super.getConfig();return Object.assign(t,e),t}}hf.className="ThresholdedReLU",Rn(hf);class pf extends dp{constructor(t){super(null==t?{}:t),this.DEFAULT_AXIS=1,null==t&&(t={}),this.softmax=(new Kd).apply,this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis}call(t,e){const n=np(t);return this.softmax(n,this.axis)}computeOutputShape(t){return t}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function df(t,e,n){if("number"==typeof t)return bc(t,e);if(t.length!==e)throw new mc(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${t.length} elements.`);for(let s=0;s<e;++s){const a=t[s];if((r=a)!==parseInt(r.toString(),10))throw new mc(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(t)} including a non-integer number `+a)}return t;var r}function ff(t,e,n,r,s=1){if(null==t)return t;let a;return a="same"===n?t:t-(e+(e-1)*(s-1))+1,Math.floor((a+r-1)/r)}function mf(t,e,n,r){if(null==t)return null;if("valid"===r)t=t*e+uh([n-e,0]);else{if("same"!==r)throw new mc(`Unsupport padding mode: ${r}.`);t*=e}return t}function gf(t,e){return Wn(()=>(Jc(e),"channelsFirst"===e?Qe(t,[0,2,3,1]):t))}function yf(t,e){return Wn(()=>(Jc(e),"channelsFirst"===e?Qe(t,[0,2,3,4,1]):t))}function bf(t,e,n,r=1,s="valid",a,i=1){return Wn(()=>{if(null==a&&(a="channelsLast"),Jc(a),3!==t.shape.length)throw new mc("The input of a conv1dWithBias operation should be 3, but is "+t.shape.length+" instead.");if(3!==e.shape.length)throw new mc("The kernel for a conv1dWithBias operation should be 3, but is "+e.shape.length+" instead");if(null!=n&&1!==n.shape.length)throw new mc("The bias for a conv1dWithBias operation should be 1, but is "+e.shape.length+" instead");if("channelsFirst"===a&&(t=Qe(t,[0,2,1])),"causal"===s)throw new gc("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=ts(t,e,r,"same"===s?"same":"valid","NWC",i);return null!=n&&(o=Sh(o,n)),o})}function xf(t,e,n,r=[1,1],s="valid",a,i,o=null){return Wn(()=>{if(null==a&&(a="channelsLast"),Jc(a),3!==t.rank&&4!==t.rank)throw new mc(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${t.rank}.`);if(3!==e.rank&&4!==e.rank)throw new mc(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${t.rank}.`);let l=gf(t,a);if("causal"===s)throw new gc("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=vo({x:l,filter:e,strides:r,pad:"same"===s?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=Qe(l,[0,3,1,2])),l})}function wf(t,e,n,r=[1,1,1],s="valid",a,i){return Wn(()=>{if(null==a&&(a="channelsLast"),Jc(a),4!==t.rank&&5!==t.rank)throw new mc("conv3dWithBias expects input to be of rank 4 or 5, but received "+t.rank+".");if(4!==e.rank&&5!==e.rank)throw new mc("conv3dWithBias expects kernel to be of rank 4 or 5, but received "+t.rank+".");let o=yf(t,a);if("causal"===s)throw new gc("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=rs(o,e,r,"same"===s?"same":"valid","NDHWC",i),null!=n&&(o=Sh(o,n)),"channelsFirst"===a&&(o=Qe(o,[0,4,1,2,3])),o})}pf.className="Softmax",Rn(pf);class vf extends dp{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",vf.verifyArgs(e),this.rank=t,_c(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new gc(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=df(e.kernelSize,t,"kernelSize"),this.strides=df(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,Zc(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Jc(this.dataFormat),this.activation=Zd(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=Kh(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Gc(e.biasConstraint),this.biasRegularizer=af(e.biasRegularizer),this.activityRegularizer=af(e.activityRegularizer),this.dilationRate=df(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new mc("dilationRate must be a number or an array of a single number for 1D convolution, but received "+JSON.stringify(this.dilationRate));if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new mc("dilationRate must be a number or array of two numbers for 2D convolution, but received "+JSON.stringify(this.dilationRate))}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new mc("dilationRate must be a number or array of three numbers for 3D convolution, but received "+JSON.stringify(this.dilationRate))}static verifyArgs(t){if(xc("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!Dc(t.kernelSize,"number",1,3))throw new mc(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Yd(this.activation),useBias:this.useBias,biasInitializer:qh(this.biasInitializer),biasRegularizer:rf(this.biasRegularizer),activityRegularizer:rf(this.activityRegularizer),biasConstraint:Vc(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class Nf extends vf{constructor(t,e){super(t,e),this.kernel=null,Nf.verifyArgs(e),this.filters=e.filters,_c(this.filters,"filters"),this.kernelInitializer=Kh(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Gc(e.kernelConstraint),this.kernelRegularizer=af(e.kernelRegularizer)}build(t){t=rp(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new mc("The channel dimension of the input should be defined. Found "+t[e]);const n=t[e],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:n}}],this.built=!0}call(t,e){return Wn(()=>{let e;t=np(t);const n=null==this.bias?null:this.bias.read(),r=Fc(this.activation.getClassName());if(null!=r&&2===this.rank)e=xf(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)e=bf(t,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)e=xf(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new gc("convolutions greater than 3D are not implemented yet.");e=wf(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(e=this.activation.apply(e))}return e})}computeOutputShape(t){t=rp(t);const e=[],n="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let t=0;t<n.length;++t){const r=ff(n[t],this.kernelSize[t],this.padding,this.strides[t],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[t]);e.push(r)}let r=[t[0]];return"channelsLast"===this.dataFormat?(r=r.concat(e),r.push(this.filters)):(r.push(this.filters),r=r.concat(e)),r}getConfig(){const t={filters:this.filters,kernelInitializer:qh(this.kernelInitializer),kernelRegularizer:rf(this.kernelRegularizer),kernelConstraint:Vc(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new mc("Convolution layer expected config.filters to be a 'number' > 0 but got "+JSON.stringify(t.filters))}}class Cf extends Nf{constructor(t){super(2,t),Cf.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!Dc(t.kernelSize,"number",1,2))throw new mc(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`)}}Cf.className="Conv2D",Rn(Cf);class Sf extends Nf{constructor(t){super(3,t),Sf.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&(!Array.isArray(t.kernelSize)||1!==t.kernelSize.length&&3!==t.kernelSize.length))throw new mc(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`)}}Sf.className="Conv3D",Rn(Sf);class kf extends Cf{constructor(t){if(super(t),this.inputSpec=[new lp({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new mc("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode "+this.padding)}build(t){if(4!==(t=rp(t)).length)throw new mc("Input should have rank 4; Received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new mc("The channel dimension of the inputs should be defined. Found `None`.");const n=t[e],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new lp({ndim:4,axes:{[e]:n}})],this.built=!0}call(t,e){return Wn(()=>{let e=np(t);if(4!==e.shape.length)throw new mc("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-"+e.shape.length);const n=e.shape,r=n[0];let s,a;"channelsFirst"===this.dataFormat?(s=2,a=3):(s=1,a=2);const i=n[s],o=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[r,mf(i,c,l,this.padding),mf(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(e=Qe(e,[0,2,3,1]));let d=ns(e,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=Qe(d,[0,3,1,2])),null!=this.bias&&(d=Sh(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d})}computeOutputShape(t){const e=(t=rp(t)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return e[n]=this.filters,e[r]=mf(e[r],o,a,this.padding),e[s]=mf(e[s],l,i,this.padding),e}getConfig(){const t=super.getConfig();return delete t.dilationRate,t}}kf.className="Conv2DTranspose",Rn(kf);class If extends Nf{constructor(t,e){if(super(t,e),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==e.filters)throw new mc("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=e.kernelInitializer||null!=e.kernelRegularizer||null!=e.kernelConstraint)throw new mc("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=e.padding&&"same"!==e.padding&&"valid"!==e.padding)throw new mc(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received `+JSON.stringify(e.padding));this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Kh(e.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=af(e.depthwiseRegularizer),this.depthwiseConstraint=Gc(e.depthwiseConstraint),this.pointwiseInitializer=Kh(e.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=af(e.pointwiseRegularizer),this.pointwiseConstraint=Gc(e.pointwiseConstraint)}build(t){if((t=rp(t)).length<this.rank+2)throw new mc(`Inputs to SeparableConv${this.rank}D should have rank `+(this.rank+2)+", but received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e]||t[e]<0)throw new mc("The channel dimension of the inputs should be defined, but found "+JSON.stringify(t[e]));const n=t[e],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let t=0;t<this.rank;++t)s.push(1);s.push(n*this.depthMultiplier,this.filters);this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,!0,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.inputSpec=[new lp({ndim:this.rank+2,axes:{[e]:n}})],this.built=!0}call(t,e){return Wn(()=>{let e;if(t=np(t),1===this.rank)throw new gc("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(t=Qe(t,[0,2,3,1])),e=pi(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(e=Sh(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),"channelsFirst"===this.dataFormat&&(e=Qe(e,[0,3,1,2])),e})}getConfig(){const t=super.getConfig();return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=qh(this.depthwiseInitializer),t.pointwiseInitializer=qh(this.pointwiseInitializer),t.depthwiseRegularizer=rf(this.depthwiseRegularizer),t.pointwiseRegularizer=rf(this.pointwiseRegularizer),t.depthwiseConstraint=Vc(this.depthwiseConstraint),t.pointwiseConstraint=Vc(this.pointwiseConstraint),t}}If.className="SeparableConv";class Ef extends If{constructor(t){super(2,t)}}Ef.className="SeparableConv2D",Rn(Ef);class Af extends Nf{constructor(t){super(1,t),Af.verifyArgs(t),this.inputSpec=[{ndim:3}]}getConfig(){const t=super.getConfig();return delete t.rank,delete t.dataFormat,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!Dc(t.kernelSize,"number",1,1))throw new mc(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`)}}Af.className="Conv1D",Rn(Af);class Tf extends dp{constructor(t){super(t),"number"==typeof t.cropping?this.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:"number"==typeof t.cropping[0]?this.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:this.cropping=t.cropping,this.dataFormat=void 0===t.dataFormat?"channelsLast":t.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(t){return"channelsFirst"===this.dataFormat?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]}call(t,e){return Wn(()=>{if(t=np(t),"channelsLast"===this.dataFormat){const e=mh(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return mh(e,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const e=mh(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return mh(e,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const t={cropping:this.cropping,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}Tf.className="Cropping2D",Rn(Tf);class $f extends dp{constructor(t){super(t),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==t.size?this.DEFAULT_SIZE:t.size,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat}computeOutputShape(t){if("channelsFirst"===this.dataFormat){const e=null==t[2]?null:this.size[0]*t[2],n=null==t[3]?null:this.size[1]*t[3];return[t[0],t[1],e,n]}{const e=null==t[1]?null:this.size[0]*t[1],n=null==t[2]?null:this.size[1]*t[2];return[t[0],e,n,t[3]]}}call(t,e){return Wn(()=>{let e=np(t);const n=e.shape;if("channelsFirst"===this.dataFormat){e=Qe(e,[0,2,3,1]);const t=this.size[0]*n[2],r=this.size[1]*n[3],s=e.resizeNearestNeighbor([t,r]);return Qe(s,[0,3,1,2])}{const t=this.size[0]*n[1],r=this.size[1]*n[2];return e.resizeNearestNeighbor([t,r])}})}getConfig(){const t={size:this.size,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}$f.className="UpSampling2D",Rn($f);class Rf extends vf{constructor(t){super(2,t),this.depthwiseKernel=null,this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Kh(t.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Gc(t.depthwiseConstraint),this.depthwiseRegularizer=af(t.depthwiseRegularizer)}build(t){if((t=rp(t)).length<4)throw new mc(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);const e="channelsFirst"===this.dataFormat?1:3;if(null==t[e]||t[e]<0)throw new mc(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);const n=t[e],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Wn(()=>{let e=function(t,e,n=[1,1],r="valid",s,a){return Wn(()=>{null==s&&(s="channelsLast"),Jc(s);let i=gf(t,s);if(4!==t.rank)throw new mc("Input for depthwiseConv2d is required to be 4-D, but is instead "+t.rank+"-D");if(4!==e.rank)throw new mc("depthwiseKernel is required to be 4-D, but is instead "+e.rank+"-D");return i=cs(i,e,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(i=Qe(i,[0,3,1,2])),i})}(t=np(t),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(e=Sh(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),e})}computeOutputShape(t){t=rp(t);const e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,s=ff(e,this.kernelSize[0],this.padding,this.strides[0]),a=ff(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[t[0],r,s,a]:[t[0],s,a,r]}getConfig(){const t=super.getConfig();return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=qh(this.depthwiseInitializer),t.depthwiseRegularizer=rf(this.depthwiseRegularizer),t.depthwiseConstraint=Vc(this.depthwiseRegularizer),t}}function Df(t,e,n,r){if(Array.isArray(t)){if(null!=e||null!=n)throw new mc("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=t.slice(t.length-r,t.length),t=t.slice(0,t.length-r)),t.length>1&&(e=t.slice(1,t.length)),t=t[0]}function s(t){return null==t||Array.isArray(t)?t:[t]}return{inputs:t,initialState:e=s(e),constants:n=s(n)}}function _f(t,e,n,r=!1,s,a,i=!1,o=!1){return Wn(()=>{const l=e.shape.length;if(l<3)throw new mc(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(ch(2,l));if(e=Qe(e,u),null!=a)throw new gc("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=s.asType("bool").asType("float32")).rank===l-1&&(s=Ss(s,-1)),s=Qe(s,u)),r&&(e=si(e,0),null!=s&&(s=si(s,0)));const c=[];let h,p=n;const d=e.shape[0],f=Pi(e);let m,g;null!=s&&(m=Pi(s));for(let e=0;e<d;++e){const n=f[e],r=Wn(()=>t(n,p));if(null==s)h=r[0],p=r[1];else{const t=Wn(()=>{const t=m[e],n=ka(t).sub(t);return{output:r[0].mul(t).add(p[0].mul(n)),newStates:p.map((e,s)=>r[1][s].mul(t).add(e.mul(n)))}});h=t.output,p=t.newStates}o&&c.push(h)}if(o){g=Ri(c,1)}return[h,g,p]})}Rf.className="DepthwiseConv2D",Rn(Rf);class Ff extends dp{constructor(t){let e;if(super(t),null==t.cell)throw new mc("cell property is missing for the constructor of RNN.");if(e=Array.isArray(t.cell)?new Vf({cells:t.cell}):t.cell,null==e.stateSize)throw new mc("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=e,this.returnSequences=null!=t.returnSequences&&t.returnSequences,this.returnState=null!=t.returnState&&t.returnState,this.goBackwards=null!=t.goBackwards&&t.goBackwards,this._stateful=null!=t.stateful&&t.stateful,this.unroll=null!=t.unroll&&t.unroll,this.supportsMasking=!0,this.inputSpec=[new lp({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return ch(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(t=>null)}return this.states_}setStates(t){this.states_=t}computeOutputShape(t){tp(t)&&(t=t[0]),t=t;let e=this.cell.stateSize;Array.isArray(e)||(e=[e]);const n=e[0];let r;if(r=this.returnSequences?[t[0],t[1],n]:[t[0],n],this.returnState){const n=[];for(const r of e)n.push([t[0],r]);return[r].concat(n)}return r}computeMask(t,e){return Wn(()=>{Array.isArray(e)&&(e=e[0]);const t=this.returnSequences?e:null;if(this.returnState){const e=this.states.map(t=>null);return[t].concat(e)}return t})}get states(){if(null==this.states_){const t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[];for(let n=0;n<t;++n)e.push(null);return e}return this.states_}set states(t){this.states_=t}build(t){if(null!=this.numConstants)throw new gc("Constants support is not implemented in RNN yet.");tp(t)&&(t=t[0]),t=t;const e=this.stateful?t[0]:null,n=t.slice(2);this.inputSpec[0]=new lp({shape:[e,null,...n]});const r=[t[0]].concat(t.slice(2));let s;if(this.cell.build(r),s=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!C(this.stateSpec.map(t=>t.shape[t.shape.length-1]),s))throw new mc(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is `+this.cell.stateSize)}else this.stateSpec=s.map(t=>new lp({shape:[null,t]}));this.stateful&&this.resetStates()}resetStates(t,e=!1){Wn(()=>{if(!this.stateful)throw new dc("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new mc("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(t=>da([n,t])):this.states_=[da([n,this.cell.stateSize])];else if(null==t)Vn(this.states_),null!=this.keptStates&&(Vn(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(t=>da([n,t])):this.states_[0]=da([n,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new mc(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: `+t);!0===e?this.keptStates.push(this.states_.slice()):Vn(this.states_);for(let e=0;e<this.states_.length;++e){const r=t[e],s=Array.isArray(this.cell.stateSize)?this.cell.stateSize[e]:this.cell.stateSize,a=[n,s];if(!C(r.shape,a))throw new mc(`State ${e} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);this.states_[e]=r}}this.states_=this.states_.map(t=>Un(t.clone()))})}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=Df(t,n,r,this.numConstants);t=s.inputs,n=s.initialState,r=s.constants;let a=[],i=[];if(null!=n){e.initialState=n,a=a.concat(n),this.stateSpec=[];for(const t of n)this.stateSpec.push(new lp({shape:t.shape}));i=i.concat(this.stateSpec)}if(null!=r&&(e.constants=r,a=a.concat(r),this.numConstants=r.length),a[0]instanceof up){const n=[t].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,e);return this.inputSpec=s,o}return super.apply(t,e)}call(t,e){return Wn(()=>{const n=null==e?null:e.mask,r=null==e?null:e.training;let s=null==e?null:e.initialState;t=np(t),null==s&&(s=this.stateful?this.states_:this.getInitialState(t));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new mc(`RNN Layer has ${a} state(s) but was passed `+s.length+" initial state(s).");this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:r},o=_f((t,e)=>{const n=this.cell.call([t].concat(e),i);return[n[0],n.slice(1)]},t,s,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,r);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h})}getInitialState(t){return Wn(()=>{let e=da(t.shape);return e=ra(e,[1,2]),e=ph(e),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(t=>t>1?bh(e,[1,t]):e):this.cell.stateSize>1?[bh(e,[1,this.cell.stateSize])]:[e]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(t)}getConfig(){const t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const e=this.cell.getConfig();t.cell={className:this.cell.getClassName(),config:e};const n=super.getConfig();return Object.assign(t,n),t}static fromConfig(t,e,n={}){const r=Ep(e.cell,n);return new t(Object.assign(e,{cell:r}))}}Ff.className="RNN",Rn(Ff);class Of extends dp{}class Mf extends Of{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,_c(this.units,"units"),this.activation=Zd(null==t.activation?this.DEFAULT_ACTIVATION:t.activation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Kh(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Kh(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Kh(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=af(t.kernelRegularizer),this.recurrentRegularizer=af(t.recurrentRegularizer),this.biasRegularizer=af(t.biasRegularizer),this.kernelConstraint=Gc(t.kernelConstraint),this.recurrentConstraint=Gc(t.recurrentConstraint),this.biasConstraint=Gc(t.biasConstraint),this.dropout=lh([1,uh([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=lh([1,uh([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=rp(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Wn(()=>{if(2!==(t=t).length)throw new mc(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);let n=t[1];t=t[0];const r=null!=e.training&&e.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Uf({ones:()=>ka(t),rate:this.dropout,training:r})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Uf({ones:()=>ka(n),rate:this.recurrentDropout,training:r}));const a=this.dropoutMask,i=this.recurrentDropoutMask;s=wh(null!=a?Yn(t,a):t,this.kernel.read()),null!=this.bias&&(s=Sh(s,this.bias.read())),null!=i&&(n=Yn(n,i));let o=qn(s,wh(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]})}getConfig(){const t={units:this.units,activation:Yd(this.activation),useBias:this.useBias,kernelInitializer:qh(this.kernelInitializer),recurrentInitializer:qh(this.recurrentInitializer),biasInitializer:qh(this.biasInitializer),kernelRegularizer:rf(this.kernelRegularizer),recurrentRegularizer:rf(this.recurrentRegularizer),biasRegularizer:rf(this.biasRegularizer),activityRegularizer:rf(this.activityRegularizer),kernelConstraint:Vc(this.kernelConstraint),recurrentConstraint:Vc(this.recurrentConstraint),biasConstraint:Vc(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},e=super.getConfig();return Object.assign(t,e),t}}Mf.className="SimpleRNNCell",Rn(Mf);class zf extends Ff{constructor(t){t.cell=new Mf(t),super(t)}call(t,e){return Wn(()=>{null!=this.cell.dropoutMask&&(Vn(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Vn(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})})}get units(){return this.cell.units}get activation(){return this.cell.activation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}getConfig(){const t={units:this.units,activation:Yd(this.activation),useBias:this.useBias,kernelInitializer:qh(this.kernelInitializer),recurrentInitializer:qh(this.recurrentInitializer),biasInitializer:qh(this.biasInitializer),kernelRegularizer:rf(this.kernelRegularizer),recurrentRegularizer:rf(this.recurrentRegularizer),biasRegularizer:rf(this.biasRegularizer),activityRegularizer:rf(this.activityRegularizer),kernelConstraint:Vc(this.kernelConstraint),recurrentConstraint:Vc(this.recurrentConstraint),biasConstraint:Vc(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return new t(e)}}zf.className="SimpleRNN",Rn(zf);class Lf extends Of{constructor(t){if(super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.resetAfter)throw new mc("GRUCell does not support reset_after parameter set to true.");this.units=t.units,_c(this.units,"units"),this.activation=Zd(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=Zd(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Kh(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Kh(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Kh(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=af(t.kernelRegularizer),this.recurrentRegularizer=af(t.recurrentRegularizer),this.biasRegularizer=af(t.biasRegularizer),this.kernelConstraint=Gc(t.kernelConstraint),this.recurrentConstraint=Gc(t.recurrentConstraint),this.biasConstraint=Gc(t.biasConstraint),this.dropout=lh([1,uh([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=lh([1,uh([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){const e=(t=rp(t))[t.length-1];this.kernel=this.addWeight("kernel",[e,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Wn(()=>{if(2!==(t=t).length)throw new mc("GRUCell expects 2 input Tensors (inputs, h, c), got "+t.length+".");const n=null!=e.training&&e.training;let r=t[1];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Uf({ones:()=>ka(t),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Uf({ones:()=>ka(r),rate:this.recurrentDropout,training:n,count:3}));const s=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(t=Yn(t,s[0]));let u=wh(t,this.kernel.read());this.useBias&&(u=Sh(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=Yn(r,a[0]));const c=this.recurrentKernel.read(),[h,p]=Ii(c,[2*this.units,this.units],c.rank-1),d=wh(r,h),[f,m,g]=Ii(u,3,u.rank-1),[y,b]=Ii(d,2,d.rank-1);i=this.recurrentActivation.apply(qn(f,y)),o=this.recurrentActivation.apply(qn(m,b));const x=wh(Yn(o,r),p);l=this.activation.apply(qn(g,x));const w=qn(Yn(i,r),Yn(qn(1,Zs(i)),l));return[w,w]})}getConfig(){const t={units:this.units,activation:Yd(this.activation),recurrentActivation:Yd(this.recurrentActivation),useBias:this.useBias,kernelInitializer:qh(this.kernelInitializer),recurrentInitializer:qh(this.recurrentInitializer),biasInitializer:qh(this.biasInitializer),kernelRegularizer:rf(this.kernelRegularizer),recurrentRegularizer:rf(this.recurrentRegularizer),biasRegularizer:rf(this.biasRegularizer),activityRegularizer:rf(this.activityRegularizer),kernelConstraint:Vc(this.kernelConstraint),recurrentConstraint:Vc(this.recurrentConstraint),biasConstraint:Vc(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1},e=super.getConfig();return Object.assign(t,e),t}}Lf.className="GRUCell",Rn(Lf);class Bf extends Ff{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new Lf(t),super(t)}call(t,e){return Wn(()=>{null!=this.cell.dropoutMask&&(Vn(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Vn(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})})}get units(){return this.cell.units}get activation(){return this.cell.activation}get recurrentActivation(){return this.cell.recurrentActivation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}get implementation(){return this.cell.implementation}getConfig(){const t={units:this.units,activation:Yd(this.activation),recurrentActivation:Yd(this.recurrentActivation),useBias:this.useBias,kernelInitializer:qh(this.kernelInitializer),recurrentInitializer:qh(this.recurrentInitializer),biasInitializer:qh(this.biasInitializer),kernelRegularizer:rf(this.kernelRegularizer),recurrentRegularizer:rf(this.recurrentRegularizer),biasRegularizer:rf(this.biasRegularizer),activityRegularizer:rf(this.activityRegularizer),kernelConstraint:Vc(this.kernelConstraint),recurrentConstraint:Vc(this.recurrentConstraint),biasConstraint:Vc(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}Bf.className="GRU",Rn(Bf);class Pf extends Of{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,_c(this.units,"units"),this.activation=Zd(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=Zd(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Kh(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Kh(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Kh(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=t.unitForgetBias,this.kernelRegularizer=af(t.kernelRegularizer),this.recurrentRegularizer=af(t.recurrentRegularizer),this.biasRegularizer=af(t.biasRegularizer),this.kernelConstraint=Gc(t.kernelConstraint),this.recurrentConstraint=Gc(t.recurrentConstraint),this.biasConstraint=Gc(t.biasConstraint),this.dropout=lh([1,uh([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=lh([1,uh([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){var e;const n=(t=rp(t))[t.length-1];let r;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const t=this.biasInitializer,n=this.units;r=new((e=class extends Th{apply(e,r){const s=t.apply([n]),a=(new Rh).apply([n]),i=t.apply([2*n]);return yh(yh(s,a),i)}}).className="CustomInit",e)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,e){return Wn(()=>{const n=null!=e.training&&e.training;if(3!==(t=t).length)throw new mc("LSTMCell expects 3 input Tensors (inputs, h, c), got "+t.length+".");let r=t[1];const s=t[2];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Uf({ones:()=>ka(t),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Uf({ones:()=>ka(r),rate:this.recurrentDropout,training:n,count:4}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(t=Yn(t,a[0]));let h=wh(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=Yn(r,i[0])),h=qn(h,wh(r,this.recurrentKernel.read())),this.useBias&&(h=Sh(h,this.bias.read()));const[p,d,f,m]=Ii(h,4,h.rank-1);o=this.recurrentActivation.apply(p),l=this.recurrentActivation.apply(d),u=qn(Yn(l,s),Yn(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=Yn(c,this.activation.apply(u));return[g,g,u]})}getConfig(){const t={units:this.units,activation:Yd(this.activation),recurrentActivation:Yd(this.recurrentActivation),useBias:this.useBias,kernelInitializer:qh(this.kernelInitializer),recurrentInitializer:qh(this.recurrentInitializer),biasInitializer:qh(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:rf(this.kernelRegularizer),recurrentRegularizer:rf(this.recurrentRegularizer),biasRegularizer:rf(this.biasRegularizer),activityRegularizer:rf(this.activityRegularizer),kernelConstraint:Vc(this.kernelConstraint),recurrentConstraint:Vc(this.recurrentConstraint),biasConstraint:Vc(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},e=super.getConfig();return Object.assign(t,e),t}}Pf.className="LSTMCell",Rn(Pf);class Wf extends Ff{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new Pf(t),super(t)}call(t,e){return Wn(()=>{null!=this.cell.dropoutMask&&(Vn(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Vn(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})})}get units(){return this.cell.units}get activation(){return this.cell.activation}get recurrentActivation(){return this.cell.recurrentActivation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get unitForgetBias(){return this.cell.unitForgetBias}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}get implementation(){return this.cell.implementation}getConfig(){const t={units:this.units,activation:Yd(this.activation),recurrentActivation:Yd(this.recurrentActivation),useBias:this.useBias,kernelInitializer:qh(this.kernelInitializer),recurrentInitializer:qh(this.recurrentInitializer),biasInitializer:qh(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:rf(this.kernelRegularizer),recurrentRegularizer:rf(this.recurrentRegularizer),biasRegularizer:rf(this.biasRegularizer),activityRegularizer:rf(this.activityRegularizer),kernelConstraint:Vc(this.kernelConstraint),recurrentConstraint:Vc(this.recurrentConstraint),biasConstraint:Vc(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}Wf.className="LSTM",Rn(Wf);class Vf extends Of{constructor(t){super(t),this.cells=t.cells}get stateSize(){const t=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?t.push(...e.stateSize):t.push(e.stateSize);return t}call(t,e){return Wn(()=>{let n=(t=t).slice(1);const r=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?r.push(n.splice(0,t.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=r[i],a=0===i?[t[0]].concat(n):[a[0]].concat(n),a=o.call(a,e),s.push(a.slice(1))}n=[];for(const t of s.slice().reverse())n.push(...t);return[a[0]].concat(n)})}build(t){let e;tp(t)&&(t=t[0]),t=t,this.cells.forEach((n,r)=>{eh("RNNCell_"+r,()=>{n.build(t),e=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,t=[t[0],e]})}),this.built=!0}getConfig(){const t=[];for(const e of this.cells)t.push({className:e.getClassName(),config:e.getConfig()});const e={cells:t},n=super.getConfig();return Object.assign(e,n),e}static fromConfig(t,e,n={}){const r=[];for(const t of e.cells)r.push(Ep(t,n));return new t({cells:r})}get trainableWeights(){if(!this.trainable)return[];const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.cells)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e.concat(t)}return t}getWeights(){const t=[];for(const e of this.cells)t.push(...e.weights);return ip(t)}setWeights(t){const e=[];for(const n of this.cells){const r=n.weights.length,s=t.splice(r);for(let t=0;t<n.weights.length;++t)e.push([n.weights[t],s[t]])}op(e)}}function Uf(t){const{ones:e,rate:n,training:r=!1,count:s=1}=t,a=()=>kh(e(),n),i=()=>Ih(a,e,r);return!s||s<=1?Un(i().clone()):Array(s).fill(void 0).map(i).map(t=>Un(t.clone()))}Vf.className="StackedRNNCells",Rn(Vf);var Gf=function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(t);s<r.length;s++)e.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(t,r[s])&&(n[r[s]]=t[r[s]])}return n};class Hf extends Ff{constructor(t){if(t.unroll)throw new gc("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(t.cell))throw new gc("It is not possible at the moment to stack convolutional cells.");super(t),this.inputSpec=[new lp({ndim:5})]}call(t,e){return Wn(()=>{if(null!=this.cell.dropoutMask&&(Vn(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Vn(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),e&&e.constants)throw new mc("ConvRNN2D cell does not support constants");const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})})}computeOutputShape(t){let e=this.computeSingleOutputShape(t);return this.returnSequences||(e=[e[0],...e.slice(2)]),this.returnState&&(e=[e,...Array(2).fill([t[0],...e.slice(-3)])]),e}getInitialState(t){return Wn(()=>{const{stateSize:e}=this.cell,n=t.shape,r=this.computeSingleOutputShape(n),s=da([r[0],...r.slice(2)]);return Array.isArray(e)?Array(e.length).fill(s):[s]})}resetStates(t,e=!1){Wn(()=>{if(!this.stateful)throw new dc("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,r=this.computeSingleOutputShape(n),s=[r[0],...r.slice(2)];if(null==n[0])throw new mc("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>da(s)):this.states_=[da(s)];else if(null==t)Vn(this.states_),null!=this.keptStates&&(Vn(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>da(s)):this.states_[0]=da(s);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new mc(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: `+t);e?this.keptStates.push(this.states_.slice()):Vn(this.states_);for(let e=0;e<this.states_.length;++e){const n=t[e],r=s;if(!C(n.shape,r))throw new mc(`State ${e} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${n.shape}`);this.states_[e]=n}}this.states_=this.states_.map(t=>Un(t.clone()))})}getConfig(){const t=super.getConfig(),{cell:e}=t,n=Gf(t,["cell"]),r=this.cell.getConfig();return Object.assign({},r,n)}computeSingleOutputShape(t){const{dataFormat:e,filters:n,kernelSize:r,padding:s,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===e,l=t[o?3:2],u=t[o?4:3],c=ff(l,r[0],s,a[0],i[0]),h=ff(u,r[1],s,a[1],i[1]);return[...t.slice(0,2),...o?[n,c,h]:[c,h,n]]}}Hf.className="ConvRNN2D";class jf extends Pf{constructor(t){const{filters:e,kernelSize:n,strides:r,padding:s,dataFormat:a,dilationRate:i}=t;super(Object.assign({},t,{units:e})),this.filters=e,_c(this.filters,"filters"),this.kernelSize=df(n,2,"kernelSize"),this.kernelSize.map(t=>_c(t,"kernelSize")),this.strides=df(r||1,2,"strides"),this.strides.map(t=>_c(t,"strides")),this.padding=s||"valid",Zc(this.padding),this.dataFormat=a||"channelsLast",Jc(this.dataFormat),this.dilationRate=df(i||1,2,"dilationRate"),this.dilationRate.map(t=>_c(t,"dilationRate"))}build(t){var e;t=rp(t);const n="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[n])throw new mc("The channel dimension of the input should be defined. Found "+t[n]);const r=t[n],s=this.kernelSize.concat([r,4*this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let t;if(this.unitForgetBias){const n=this.biasInitializer,r=this.filters;t=new((e=class extends Th{apply(t,e){return gh([n.apply([r]),fa([r]),n.apply([2*r])])}}).className="CustomInit",e)}else t=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,t,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(t,e){return Wn(()=>{if(3!==t.length)throw new mc("ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got "+t.length+".");const n=e.training||!1,r=t[0],s=t[1],a=t[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Uf({ones:()=>ka(r),rate:this.dropout,training:n,count:4}));const i=this.dropoutMask,o=(t,e,n)=>e&&e[n]?Yn(e[n],t):t;let l=o(r,i,0),u=o(r,i,1),c=o(r,i,2),h=o(r,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Uf({ones:()=>ka(s),rate:this.recurrentDropout,training:n,count:4}));const p=this.recurrentDropoutMask;let d=o(s,p,0),f=o(s,p,1),m=o(s,p,2),g=o(s,p,3);const[y,b,x,w]=Ii(this.kernel.read(),4,3),[v,N,C,S]=this.useBias?Ii(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,v,this.padding),u=this.inputConv(u,b,N,this.padding),c=this.inputConv(c,x,C,this.padding),h=this.inputConv(h,w,S,this.padding);const[k,I,E,A]=Ii(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,k),f=this.recurrentConv(f,I),m=this.recurrentConv(m,E),g=this.recurrentConv(g,A);const T=this.recurrentActivation.apply(qn(l,d)),$=this.recurrentActivation.apply(qn(u,f)),R=qn(Yn($,a),Yn(T,this.activation.apply(qn(c,m)))),D=Yn(this.recurrentActivation.apply(qn(h,g)),this.activation.apply(R));return[D,D,R]})}getConfig(){const t=super.getConfig(),{units:e}=t,n=Gf(t,["units"]),r={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate};return Object.assign({},n,r)}inputConv(t,e,n,r){const s=Qr(t,e,this.strides,r||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Sh(s,n,this.dataFormat):s}recurrentConv(t,e){return Qr(t,e,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}jf.className="ConvLSTM2DCell",Rn(jf);class qf extends Hf{constructor(t){const e=new jf(t);super(Object.assign({},t,{cell:e}))}static fromConfig(t,e){return new t(e)}}qf.className="ConvLSTM2D",Rn(qf);class Kf extends dp{constructor(t){super(t),this.rate=Math.max(Math.min(t.rate,1),0),this.noiseShape=t.noiseShape,this.seed=t.seed,this.supportsMasking=!0}getNoiseShape(t){if(null==this.noiseShape)return this.noiseShape;const e=t.shape,n=[];for(let t=0;t<this.noiseShape.length;++t)n.push(null==this.noiseShape[t]?e[t]:this.noiseShape[t]);return n}call(t,e){return Wn(()=>{this.invokeCallHook(t,e);const n=np(t);if(0<this.rate&&this.rate<1){const t=null!=e.training&&e.training,r=this.getNoiseShape(n);return Ih(()=>kh(n,this.rate,r,this.seed),()=>n,t)}return t})}getConfig(){const t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},e=super.getConfig();return Object.assign(t,e),t}dispose(){return super.dispose()}}Kf.className="Dropout",Rn(Kf);class Xf extends Kf{constructor(t){super(t),this.inputSpec=[{ndim:3}]}getNoiseShape(t){const e=t.shape;return[e[0],1,e[2]]}}Xf.className="SpatialDropout1D",Rn(Xf);class Yf extends dp{constructor(t){if(super(t),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==t.batchInputShape&&null==t.inputShape&&null!=t.inputDim){let e=null;null!=t.batchSize&&(e=t.batchSize),this.batchInputShape=[e,t.inputDim]}this.units=t.units,_c(this.units,"units"),this.activation=Zd(t.activation),null!=t.useBias&&(this.useBias=t.useBias),this.kernelInitializer=Kh(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Kh(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Gc(t.kernelConstraint),this.biasConstraint=Gc(t.biasConstraint),this.kernelRegularizer=af(t.kernelRegularizer),this.biasRegularizer=af(t.biasRegularizer),this.activityRegularizer=af(t.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(t){const e=(t=rp(t))[t.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[e,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:e}}],this.built=!0}computeOutputShape(t){const e=(t=rp(t)).slice();return e[e.length-1]=this.units,e}call(t,e){return Wn(()=>{this.invokeCallHook(t,e);const n=np(t),r=Fc(this.activation.getClassName());let s;return null!=r?s=wh(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=wh(n,this.kernel.read()),null!=this.bias&&(s=Sh(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s})}getConfig(){const t={units:this.units,activation:Yd(this.activation),useBias:this.useBias,kernelInitializer:qh(this.kernelInitializer),biasInitializer:qh(this.biasInitializer),kernelRegularizer:rf(this.kernelRegularizer),biasRegularizer:rf(this.biasRegularizer),activityRegularizer:rf(this.activityRegularizer),kernelConstraint:Vc(this.kernelConstraint),biasConstraint:Vc(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}Yf.className="Dense",Rn(Yf);class Jf extends dp{constructor(t){super(t=t||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=t.dataFormat}computeOutputShape(t){t=rp(t);for(const e of t.slice(1))if(null==e)throw new mc(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[t[0],ih(t,1)]}call(t,e){return Wn(()=>{this.invokeCallHook(t,e);let n=np(t);if("channelsFirst"===this.dataFormat&&n.rank>1){const t=[0];for(let e=2;e<n.rank;++e)t.push(e);t.push(1),n=n.transpose(t)}return function(t){if(t.rank<=1)throw new mc(`batchFlatten requires a minimum rank of 2. Got rank: ${t.rank}.`);const e=[t.shape[0],ih(t.shape,1)];return t.reshape(e)}(n)})}getConfig(){const t={};null!=this.dataFormat&&(t.dataFormat=this.dataFormat);const e=super.getConfig();return Object.assign(t,e),t}}Jf.className="Flatten",Rn(Jf);class Zf extends dp{constructor(t){super(t),this.supportsMasking=!0,this.activation=Zd(t.activation)}call(t,e){return Wn(()=>{this.invokeCallHook(t,e);const n=np(t);return this.activation.apply(n)})}getConfig(){const t={activation:Yd(this.activation)},e=super.getConfig();return Object.assign(t,e),t}}Zf.className="Activation",Rn(Zf);class Qf extends dp{constructor(t){super(t),this.n=t.n,this.inputSpec=[{ndim:2}]}computeOutputShape(t){return[t[0],this.n,t[1]]}call(t,e){return Wn(()=>{return t=np(t),e=t,n=this.n,Wn(()=>{if(2!==e.shape.length)throw new mc(`repeat() expects a rank-2 tensor, but received a rank-${e.shape.length} tensor.`);return bh(ph(e,1),[1,n,1])});var e,n})}getConfig(){const t={n:this.n},e=super.getConfig();return Object.assign(t,e),t}}Qf.className="RepeatVector",Rn(Qf);class tm extends dp{constructor(t){super(t),this.targetShape=t.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(t){return t<0||null==t}fixUnknownDimension(t,e){const n="Total size of new array must be unchanged.",r=e.slice();let s=1,a=null;for(let t=0;t<r.length;++t){const e=r[t];if(this.isUnknown(e)){if(null!==a)throw new mc("Can only specifiy one unknown dimension.");a=t}else s*=e}const i=ih(t);if(null!==a){if(0===s||i%s!=0)throw new mc(n);r[a]=i/s}else if(i!==s)throw new mc(n);return r}computeOutputShape(t){let e=!1;for(let n=0;n<t.length;++n)if(this.isUnknown(t[n])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))}call(t,e){return Wn(()=>{this.invokeCallHook(t,e);const n=np(t),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return n.reshape(s)})}getConfig(){const t={targetShape:this.targetShape},e=super.getConfig();return Object.assign(t,e),t}}tm.className="Reshape",Rn(tm);class em extends dp{constructor(t){if(super(t),null==t.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error("Permute constructor requires `dims` to be an Array, but received "+t.dims+" instead.");const e=ch(1,t.dims.length+1);if(!C(t.dims.slice().sort(),e))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new lp({ndim:this.dims.length+1})]}computeOutputShape(t){const e=(t=rp(t)).slice();return this.dims.forEach((n,r)=>{e[r+1]=t[n]}),e}call(t,e){return Qe(np(t),this.dimsIncludingBatch)}getConfig(){const t={dims:this.dims},e=super.getConfig();return Object.assign(t,e),t}}em.className="Permute",Rn(em);class nm extends dp{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,this.maskValue=null!=t?null==t.maskValue?0:t.maskValue:0}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={maskValue:this.maskValue};return Object.assign(e,t),e}computeMask(t,e){const n=np(t);return cr(Ca(n,this.maskValue),-1)}call(t,e){return Wn(()=>{this.invokeCallHook(t,e);const n=np(t),r=cr(Ca(n,this.maskValue),-1,!0);return n.mul(r.asType(n.dtype))})}}nm.className="Masking",Rn(nm);class rm extends dp{constructor(t){if(super(t),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==t.batchInputShape&&null==t.inputShape){let e=null;null!=t.batchSize&&(e=t.batchSize),null==t.inputLength?this.batchInputShape=[e,null]:this.batchInputShape=[e].concat(Nc(t.inputLength))}this.inputDim=t.inputDim,_c(this.inputDim,"inputDim"),this.outputDim=t.outputDim,_c(this.outputDim,"outputDim"),this.embeddingsInitializer=Kh(t.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=af(t.embeddingsRegularizer),this.activityRegularizer=af(t.activityRegularizer),this.embeddingsConstraint=Gc(t.embeddingsConstraint),this.maskZero=t.maskZero,this.supportsMasking=t.maskZero,this.inputLength=t.inputLength}build(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(t){}computeMask(t,e){return Wn(()=>this.maskZero?(t=np(t),Ca(t,bs(t))):null)}computeOutputShape(t){if(t=rp(t),null==this.inputLength)return[...t,this.outputDim];const e=Nc(this.inputLength);if(e.length!==t.length-1)throw new mc(`"inputLength" is ${this.inputLength}, but received input shape has shape `+t);{let n=0;for(let r=0;r<e.length;++r){const s=e[r],a=t[r+1];if(null!=s&&null!=a&&s!==a)throw new mc(`"inputLength" is ${this.inputLength}, but received input shape has shape `+t);null==s&&(e[n]=a),n++}}return[t[0],...e,this.outputDim]}call(t,e){return Wn(()=>{this.invokeCallHook(t,e);let n=np(t);return"int32"!==n.dtype&&(n=hh(n,"int32")),vh(this.embeddings.read(),n.as1D()).reshape(rp(this.computeOutputShape(n.shape)))})}getConfig(){const t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:qh(this.embeddingsInitializer),embeddingsRegularizer:rf(this.embeddingsRegularizer),activityRegularizer:rf(this.activityRegularizer),embeddingsConstraint:Vc(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},e=super.getConfig();return Object.assign(t,e),t}}rm.className="Embedding",Rn(rm);class sm extends dp{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new gc}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const n=t.slice(0,t.length-e.length);for(let r=0;r<e.length;++r){const s=t[t.length-e.length+r],a=e[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new mc("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));n.push(s)}}return n}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[rp(t)]),(t=t).length<2)throw new mc(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const n of t)null!=n&&null!==n[0]&&e.push(n[0]);if(e=Tc(e),e.length>1)throw new mc(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let n=null==t[0]?null:t[0].slice(1);for(let e=1;e<t.length;++e){const r=null==t[e]?null:t[e].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}const r=t.map(t=>t.length);-1===t.indexOf(null)&&1===Tc(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(t,e){return Wn(()=>{if(t=t,this.reshapeRequired){const e=[],n=t.map(t=>t.rank);if(-1===n.indexOf(null)){const r=uh(n);for(let n of t){const t=n.rank;for(let e=0;e<r-t;++e)n=ph(n,1);e.push(n)}return this.mergeFunction(e)}{let n=!1;for(const r of t){const t=r.rank;if(null==t){const t=r.shape,s=t[0],a=t.slice(1).concat([s]);let i=r.reshape([s].concat(ih(t.slice(1))));i=Qe(i,[1,0]),i=i.reshape(a),e.push(i),n=!0}else if(t>1){const s=ch(1,t).concat([0]);e.push(Qe(r,s)),n=!0}else e.push(r)}let r=this.mergeFunction(e);const s=r.rank;if(n)if(null==s){const t=r.shape,e=t[t.length-1],n=[e].concat(t.slice(0,t.length-1));r=Qe(r.reshape([-1,e]),[1,0]).reshape(n)}else if(s>1){const t=[s-1].concat(ch(0,s-1));r=Qe(r,t)}return r}}return this.mergeFunction(t)})}computeOutputShape(t){let e;e=null==(t=t)[0]?null:t[0].slice(1);for(let n=1;n<t.length;++n){const r=null==t[n]?null:t[n].slice(1);e=this.computeElementwiseOpOutputShape(e,r)}let n=[];for(const e of t)null!=e&&null!==e[0]&&n.push(e[0]);return n=Tc(n),e=1===n.length?n.concat(e):[null].concat(e),e}computeMask(t,e){return Wn(()=>{if(null==e)return null;if(!Array.isArray(e))throw new mc("`mask` should be an Array");if(!Array.isArray(t))throw new mc("`inputs` should be an Array");if(e.length!==t.length)throw new mc(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(t=>null==t))return null;let n=(e=e.map(t=>null==t?t:Ss(t,0)))[0];for(let t=1;t<e.length-1;++t)n=ia(n,e[t]);return n})}}class am extends sm{constructor(t){super(t)}mergeFunction(t){return Wn(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=qn(e,t[n]);return e})}}am.className="Add",Rn(am);class im extends sm{constructor(t){super(t)}mergeFunction(t){return Wn(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=Yn(e,t[n]);return e})}}im.className="Multiply",Rn(im);class om extends sm{constructor(t){super(t)}mergeFunction(t){return Wn(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=qn(e,t[n]);return Yn(1/t.length,e)})}}om.className="Average",Rn(om);class lm extends sm{constructor(t){super(t)}mergeFunction(t){return Wn(()=>{let e=t[0];for(let n=1;n<t.length;++n)e=Ps(e,t[n]);return e})}}lm.className="Maximum",Rn(lm);class um extends sm{constructor(t){super(t)}mergeFunction(t){return Wn(()=>{let e=t[0];for(let n=1;n<t.length;++n)e=ya(e,t[n]);return e})}}um.className="Minimum",Rn(um);class cm extends sm{constructor(t){super(t),this.DEFAULT_AXIS=-1,null==t&&(t={}),this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!Array.isArray(t)||!Array.isArray(t[0])||1===t.length)throw new mc("A `Concatenate` layer should be called on a list of at least 2 inputs");t=t;let e=!0;for(const n of t)if(null!=n){e=!1;break}if(e)return;const n=[];for(let e=0;e<t.length;++e){const r=t[e].slice();r.splice(this.axis,1);let s=!1;for(const t of n)if(C(t,r)){s=!0;break}s||n.push(r)}if(n.length>1)throw new mc("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}mergeFunction(t){return Wn(()=>gh(t,this.axis))}computeOutputShape(t){if(!Array.isArray(t)||!Array.isArray(t[0]))throw new mc("A `Concatenate` layer should be called on a list of inputs.");const e=t,n=e[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const t of e.slice(1)){if(null==n[r]||null==t[r]){n[r]=null;break}n[r]+=t[r]}return n}computeMask(t,e){if(null==e)return null;if(!Array.isArray(e))throw new mc("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new mc("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new mc(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);return Wn(()=>{let n=!0;if(e.forEach(t=>{null==t||(n=!1)}),n)return null;const r=[];for(let n=0;n<t.length;++n)null==e[n]?r.push(ka(t[n]).asType("bool")):e[n].rank<t[n].rank?r.push(Ss(e[n],-1)):r.push(e[n]);const s=Or(r,this.axis);return ur(s,-1,!1)})}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function hm(t,e){for(;t<0;)t+=e;return t}cm.className="Concatenate",Rn(cm);class pm extends sm{constructor(t){super(t),this.axes=t.axes,this.normalize=null!=t.normalize&&t.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){b(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const e=t[0],n=t[1];if(e.length>3||n.length>3)throw new gc("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(e,n);if(e[r[0]]!==n[r[1]])throw new mc(`Dimension incompatibility: ${e[r[0]]} !== ${n[r[1]]}`)}mergeFunction(t){if(2!==t.length)throw new mc(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);let e,n=t[0],r=t[1];return e=Array.isArray(this.axes)?this.axes.map((e,n)=>hm(e,t[n].shape.length)):[hm(this.axes,n.shape.length),hm(this.axes,r.shape.length)],this.normalize&&(n=Ap(n,e[0]),r=Ap(r,e[1])),function(t,e,n){if(t.shape.length>3||e.shape.length>3)throw new gc("batchDot is not implemented for tensors of 4D or higher rank yet");if(b(t.shape.length>=2,()=>"batchDot requires the rank of x to be >= 2, but got "+t.shape.length),b(t.shape.length>=2,()=>"batchDot requires the rank of y to be >= 2, but got "+e.shape.length),"number"==typeof n&&(n=[n,n]),"complex64"===t.dtype||"complex64"===e.dtype)throw new gc("batchDot is not implemented for complex64-type Tensors yet.");const r=t.shape.length,s=e.shape.length;null==n&&(n=[r-1,s-2]);const a=n;return Wn(()=>{let n,i;if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else n=0;if(2===t.shape.length&&2===e.shape.length)i=a[0]===a[1]?t.mul(e).sum(a[0]):t.transpose([1,0]).mul(e).sum(a[1]);else{const n=a[0]!==t.shape.length-1,r=a[1]===e.shape.length-1;i=t.matMul(e,n,r)}if(n>0){let t;t=r>s?r+s-3:r-1;const e=[];for(let r=t;r<t+n;++r)e.push(r);i=i.squeeze(e)}return 1===i.shape.length&&(i=i.expandDims(1)),i})}(n,r,e)}interpretAxes(t,e){let n;return n=Array.isArray(this.axes)?this.axes:[hm(this.axes,t.length),hm(this.axes,e.length)],n}computeOutputShape(t){b(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const e=t[0].slice(),n=t[1].slice();if(e.length>3||n.length>3)throw new gc("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(e,n);e.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const s=e.concat(n);return 1===s.length&&s.push(1),s}computeMask(t,e){return null}getConfig(){const t={axes:this.axes,normalize:this.normalize},e=super.getConfig();return Object.assign(t,e),t}}pm.className="Dot",Rn(pm);class dm extends dp{constructor(t){super(t),this.supportsMasking=!0,this.stddev=t.stddev}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={stddev:this.stddev};return Object.assign(e,t),e}call(t,e){return Wn(()=>{this.invokeCallHook(t,e);const n=np(t);return Ih(()=>xh(n.shape,0,this.stddev).add(n),()=>n,e.training||!1)})}}dm.className="GaussianNoise",Rn(dm);class fm extends dp{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return Wn(()=>{this.invokeCallHook(t,e);const n=np(t);if(this.rate>0&&this.rate<1){return Ih(()=>{const t=Math.sqrt(this.rate/(1-this.rate));return n.mul(xh(n.shape,1,t))},()=>n,e.training||!1)}return n})}}fm.className="GaussianDropout",Rn(fm);class mm extends dp{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate,this.noiseShape=t.noiseShape}_getNoiseShape(t){return this.noiseShape||np(t).shape}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return Wn(()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(t);return Ih(()=>{const e=np(t),r=-1.7580993408473766;let s=Os(Za(n),this.rate);s=hh(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,i=-a*r*this.rate;return e.mul(s).add(s.add(-1).mul(r)).mul(a).add(i)},()=>np(t),e.training||!1)}return t})}}function gm(t,e,n,r,s,a=.001){let i;if(2===t.rank)i=Ur(t,e,n,r,s,a);else if(3===t.rank)i=Gr(t,e,n,r,s,a);else{if(4!==t.rank)throw new gc(`batchNormalization is not implemented for array of rank ${t.rank} yet`);i=Hr(t,e,n,r,s,a)}return i}function ym(t,e,n,r,s=.001){return C(r.slice().sort(),ch(0,t.rank-1))?function(t,e,n,r,s=.001){return Wn(()=>{const a=wa(t,r),i=a.mean,o=a.variance;return[gm(t,i,o,n,e,s),i,o]})}(t,e,n,r,s):function(t,e,n,r,s=.001){return Wn(()=>{const a=wa(t,r),i=a.mean,o=a.variance,l=[];for(const e of ch(0,t.rank))-1!==r.indexOf(e)?l.push(1):l.push(t.shape[e]);const u=i.reshape(l),c=o.reshape(l),h=null==e?null:e.reshape(l),p=null==n?null:n.reshape(l);return[gm(t,u,c,p,h,s),i,o]})}(t,e,n,r,s)}mm.className="AlphaDropout",Rn(mm);class bm extends dp{constructor(t){null==t&&(t={}),super(t),this.supportsMasking=!0,this.axis=null==t.axis?-1:t.axis,this.momentum=null==t.momentum?.99:t.momentum,this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=Kh(t.betaInitializer||"zeros"),this.gammaInitializer=Kh(t.gammaInitializer||"ones"),this.movingMeanInitializer=Kh(t.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Kh(t.movingVarianceInitializer||"ones"),this.betaConstraint=Gc(t.betaConstraint),this.gammaConstraint=Gc(t.gammaConstraint),this.betaRegularizer=af(t.betaRegularizer),this.gammaRegularizer=af(t.gammaRegularizer)}build(t){t=rp(t);const e=this.axis>=0?this.axis:this.axis+t.length,n=t[e];if(null==n)throw new mc(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape `+JSON.stringify(t)+".");this.inputSpec=[new lp({ndim:t.length,axes:{[e]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,e){return Wn(()=>{const n=null!=e.training&&e.training,r=np(t),s=r.shape,a=s.length,i=ch(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const l=bc(1,a);l[o]=s[o];const u=i.slice();u.sort();const c=!C(u,ch(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const t=this.movingMean.read().reshape(l),e=this.movingVariance.read().reshape(l),n=this.center?this.beta.read().reshape(l):null,s=this.scale?this.gamma.read().reshape(l):null;return gm(r,t,e,n,s,this.epsilon)}return gm(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,d]=ym(r,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(t,e,n)=>{Wn(()=>{const r=1-n,s=t.read(),a=s.sub(e).mul(r);t.write(s.sub(a))})};return(()=>{f(this.movingMean,p,this.momentum),f(this.movingVariance,d,this.momentum)})(),h})}getConfig(){const t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:qh(this.betaInitializer),gammaInitializer:qh(this.gammaInitializer),movingMeanInitializer:qh(this.movingMeanInitializer),movingVarianceInitializer:qh(this.movingVarianceInitializer),betaRegularizer:rf(this.betaRegularizer),gammaRegularizer:rf(this.gammaRegularizer),betaConstraint:Vc(this.betaConstraint),gammaConstraint:Vc(this.gammaConstraint)},e=super.getConfig();return Object.assign(t,e),t}}bm.className="BatchNormalization",Rn(bm);class xm extends dp{constructor(t){if(null==t&&(t={}),super(t),this.axis=null==t.axis?-1:t.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error("Expected axis to be an integer, but received "+this.axis)}else{if(!Array.isArray(this.axis))throw new Error("Expected axis to be an integer or an array of integers, but received "+JSON.stringify(this.axis));for(const t of this.axis)if(!Number.isInteger(t))throw new Error("Expected axis to be an array of integers, but received "+JSON.stringify(this.axis))}this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=Kh(t.betaInitializer||"zeros"),this.gammaInitializer=Kh(t.gammaInitializer||"ones"),this.betaRegularizer=af(t.betaRegularizer),this.gammaRegularizer=af(t.gammaRegularizer),this.supportsMasking=!0}build(t){const e=(t=rp(t)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let t=0;t<this.axis.length;++t)this.axis[t]<0&&(this.axis[t]+=e);for(const t of this.axis)if(t<0||t>=e)throw new Error("Invalid axis: "+t);if(this.axis.length!==Tc(this.axis).length)throw new Error("Found duplicate axes in: "+this.axis);const n=this.axis.map(e=>t[e]);this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(t,e){const n=np(t),r=n.shape,s=r.length;return Wn(()=>{let{mean:t,variance:e}=wa(n,this.axis,!0);const a=bc(1,s);for(const t of this.axis)a[t]=r[t];const i=t=>null!=t&&t.shape.length!==s&&this.axis!==[s-1]?t.reshape(a):t;let o=i(this.gamma.read()),l=i(this.beta.read());const u=[],c=[];for(let t=0;t<s;++t)-1!==this.axis.indexOf(t)?(u.push(r[t]),c.push(1)):(u.push(1),c.push(r[t]));return t=t.tile(u),e=e.tile(u),o=o.tile(c),l=l.tile(c),gm(n,t,e,l,o,this.epsilon)})}getConfig(){const t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:qh(this.betaInitializer),gammaInitializer:qh(this.gammaInitializer),betaRegularizer:rf(this.betaRegularizer),gammaRegularizer:rf(this.gammaRegularizer)},e=super.getConfig();return Object.assign(t,e),t}}xm.className="LayerNormalization",Rn(xm);class wm extends dp{constructor(t){if(null==t&&(t={}),super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,null==t.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof t.padding)this.padding=[[t.padding,t.padding],[t.padding,t.padding]];else{if(t.padding=t.padding,2!==t.padding.length)throw new mc(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);let e,n;if("number"==typeof t.padding[0])e=[t.padding[0],t.padding[0]],n=[t.padding[1],t.padding[1]];else{if(t.padding=t.padding,2!==t.padding[0].length)throw new mc(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);if(e=t.padding[0],2!==t.padding[1].length)throw new mc(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);n=t.padding[1]}this.padding=[e,n]}this.inputSpec=[new lp({ndim:4})]}computeOutputShape(t){let e,n;return t=rp(t),"channelsFirst"===this.dataFormat?(e=null!=t[2]&&t[2]>=0?t[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[3]&&t[3]>=0?t[3]+this.padding[1][0]+this.padding[1][1]:null,[t[0],t[1],e,n]):(e=null!=t[1]&&t[1]>=0?t[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[2]&&t[2]>=0?t[2]+this.padding[1][0]+this.padding[1][1]:null,[t[0],e,n,t[3]])}call(t,e){return Wn(()=>{return e=np(t),n=this.padding,r=this.dataFormat,Wn(()=>{if(4!==e.rank)throw new mc("temporalPadding expects input tensor to be 4-D, but received a "+e.rank+"-D tensor.");if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new mc("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new mc(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let t;return t="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],Ea(e,t)});var e,n,r})}getConfig(){const t={padding:this.padding,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}function vm(t,e,n,r,s,a){return Wn(()=>{let i;Jc(s),Qc(a),Zc(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),t=gf(t,s);const o="same"===r?"same":"valid";return i="max"===a?ca(t,e,n,o):Rr(t,e,n,o),"channelsFirst"===s&&(i=Qe(i,[0,3,1,2])),i})}function Nm(t,e,n,r,s,a){return Wn(()=>{let i;Jc(s),Qc(a),Zc(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),t=yf(t,s);const o="same"===r?"same":"valid";return i="max"===a?ha(t,e,n,o):Dr(t,e,n,o),"channelsFirst"===s&&(i=Qe(i,[0,4,1,2,3])),i})}wm.className="ZeroPadding2D",Rn(wm);class Cm extends dp{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new mc("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.poolSize));this.poolSize=t.poolSize}if(_c(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new mc("strides for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.strides));this.strides=t.strides}_c(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,Zc(this.padding),this.inputSpec=[new lp({ndim:3})]}computeOutputShape(t){const e=ff((t=rp(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return Wn(()=>{this.invokeCallHook(t,e),t=ph(np(t),2);const n=this.poolingFunction(np(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return $i(n,[2])})}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}class Sm extends Cm{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Jc(s),Zc(r),vm(t,e,n,r,s,"max")}}Sm.className="MaxPooling1D",Rn(Sm);class km extends Cm{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Jc(s),Zc(r),vm(t,e,n,r,s,"avg")}}km.className="AveragePooling1D",Rn(km);class Im extends dp{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new mc("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length "+t.strides.length+".");this.strides=t.strides}else this.strides=[t.strides,t.strides];_c(this.poolSize,"poolSize"),_c(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Jc(this.dataFormat),Zc(this.padding),this.inputSpec=[new lp({ndim:4})]}computeOutputShape(t){t=rp(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2];return e=ff(e,this.poolSize[0],this.padding,this.strides[0]),n=ff(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n]:[t[0],e,n,t[3]]}call(t,e){return Wn(()=>(this.invokeCallHook(t,e),this.poolingFunction(np(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Em extends Im{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Jc(s),Zc(r),vm(t,e,n,r,s,"max")}}Em.className="MaxPooling2D",Rn(Em);class Am extends Im{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Jc(s),Zc(r),vm(t,e,n,r,s,"avg")}}Am.className="AveragePooling2D",Rn(Am);class Tm extends dp{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new mc("If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length "+t.strides.length+".");this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];_c(this.poolSize,"poolSize"),_c(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Jc(this.dataFormat),Zc(this.padding),this.inputSpec=[new lp({ndim:5})]}computeOutputShape(t){t=rp(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[4]:t[3];return e=ff(e,this.poolSize[0],this.padding,this.strides[0]),n=ff(n,this.poolSize[1],this.padding,this.strides[1]),r=ff(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n,r]:[t[0],e,n,r,t[4]]}call(t,e){return Wn(()=>(this.invokeCallHook(t,e),this.poolingFunction(np(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class $m extends Tm{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Jc(s),Zc(r),Nm(t,e,n,r,s,"max")}}$m.className="MaxPooling3D",Rn($m);class Rm extends Tm{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Jc(s),Zc(r),Nm(t,e,n,r,s,"avg")}}Rm.className="AveragePooling3D",Rn(Rm);class Dm extends dp{constructor(t){super(t),this.inputSpec=[new lp({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new gc}}class _m extends Dm{constructor(t){super(t||{})}call(t,e){return Wn(()=>{const e=np(t);return ma(e,1)})}}_m.className="GlobalAveragePooling1D",Rn(_m);class Fm extends Dm{constructor(t){super(t||{})}call(t,e){return Wn(()=>{const e=np(t);return ea(e,1)})}}Fm.className="GlobalMaxPooling1D",Rn(Fm);class Om extends dp{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Jc(this.dataFormat),this.inputSpec=[new lp({ndim:4})]}computeOutputShape(t){return t=t,"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new gc}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Mm extends Om{call(t,e){return Wn(()=>{const e=np(t);return"channelsLast"===this.dataFormat?ma(e,[1,2]):ma(e,[2,3])})}}Mm.className="GlobalAveragePooling2D",Rn(Mm);class zm extends Om{call(t,e){return Wn(()=>{const e=np(t);return"channelsLast"===this.dataFormat?ea(e,[1,2]):ea(e,[2,3])})}}zm.className="GlobalMaxPooling2D",Rn(zm);class Lm extends dp{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,n={}){const r=Ep(e.layer,n);delete e.layer;const s={layer:r};return Object.assign(s,e),new t(s)}}class Bm extends Lm{constructor(t){super(t),this.supportsMasking=!0}build(t){if((t=rp(t)).length<3)throw new mc("TimeDistributed layer expects an input shape >= 3D, but received input shape "+JSON.stringify(t));this.inputSpec=[{shape:t}];const e=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(e),this.layer.built=!0),super.build(t)}computeOutputShape(t){const e=[(t=rp(t))[0]].concat(t.slice(2)),n=this.layer.computeOutputShape(e),r=t[1];return[n[0],r].concat(n.slice(1))}call(t,e){return Wn(()=>_f((t,n)=>[np(this.layer.call(t,e)),[]],t=np(t),[],!1,null,null,!1,!0)[1])}}Bm.className="TimeDistributed",Rn(Bm);class Pm extends Lm{constructor(t){super(t);const e=t.layer.getConfig(),n={};n.className=t.layer.getClassName(),n.config=e,this.forwardLayer=Ep(n),e.goBackwards=!0!==e.goBackwards;const r={};var s;if(r.className=t.layer.getClassName(),r.config=e,this.backwardLayer=Ep(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===t.mergeMode?"concat":t.mergeMode,s=this.mergeMode,Rc(Xc,"BidirectionalMergeMode",s),t.weights)throw new gc("weights support is not implemented for Bidirectional layer yet.");this._stateful=t.layer.stateful,this.returnSequences=t.layer.returnSequences,this.returnState=t.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=t.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(t){this._trainable=t,null!=this.forwardLayer&&(this.forwardLayer.trainable=t),null!=this.backwardLayer&&(this.backwardLayer.trainable=t)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(t){const e=t.length,n=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,n)),this.backwardLayer.setWeights(t.slice(n))}computeOutputShape(t){let e,n,r,s=this.forwardLayer.computeOutputShape(t);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),s=s,this.returnState?(r=s.slice(1),e=s[0]):e=s[0],e=e,"concat"===this.mergeMode?(e[e.length-1]*=2,n=[e]):n=null==this.mergeMode?[e,e.slice()]:[e],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[e].concat(r).concat(r.slice()):vc(n)}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=Df(t,n,r,this.numConstants);if(t=s.inputs,n=s.initialState,r=s.constants,Array.isArray(t)&&(n=t.slice(1),t=t[0]),(null==n||0===n.length)&&null==r)return super.apply(t,e);const a=[],i=[];if(null!=n){const t=n.length;if(t%2>0)throw new mc("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");e.initialState=n,a.push(...n);const r=n.map(t=>new lp({shape:t.shape}));this.forwardLayer.stateSpec=r.slice(0,t/2),this.backwardLayer.stateSpec=r.slice(t/2),i.push(...r)}if(null!=r)throw new gc("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof up;for(const t of a)if(t instanceof up!==o)throw new mc("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[t].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,e);return this.inputSpec=s,o}return super.apply(t,e)}call(t,e){return Wn(()=>{const n=e.initialState;let r,s,a,i;if(null==n)r=this.forwardLayer.call(t,e),s=this.backwardLayer.call(t,e);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);r=this.forwardLayer.call(t,Object.assign(e,{initialState:a})),s=this.backwardLayer.call(t,Object.assign(e,{initialState:i}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=si(s,1)),"concat"===this.mergeMode?i=gh([r,s]):"sum"===this.mergeMode?i=qn(r,s):"ave"===this.mergeMode?i=Yn(.5,qn(r,s)):"mul"===this.mergeMode?i=Yn(r,s):null==this.mergeMode&&(i=[r,s]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i})}resetStates(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(t){eh(this.forwardLayer.name,()=>{this.forwardLayer.build(t)}),eh(this.backwardLayer.name,()=>{this.backwardLayer.build(t)}),this.built=!0}computeMask(t,e){let n;if(Array.isArray(e)&&(e=e[0]),n=this.returnSequences?null==this.mergeMode?[e,e]:e:null==this.mergeMode?[null,null]:null,this.returnState){const t=this.forwardLayer.states.map(t=>null);return Array.isArray(n)?n.concat(t).concat(t):[n].concat(t).concat(t)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(t),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(t)}getConfig(){const t={mergeMode:this.mergeMode},e=super.getConfig();return Object.assign(t,e),t}static fromConfig(t,e){const n=Ep(e.layer);if(delete e.layer,null!=e.numConstants)throw new gc("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=e;return r.layer=n,new t(r)}}function Wm(t){return new km(t)}function Vm(t){return new Am(t)}function Um(t){return new Rm(t)}function Gm(t){return new Fm(t)}function Hm(t){return new zm(t)}function jm(t){return new Sm(t)}function qm(t){return new Em(t)}Pm.className="Bidirectional",Rn(Pm);const Km=Gm,Xm=Hm,Ym=jm,Jm=qm;var Zm=Object.freeze({__proto__:null,inputLayer:function(t){return new fp(t)},elu:function(t){return new cf(t)},reLU:function(t){return new of(t)},leakyReLU:function(t){return new lf(t)},prelu:function(t){return new uf(t)},softmax:function(t){return new pf(t)},thresholdedReLU:function(t){return new hf(t)},conv1d:function(t){return new Af(t)},conv2d:function(t){return new Cf(t)},conv2dTranspose:function(t){return new kf(t)},conv3d:function(t){return new Sf(t)},separableConv2d:function(t){return new Ef(t)},cropping2D:function(t){return new Tf(t)},upSampling2d:function(t){return new $f(t)},depthwiseConv2d:function(t){return new Rf(t)},activation:function(t){return new Zf(t)},dense:function(t){return new Yf(t)},dropout:function(t){return new Kf(t)},spatialDropout1d:function(t){return new Xf(t)},flatten:function(t){return new Jf(t)},repeatVector:function(t){return new Qf(t)},reshape:function(t){return new tm(t)},permute:function(t){return new em(t)},embedding:function(t){return new rm(t)},add:function(t){return new am(t)},average:function(t){return new om(t)},concatenate:function(t){return new cm(t)},maximum:function(t){return new lm(t)},minimum:function(t){return new um(t)},multiply:function(t){return new im(t)},dot:function(t){return new pm(t)},batchNormalization:function(t){return new bm(t)},layerNormalization:function(t){return new xm(t)},zeroPadding2d:function(t){return new wm(t)},averagePooling1d:Wm,avgPool1d:function(t){return Wm(t)},avgPooling1d:function(t){return Wm(t)},averagePooling2d:Vm,avgPool2d:function(t){return Vm(t)},avgPooling2d:function(t){return Vm(t)},averagePooling3d:Um,avgPool3d:function(t){return Um(t)},avgPooling3d:function(t){return Um(t)},globalAveragePooling1d:function(t){return new _m(t)},globalAveragePooling2d:function(t){return new Mm(t)},globalMaxPooling1d:Gm,globalMaxPooling2d:Hm,maxPooling1d:jm,maxPooling2d:qm,maxPooling3d:function(t){return new $m(t)},gru:function(t){return new Bf(t)},gruCell:function(t){return new Lf(t)},lstm:function(t){return new Wf(t)},lstmCell:function(t){return new Pf(t)},simpleRNN:function(t){return new zf(t)},simpleRNNCell:function(t){return new Mf(t)},convLstm2d:function(t){return new qf(t)},convLstm2dCell:function(t){return new jf(t)},rnn:function(t){return new Ff(t)},stackedRNNCells:function(t){return new Vf(t)},bidirectional:function(t){return new Pm(t)},timeDistributed:function(t){return new Bm(t)},globalMaxPool1d:Km,globalMaxPool2d:Xm,maxPool1d:Ym,maxPool2d:Jm,Layer:dp,RNN:Ff,RNNCell:Of,input:Md,gaussianNoise:function(t){return new dm(t)},gaussianDropout:function(t){return new fm(t)},alphaDropout:function(t){return new mm(t)},masking:function(t){return new nm(t)}});var Qm=Object.freeze({__proto__:null,binaryAccuracy:function(t,e){return Pp(t,e)},binaryCrossentropy:function(t,e){return Hp(t,e)},sparseCategoricalAccuracy:function(t,e){return jp(t,e)},categoricalAccuracy:function(t,e){return Wp(t,e)},categoricalCrossentropy:function(t,e){return qp(t,e)},precision:function(t,e){return Up(t,e)},recall:function(t,e){return Gp(t,e)},cosineProximity:function(t,e){return zp(t,e)},meanAbsoluteError:function(t,e){return $p(t,e)},meanAbsolutePercentageError:function(t,e){return Rp(t,e)},MAPE:function(t,e){return Rp(t,e)},mape:function(t,e){return Rp(t,e)},meanSquaredError:function(t,e){return Tp(t,e)},MSE:function(t,e){return Tp(t,e)},mse:function(t,e){return Tp(t,e)}}),tg=Object.freeze({__proto__:null,modelFromJSON:async function(t,e){"modelTopology"in t||(t={modelTopology:t});let n=(t=t).modelTopology;null!=n.model_config&&(n=n.model_config);const r=Ep(sd(n),e);if(null!=t.weightsManifest){const e=await Pe(t.weightsManifest,t.pathPrefix,r.weights.map(t=>t.originalName)),n={};for(const t of r.weights)n[t.originalName]=e[t.originalName];r.loadWeights(n),Vn(e)}return r}});var eg=Object.freeze({__proto__:null,l1l2:function(t){return new ef(t)},l1:function(t){return Qd(e=t),new ef({l1:null!=e?e.l1:null,l2:0});var e},l2:function(t){return Qd(e=t),new ef({l2:null!=e?e.l2:null,l1:0});var e}});class ng extends xp{constructor(){super(...arguments),this.model=null}setModel(t){if(!(t instanceof Dd))throw new Error("model must be a LayersModel, not some other Container");this.model=t}}function rg(t,e){return t<e}function sg(t,e){return t>e}class ag extends ng{constructor(t){if(super(),null==t&&(t={}),t.restoreBestWeights)throw new gc("restoreBestWeights = True is not implemented in EarlyStopping yet.");this.monitor=t.monitor||"val_loss",this.minDelta=Math.abs(t.minDelta||0),this.patience=t.patience||0,this.verbose=t.verbose||0,this.mode=t.mode||"auto",this.baseline=t.baseline,-1===["auto","min","max"].indexOf(this.mode)&&(console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`),this.mode="auto"),"min"===this.mode?this.monitorFunc=rg:"max"===this.mode||-1!==this.monitor.indexOf("acc")?this.monitorFunc=sg:this.monitorFunc=rg,this.monitorFunc===rg&&(this.minDelta*=-1)}async onTrainBegin(t){this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===rg?1/0:-1/0}async onEpochEnd(t,e){await gp(e);const n=this.getMonitorValue(e);null!=n&&(this.monitorFunc(n-this.minDelta,this.best)?(this.best=n,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=t,this.model.stopTraining=!0)))}async onTrainEnd(t){this.stoppedEpoch>0&&this.verbose&&console.log(`Epoch ${this.stoppedEpoch}: early stopping.`)}getMonitorValue(t){null==t&&(t={});const e=t[this.monitor];return null==e&&console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: `+Object.keys(t)),e}}const ig={earlyStopping:function(t){return new ag(t)}};var og,lg;!function(t){t[t.DT_INVALID=0]="DT_INVALID",t[t.DT_FLOAT=1]="DT_FLOAT",t[t.DT_DOUBLE=2]="DT_DOUBLE",t[t.DT_INT32=3]="DT_INT32",t[t.DT_UINT8=4]="DT_UINT8",t[t.DT_INT16=5]="DT_INT16",t[t.DT_INT8=6]="DT_INT8",t[t.DT_STRING=7]="DT_STRING",t[t.DT_COMPLEX64=8]="DT_COMPLEX64",t[t.DT_INT64=9]="DT_INT64",t[t.DT_BOOL=10]="DT_BOOL",t[t.DT_QINT8=11]="DT_QINT8",t[t.DT_QUINT8=12]="DT_QUINT8",t[t.DT_QINT32=13]="DT_QINT32",t[t.DT_BFLOAT16=14]="DT_BFLOAT16",t[t.DT_FLOAT_REF=101]="DT_FLOAT_REF",t[t.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",t[t.DT_INT32_REF=103]="DT_INT32_REF",t[t.DT_UINT8_REF=104]="DT_UINT8_REF",t[t.DT_INT16_REF=105]="DT_INT16_REF",t[t.DT_INT8_REF=106]="DT_INT8_REF",t[t.DT_STRING_REF=107]="DT_STRING_REF",t[t.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",t[t.DT_INT64_REF=109]="DT_INT64_REF",t[t.DT_BOOL_REF=110]="DT_BOOL_REF",t[t.DT_QINT8_REF=111]="DT_QINT8_REF",t[t.DT_QUINT8_REF=112]="DT_QUINT8_REF",t[t.DT_QINT32_REF=113]="DT_QINT32_REF",t[t.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(og||(og={})),function(t){let e;!function(t){t[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(e=t.CheckpointFormatVersion||(t.CheckpointFormatVersion={}))}(lg||(lg={}));const ug={};function cg(t){return ug[t]}function hg(t,e,n,r){const s=e.inputParams[t];if(s&&void 0!==s.inputIndexStart){const t=s.inputIndexStart,a=0===s.inputIndexEnd?void 0:void 0===s.inputIndexEnd?t+1:s.inputIndexEnd;if("tensor"===s.type)return pg(e.inputNames[s.inputIndexStart],n,r);if("tensors"===s.type){return e.inputNames.slice(t,a).map(t=>pg(t,n,r))}const i=pg(e.inputNames.slice(t)[0],n,r),o=i.dataSync();return"number"===s.type?o[0]:K(i.shape,o)}const a=e.attrParams[t];return a&&a.value}function pg(t,e,n){const[r,s]=mg(t),a=n.currentContextIds.find(t=>!!e[fg(r,t)]);return void 0!==a?e[fg(r,a)][s]:void 0}function dg(t,e){const[n,r]=mg(t);return[fg(n,e&&e.currentContextId),r]}function fg(t,e){return e?`${t}-${e}`:t}function mg(t){const e=t.split(":");return 1===e.length?[t,0]:[e[0],Number(e[e.length-1])]}function gg(t,e,n){let r=hg("pad",t,e,n);if("explicit"===r){r=hg("explicitPaddings",t,e,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let t=0;t<4;t++)s[t][0]=r[2*t],s[t][1]=r[2*t+1];return s}return r}function yg(t){return t.kept?t:_e(t)}var bg=Object.freeze({__proto__:null,json:[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var xg=Object.freeze({__proto__:null,json:[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"clip_value_min",name:"clipValueMin",type:"number"},{tfName:"clip_value_max",name:"clipValueMax",type:"number"}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"clipValueMin",name:"clipValueMin",type:"number",defaultValue:0},{tfName:"clipValueMax",name:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var wg=Object.freeze({__proto__:null,json:[{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}]});var vg=Object.freeze({__proto__:null,json:[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]});var Ng=Object.freeze({__proto__:null,json:[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]});var Cg=Object.freeze({__proto__:null,json:[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var Sg=Object.freeze({__proto__:null,json:[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]}]});var kg=Object.freeze({__proto__:null,json:[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]});var Ig=Object.freeze({__proto__:null,json:[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}]});var Eg=Object.freeze({__proto__:null,json:[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var Ag=Object.freeze({__proto__:null,json:[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var Tg=Object.freeze({__proto__:null,json:[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]});var $g=Object.freeze({__proto__:null,json:[{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]});var Rg=Object.freeze({__proto__:null,json:[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool",notSupported:!0}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]});var Dg=Object.freeze({__proto__:null,json:[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]});var _g=Object.freeze({__proto__:null,json:[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}]});class Fg{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const t=[].concat(...[bg,xg,wg,vg,Ng,Cg,Sg,Eg,Ig,kg,Ag,Tg,$g,Rg,Dg,_g].map(t=>t.json));this.opMappers=t.reduce((t,e)=>(t[e.tfOpName]=e,t),{})}transformGraph(t,e={}){const n=t.node,r=[],s=[],a=n.reduce((t,e)=>(t[e.name]=this.mapNode(e),e.op.startsWith("Placeholder")&&r.push(t[e.name]),"Const"===e.op&&s.push(t[e.name]),t),{});let i=[];const o=[];let l={},u={};null!=e&&(l=this.mapSignatureEntries(e.inputs),u=this.mapSignatureEntries(e.outputs));const c=Object.keys(a);c.forEach(t=>{const e=a[t];e.inputNames.forEach(t=>{const[n]=dg(t);e.inputs.push(a[n]),a[n].children.push(e)})}),0===Object.keys(u).length?c.forEach(t=>{const e=a[t];0===e.children.length&&o.push(e)}):Object.keys(u).forEach(t=>{const[e]=dg(t),n=a[e];null!=n&&(n.signatureKey=u[t],o.push(n))}),Object.keys(l).length>0?Object.keys(l).forEach(t=>{const[e]=dg(t),n=a[e];n&&(n.signatureKey=l[t],i.push(n))}):i=r;let h={};return null!=t.library&&null!=t.library.function&&(h=t.library.function.reduce((t,e)=>(t[e.signature.name]=this.mapFunction(e),t),{})),{nodes:a,inputs:i,outputs:o,weights:s,placeholders:r,signature:e,functions:h}}mapSignatureEntries(t){return Object.keys(t||{}).reduce((e,n)=>(e[t[n].name]=n,e),{})}mapNode(t){const e=cg(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const n={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map(t=>t.startsWith("^")?t.substr(1):t),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr};return null!=e.inputs&&(n.inputParams=e.inputs.reduce((t,e)=>(t[e.name]={type:e.type,inputIndexStart:e.start,inputIndexEnd:e.end},t),{})),null!=e.attrs&&(n.attrParams=e.attrs.reduce((e,n)=>{const r=n.type;let s=void 0;switch(n.type){case"string":s=Mg(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Mg(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=jg(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=jg(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=Lg(t.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=Lg(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=Hg(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Hg(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=zg(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=zg(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=Kg(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Kg(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=Gg(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Gg(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=qg(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=qg(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=Wg(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Wg(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=Vg(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Vg(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=Pg(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Pg(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${t.op}`)}return e[n.name]={value:s,type:r},e},{})),n}mapFunction(t){const e=t.nodeDef,n=[];let r={};null!=e&&(r=e.reduce((t,e)=>(t[e.name]=this.mapNode(e),"Const"===e.op&&n.push(t[e.name]),t),{}));const s=[],a=[];t.signature.inputArg.forEach(t=>{const[e]=dg(t.name),n={name:e,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Bg(t.type),type:"dtype"}},children:[]};n.signatureKey=t.name,s.push(n),r[e]=n}),Object.keys(r).forEach(t=>{const e=r[t];e.inputNames.forEach(t=>{const[n]=dg(t);e.inputs.push(r[n]),r[n].children.push(e)})});const i=t.ret;t.signature.outputArg.forEach(t=>{const[e,n]=dg(i[t.name]),s=r[e];null!=s&&(s.defaultOutput=n,a.push(s))});const o=this.mapArgsToSignature(t);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce((t,e)=>(t[e.name]=this.mapArgToTensorInfo(e),t),{}),outputs:t.signature.outputArg.reduce((e,n)=>(e[n.name]=this.mapArgToTensorInfo(n,t.ret),e),{})}}mapArgToTensorInfo(t,e){let n=t.name;return null!=e&&(n=e[n]),{name:n,dtype:t.type}}}function Og(t,e){const r=Array.isArray(t)?String.fromCharCode.apply(null,t):function(t){const e=n().global;if(void 0!==e.atob)return e.atob(t);if("undefined"!=typeof Buffer)return new Buffer(t,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(t);return e?r:r.toLowerCase()}function Mg(t,e,n,r=!1){const s=t[e];return null!=s?Og(s.s,r):n}function zg(t,e,n){const r=t[e];return r?r.b:n}function Lg(t,e,n){const r=t[e]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function Bg(t){switch("string"==typeof t&&(t=og[t]),t){case og.DT_FLOAT:return"float32";case og.DT_INT32:case og.DT_INT64:case og.DT_INT8:case og.DT_UINT8:return"int32";case og.DT_BOOL:return"bool";case og.DT_DOUBLE:return"float32";case og.DT_STRING:return"string";default:return null}}function Pg(t,e,n){const r=t[e];return r&&r.func?r.func.name:n}function Wg(t,e,n){const r=t[e];return r&&r.type?Bg(r.type):n}function Vg(t,e,n){const r=t[e];return r&&r.list&&r.list.type?r.list.type.map(t=>Bg(t)):n}function Ug(t){if(!t.unknownRank)return null!=t.dim?t.dim.map(t=>"number"==typeof t.size?t.size:parseInt(t.size,10)):[]}function Gg(t,e,n){const r=t[e];return r&&r.shape?Ug(r.shape):n}function Hg(t,e,n){const r=t[e];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map(t=>"number"==typeof t?t:parseInt(t,10)):n}function jg(t,e,n,r=!1){const s=t[e];return s&&s.list&&s.list.s?s.list.s.map(t=>Og(t,r)):n}function qg(t,e,n){const r=t[e];return r&&r.list&&r.list.shape?r.list.shape.map(t=>Ug(t)):n}function Kg(t,e,n){const r=t[e];return r&&r.list&&r.list.b?r.list.b:n}class Xg{constructor(t,e,n){this.node=t,this.tensorMap=e,this.context=n,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map(t=>this.getInput(t)),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce((t,e)=>(t[e]=this.getAttr(e),t),{}))}getInput(t){return pg(t,this.tensorMap,this.context)}getAttr(t,e){const n=this.node.rawAttrs[t];if(null!=n.tensor)return pg(t,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Lg(this.node.rawAttrs,t,e);if(null!=n.s)return Mg(this.node.rawAttrs,t,e);if(null!=n.b)return zg(this.node.rawAttrs,t,e);if(null!=n.shape)return Gg(this.node.rawAttrs,t,e);if(null!=n.type)return Wg(this.node.rawAttrs,t,e);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Hg(this.node.rawAttrs,t,e);if(null!=n.list.s)return jg(this.node.rawAttrs,t,e);if(null!=n.list.shape)return qg(this.node.rawAttrs,t,e);if(null!=n.list.b)return Kg(this.node.rawAttrs,t,e);if(null!=n.list.type)return Vg(this.node.rawAttrs,t,e)}return e}}function Yg(t,e,n=""){b(function(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(-1!==t[n]&&-1!==e[n]&&t[n]!==e[n])return!1;return!0}(t,e),()=>n+` Shapes ${t} and ${e} must match`)}class Jg{constructor(t,e,n,r,s,a,i){this.name=t,this.dtype=e,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=Ws(0),Un(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach(e=>{null!=t&&t.has(e.tensor.id)||e.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map(t=>this.read(t))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=e.shape),Yg(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);n.tensor=e,Un(e),n.written=!0,this.tensors[t]=n}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach((t,n)=>this.write(t,e[n]))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let e=0;e<this.size();e++)t.push(e)}if(0===t.length)return Kt([],[0].concat(this.elementShape));const n=this.readMany(t);return Yg(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Ri(n,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return Kt([],[0].concat(this.elementShape));const e=[];for(let t=0;t<this.size();t++)e.push(t);const n=this.readMany(e);return Yg(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),Or(n,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const n=Math.max(...t);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(t,Pi(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let n=0;const r=t.map(t=>(n+=t,n));if(n!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:e.size/n,a=[];Wn(()=>{e=Ye(e,[1,n,s]);for(let n=0;n<t.length;++n){const i=[0,0===n?0:r[n-1],0],o=[1,t[n],s];a[n]=Ye(zr(e,i,o),this.elementShape)}return a});const i=[];for(let e=0;e<t.length;e++)i[e]=e;this.writeMany(i,a)}}class Zg{constructor(t,e,n,r=-1){this.tensors=t,this.elementShape=e,this.elementDtype=n,null!=t&&t.forEach(t=>{if(n!==t.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${t.dtype}`);Yg(e,t.shape,"TensorList shape mismatch: "),Un(t)}),this.idTensor=Ws(0),this.maxNumElements=r,Un(this.idTensor)}get id(){return this.idTensor.id}copy(){return new Zg([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach(e=>{null!=t&&t.has(e.id)||e.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,n=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);return Yg(t,this.elementShape,"TensorList shape mismatch: "),Wn(()=>{const e=this.tensors.map(e=>Ye(e,t));return Ri(e,0)})}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=this.tensors.pop();return Yg(n.shape,t,"TensorList shape mismatch: "),Ye(n,t)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(Yg(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Un(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error("TensorListResize expects size to be non-negative. Got: "+t);if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=t}getItem(t,e,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[t])throw new Error(`element at index ${t} is null.`);return Yg(this.tensors[t].shape,e,"TensorList shape mismatch: "),this.tensors[t]}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);Yg(this.elementShape,e.shape,"TensorList shape mismatch: "),Un(e),this.tensors[t]=e}gather(t,e,n){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);return Yg(this.elementShape,n,"TensorList shape mismatch: "),0===(t=t.slice(0,this.size())).length?Kt([],[0].concat(this.elementShape)):Wn(()=>{const e=t.map(t=>Ye(this.tensors[t],n));return Ri(e,0)})}concat(t,e){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);return Yg(this.elementShape,e,"TensorList shape mismatch: "),0===this.size()?Kt([],[0].concat(this.elementShape)):Wn(()=>{const t=this.tensors.map(t=>Ye(t,e));return Or(t,0)})}}const Qg=async(t,e,n)=>{switch(t.op){case"If":case"StatelessIf":{const r=hg("thenBranch",t,e,n),s=hg("elseBranch",t,e,n),a=hg("cond",t,e,n),i=hg("args",t,e,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=hg("body",t,e,n),s=hg("cond",t,e,n),a=hg("args",t,e,n),i=await n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map(t=>t.id);let l=await i[0].data();i.forEach(t=>{t.kept||-1!==o.indexOf(t.id)||t.dispose()});let u=a;for(;l[0];){const t=u;u=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const e=u.map(t=>t.id);t.forEach(t=>{t.kept||-1!==o.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()});const a=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await a[0].data(),a.forEach(t=>{t.kept||-1!==o.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()})}return u}case"LoopCond":return[yg(hg("pred",t,e,n))];case"Switch":{const r=hg("pred",t,e,n);let s=hg("data",t,e,n);return s.kept||(s=yg(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=t.inputNames.find(t=>void 0!==pg(t,e,n));if(r){return[yg(pg(r,e,n))]}return}case"Enter":{const r=hg("frameName",t,e,n),s=hg("tensor",t,e,n);return n.enterFrame(r),[yg(s)]}case"Exit":{const r=hg("tensor",t,e,n);return n.exitFrame(),[yg(r)]}case"NextIteration":{const r=hg("tensor",t,e,n);return n.nextIteration(),[yg(r)]}case"TensorArrayV3":{const r=hg("size",t,e,n),s=hg("dtype",t,e,n),a=hg("elementShape",t,e,n),i=hg("dynamicSize",t,e,n),o=hg("clearAfterRead",t,e,n),l=hg("identicalElementShapes",t,e,n),u=hg("name",t,e,n),c=new Jg(u,s,r,a,l,i,o);return n.addTensorArray(c),[c.idTensor,Ws(1)]}case"TensorArrayWriteV3":{const r=hg("tensorArrayId",t,e,n),s=hg("index",t,e,n),a=hg("tensor",t,e,n),i=n.getTensorArray(r.id);return i.write(s,a),[i.idTensor]}case"TensorArrayReadV3":{const r=hg("tensorArrayId",t,e,n),s=hg("index",t,e,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=hg("tensorArrayId",t,e,n),s=hg("indices",t,e,n),a=hg("dtype",t,e,n);return[n.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=hg("tensorArrayId",t,e,n),s=hg("indices",t,e,n),a=hg("tensor",t,e,n),i=n.getTensorArray(r.id);return i.scatter(s,a),[i.idTensor]}case"TensorArrayConcatV3":{const r=hg("tensorArrayId",t,e,n),s=n.getTensorArray(r.id),a=hg("dtype",t,e,n);return[s.concat(a)]}case"TensorArraySplitV3":{const r=hg("tensorArrayId",t,e,n),s=hg("tensor",t,e,n),a=hg("lengths",t,e,n),i=n.getTensorArray(r.id);return i.split(a,s),[i.idTensor]}case"TensorArraySizeV3":{const r=hg("tensorArrayId",t,e,n);return[Ws(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=hg("tensorArrayId",t,e,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=hg("tensorListId",t,e,n),s=hg("index",t,e,n),a=hg("tensor",t,e,n),i=n.getTensorList(r.id);return i.setItem(s,a),[i.idTensor]}case"TensorListGetItem":{const r=hg("tensorListId",t,e,n),s=hg("index",t,e,n),a=hg("elementShape",t,e,n),i=hg("elementDType",t,e,n);return[n.getTensorList(r.id).getItem(s,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const r=hg("indices",t,e,n),s=function(t,e,n,r){if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const s=Math.max(...e);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new Zg([],n,t.dtype,r),i=Pi(t,0);return e.forEach((t,e)=>{a.setItem(t,i[e])}),a}(hg("tensor",t,e,n),r,hg("elementShape",t,e,n),hg("numElements",t,e,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":{const r=function(t,e,n){return new Zg([],t,e,n)}(hg("elementShape",t,e,n),hg("elementDType",t,e,n),hg("numElements",t,e,n));return n.addTensorList(r),[r.idTensor]}case"TensorListGather":{const r=hg("tensorListId",t,e,n),s=hg("indices",t,e,n),a=hg("elementShape",t,e,n),i=hg("elementDType",t,e,n);return[n.getTensorList(r.id).gather(s,i,a)]}case"TensorListStack":{const r=hg("tensorListId",t,e,n),s=hg("elementShape",t,e,n),a=hg("elementDType",t,e,n),i=hg("numElements",t,e,n);return[n.getTensorList(r.id).stack(s,a,i)]}case"TensorListFromTensor":{const r=function(t,e,n){const r=t.dtype;if(t.shape.length<1)throw new Error("Tensor must be at least a vector, but saw shape: "+t.shape);if(t.dtype!==n)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${n}`);Yg(t.shape.slice(1),e,"TensorList shape mismatch: ");const s=Pi(t);return new Zg(s,e,r)}(hg("tensor",t,e,n),hg("elementShape",t,e,n),hg("elementDType",t,e,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":{const r=hg("tensorListId",t,e,n),s=n.getTensorList(r.id),a=hg("dtype",t,e,n),i=hg("elementShape",t,e,n);return[s.concat(a,i)]}case"TensorListPushBack":{const r=hg("tensorListId",t,e,n),s=hg("tensor",t,e,n),a=n.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=hg("tensorListId",t,e,n),s=hg("elementShape",t,e,n),a=hg("elementDType",t,e,n);return[n.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=hg("tensor",t,e,n),s=hg("elementShape",t,e,n),a=function(t,e,n){let r=0;const s=e.map(t=>(r+=t,r));if(r!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${t.shape}`);const a=0===r?0:t.size/r,i=Wn(()=>{const i=[];t=Ye(t,[1,r,a]);for(let r=0;r<e.length;++r){const o=[0,0===r?0:s[r-1],0],l=[1,e[r],a];i[r]=Ye(zr(t,o,l),n)}return t.dispose(),i}),o=new Zg([],n,t.dtype,e.length);for(let t=0;t<i.length;t++)o.setItem(t,i[t]);return o}(r,hg("lengths",t,e,n),s);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${t.op} is not implemented`)}};function ty(t,e,n){const[r,s]=hg("fusedOps",t,e,n),a="biasadd"===r,i="prelu"===s,o="fusedbatchnorm"===r,l=hg("numArgs",t,e,n);if(a){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(o)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const u=hg("strides",t,e,n),c=gg(t,e,n),h=hg("dataFormat",t,e,n).toUpperCase(),p=hg("dilations",t,e,n),[d,f]=hg("args",t,e,n);return{stride:u,pad:c,dataFormat:h,dilations:p,biasArg:d,preluArg:f,activationFunc:s}}function ey(t,e,n){return{boxes:hg("boxes",t,e,n),scores:hg("scores",t,e,n),maxOutputSize:hg("maxOutputSize",t,e,n),iouThreshold:hg("iouThreshold",t,e,n),scoreThreshold:hg("scoreThreshold",t,e,n),softNmsSigma:hg("softNmsSigma",t,e,n)}}function ny(t,e,n){const r=((t,e,n)=>{switch(t.category){case"arithmetic":return Wn(()=>((t,e,n)=>{switch(t.op){case"BiasAdd":case"AddV2":case"Add":return[qn(hg("a",t,e,n),hg("b",t,e,n))];case"AddN":return[tr(hg("tensors",t,e,n))];case"FloorMod":case"Mod":return[ba(hg("a",t,e,n),hg("b",t,e,n))];case"Mul":return[Yn(hg("a",t,e,n),hg("b",t,e,n))];case"RealDiv":case"Div":return[Xn(hg("a",t,e,n),hg("b",t,e,n))];case"DivNoNan":return[xs(hg("a",t,e,n),hg("b",t,e,n))];case"FloorDiv":return[Kn(hg("a",t,e,n),hg("b",t,e,n))];case"Sub":return[na(hg("a",t,e,n),hg("b",t,e,n))];case"Minimum":return[ya(hg("a",t,e,n),hg("b",t,e,n))];case"Maximum":return[Ps(hg("a",t,e,n),hg("b",t,e,n))];case"Pow":return[Fa(hg("a",t,e,n),hg("b",t,e,n))];case"SquaredDifference":return[Ti(hg("a",t,e,n),hg("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"basic_math":return Wn(()=>((t,e,n)=>{switch(t.op){case"Abs":case"ComplexAbs":return[Jn(hg("x",t,e,n))];case"Acos":return[Zn(hg("x",t,e,n))];case"Acosh":return[Qn(hg("x",t,e,n))];case"Asin":return[dr(hg("x",t,e,n))];case"Asinh":return[fr(hg("x",t,e,n))];case"Atan":return[mr(hg("x",t,e,n))];case"Atan2":return[gr(hg("x",t,e,n),hg("y",t,e,n))];case"Atanh":return[yr(hg("x",t,e,n))];case"Ceil":return[qr(hg("x",t,e,n))];case"Complex":return[jt(hg("real",t,e,n),hg("imag",t,e,n))];case"Cos":return[is(hg("x",t,e,n))];case"Cosh":return[os(hg("x",t,e,n))];case"Elu":return[vs(hg("x",t,e,n))];case"Erf":return[Ns(hg("x",t,e,n))];case"Exp":return[Cs(hg("x",t,e,n))];case"Expm1":return[ks(hg("x",t,e,n))];case"Floor":return[Ts(hg("x",t,e,n))];case"Log":return[qs(hg("x",t,e,n))];case"Log1p":return[Ks(hg("x",t,e,n))];case"Imag":return[Ms(hg("x",t,e,n))];case"Neg":return[Zs(hg("x",t,e,n))];case"Reciprocal":return[ei(hg("x",t,e,n))];case"Real":return[Sa(hg("x",t,e,n))];case"Relu":return[ni(hg("x",t,e,n))];case"Round":return[ui(hg("x",t,e,n))];case"Selu":return[hi(hg("x",t,e,n))];case"Sigmoid":return[Mr(hg("x",t,e,n))];case"Sin":return[mi(hg("x",t,e,n))];case"Sign":return[fi(hg("x",t,e,n))];case"Sinh":return[gi(hg("x",t,e,n))];case"Softplus":return[Qs(hg("x",t,e,n))];case"Sqrt":return[Ai(hg("x",t,e,n))];case"Square":return[xa(hg("x",t,e,n))];case"Tanh":return[Lr(hg("x",t,e,n))];case"Tan":return[Fi(hg("x",t,e,n))];case"Relu6":case"ClipByValue":return[Kr(hg("x",t,e,n),hg("clipValueMin",t,e,n),hg("clipValueMax",t,e,n))];case"Rsqrt":return[ci(pg(t.inputNames[0],e,n))];case"Prod":return[Ma(hg("x",t,e,n),hg("axes",t,e,n))];case"LeakyRelu":return[Vs(hg("x",t,e,n),hg("alpha",t,e,n))];case"Prelu":return[Oa(hg("x",t,e,n),hg("alpha",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"control":return Qg(t,e,n);case"convolution":return Wn(()=>((t,e,n)=>{switch(t.op){case"Conv1D":{const r=hg("stride",t,e,n),s=hg("pad",t,e,n),a=hg("dataFormat",t,e,n).toUpperCase(),i=hg("dilation",t,e,n);return[ts(hg("x",t,e,n),hg("filter",t,e,n),r,s,a,i)]}case"Conv2D":{const r=hg("strides",t,e,n),s=gg(t,e,n),a=hg("dataFormat",t,e,n).toUpperCase(),i=hg("dilations",t,e,n);return[Qr(hg("x",t,e,n),hg("filter",t,e,n),[r[1],r[2]],s,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:r,pad:s,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u}=ty(t,e,n);return[vo({x:hg("x",t,e,n),filter:hg("filter",t,e,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:s,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u}=ty(t,e,n);return[So({x:hg("x",t,e,n),filter:hg("filter",t,e,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=hg("outputShape",t,e,n),s=hg("strides",t,e,n),a=gg(t,e,n);return[ns(hg("x",t,e,n),hg("filter",t,e,n),r,[s[1],s[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=hg("strides",t,e,n),s=gg(t,e,n),a=hg("dilations",t,e,n),i=hg("dataFormat",t,e,n).toUpperCase();return[cs(hg("input",t,e,n),hg("filter",t,e,n),[r[1],r[2]],s,i,[a[1],a[2]])]}case"Conv3D":{const r=hg("strides",t,e,n),s=hg("pad",t,e,n),a=hg("dataFormat",t,e,n).toUpperCase(),i=hg("dilations",t,e,n);return[rs(hg("x",t,e,n),hg("filter",t,e,n),[r[1],r[2],r[3]],s,a,[i[1],i[2],i[3]])]}case"AvgPool":{const r=hg("strides",t,e,n),s=hg("pad",t,e,n),a=hg("kernelSize",t,e,n);return[Rr(hg("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPool":{const r=hg("strides",t,e,n),s=hg("pad",t,e,n),a=hg("kernelSize",t,e,n);return[ca(hg("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPoolWithArgmax":{const r=hg("strides",t,e,n),s=hg("pad",t,e,n),a=hg("kernelSize",t,e,n),i=hg("includeBatchInIndex",t,e,n),{result:o,indexes:l}=pa(hg("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s,i);return[o,l]}case"AvgPool3D":{const r=hg("strides",t,e,n),s=hg("pad",t,e,n),a=hg("kernelSize",t,e,n);return[Dr(hg("x",t,e,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"MaxPool3D":{const r=hg("strides",t,e,n),s=hg("pad",t,e,n),a=hg("kernelSize",t,e,n);return[ha(hg("x",t,e,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"Dilation2D":{const r=hg("strides",t,e,n),s=hg("pad",t,e,n),a=hg("dilations",t,e,n),i=r[1],o=r[2],l=a[1],u=a[2];return[ps(hg("x",t,e,n),hg("filter",t,e,n),[i,o],s,[l,u],"NHWC")]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"creation":return Wn(()=>((t,e,n)=>{switch(t.op){case"Fill":{const r=hg("shape",t,e,n),s=hg("dtype",t,e,n);return[As(r,hg("value",t,e,n),s)]}case"LinSpace":return[Hs(hg("start",t,e,n),hg("stop",t,e,n),hg("num",t,e,n))];case"Multinomial":{const r=hg("logits",t,e,n),s=hg("numSamples",t,e,n),a=hg("seed",t,e,n);return[Na(r,s,a)]}case"OneHot":{const r=hg("indices",t,e,n),s=hg("depth",t,e,n),a=hg("onValue",t,e,n),i=hg("offValue",t,e,n);return[Ze(r,s,a,i)]}case"Ones":return[fa(hg("shape",t,e,n),hg("dtype",t,e,n))];case"OnesLike":return[ka(hg("x",t,e,n))];case"RandomUniform":return[Za(hg("shape",t,e,n),hg("minval",t,e,n),hg("maxval",t,e,n),hg("dtype",t,e,n))];case"Range":return[ti(hg("start",t,e,n),hg("stop",t,e,n),hg("step",t,e,n),hg("dtype",t,e,n))];case"TruncatedNormal":{const r=hg("shape",t,e,n),s=hg("mean",t,e,n),a=hg("stdDev",t,e,n),i=hg("seed",t,e,n);return[Li(r,s,a,hg("dtype",t,e,n),i)]}case"Zeros":return[da(hg("shape",t,e,n),hg("dtype",t,e,n))];case"ZerosLike":return[bs(hg("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"dynamic":return(async(t,e,n)=>{switch(t.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=ey(t,e,n),u=await fl.nonMaxSuppressionWithScoreAsync(r,s,a,i,o,l);return[u.selectedIndices,u.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=ey(t,e,n),l=hg("padToMaxOutputSize",t,e,n),u=await fl.nonMaxSuppressionPaddedAsync(r,s,a,i,o,l);return[u.selectedIndices,u.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=ey(t,e,n);return[await fl.nonMaxSuppressionAsync(r,s,a,i,o)]}case"Where":{const r=De(hg("condition",t,e,n),"bool"),s=[await Ui(r)];return r.dispose(),s}case"ListDiff":return di(hg("x",t,e,n),hg("y",t,e,n));default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n);case"evaluation":return Wn(()=>((t,e,n)=>{switch(t.op){case"TopKV2":{const r=hg("x",t,e,n),s=hg("k",t,e,n),a=hg("sorted",t,e,n),i=zi(r,s,a);return[i.values,i.indices]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"image":return Wn(()=>((t,e,n)=>{switch(t.op){case"ResizeBilinear":{const r=hg("images",t,e,n),s=hg("size",t,e,n),a=hg("alignCorners",t,e,n);return[fl.resizeBilinear(r,[s[0],s[1]],a)]}case"ResizeNearestNeighbor":{const r=hg("images",t,e,n),s=hg("size",t,e,n),a=hg("alignCorners",t,e,n);return[fl.resizeNearestNeighbor(r,[s[0],s[1]],a)]}case"CropAndResize":{const r=hg("image",t,e,n),s=hg("boxes",t,e,n),a=hg("boxInd",t,e,n),i=hg("cropSize",t,e,n),o=hg("method",t,e,n),l=hg("extrapolationValue",t,e,n);return[fl.cropAndResize(r,s,a,i,o,l)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"graph":return Wn(()=>((t,e,n)=>{switch(t.op){case"Const":return e[t.name];case"PlaceholderWithDefault":const r=hg("default",t,e,n);return[pg(t.name,e,n)||r];case"Placeholder":return[pg(t.name,e,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[yg(hg("x",t,e,n))];case"IdentityN":return hg("x",t,e,n).map(t=>yg(t));case"Snapshot":return[yg(hg("x",t,e,n))];case"Shape":return[Qa(hg("x",t,e,n).shape,"int32")];case"ShapeN":return hg("x",t,e,n).map(t=>Qa(t.shape));case"Size":return[Ws(hg("x",t,e,n).size,"int32")];case"Rank":return[Ws(hg("x",t,e,n).rank,"int32")];case"NoOp":return[Ws(1)];case"Print":const s=hg("x",t,e,n),a=hg("data",t,e,n),i=hg("message",t,e,n),o=hg("summarize",t,e,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let t=0;t<a.length;t++)console.log(Array.prototype.slice.call(a[t].dataSync()).slice(0,o));return[s];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"logical":return Wn(()=>((t,e,n)=>{switch(t.op){case"Equal":return[gs(hg("a",t,e,n),hg("b",t,e,n))];case"NotEqual":return[Ca(hg("a",t,e,n),hg("b",t,e,n))];case"Greater":return[Fs(hg("a",t,e,n),hg("b",t,e,n))];case"GreaterEqual":return[Os(hg("a",t,e,n),hg("b",t,e,n))];case"Less":return[Us(hg("a",t,e,n),hg("b",t,e,n))];case"LessEqual":return[Gs(hg("a",t,e,n),hg("b",t,e,n))];case"LogicalAnd":return[ia(hg("a",t,e,n),hg("b",t,e,n))];case"LogicalNot":return[oa(hg("a",t,e,n))];case"LogicalOr":return[la(hg("a",t,e,n),hg("b",t,e,n))];case"Select":case"SelectV2":return[ys(hg("condition",t,e,n),hg("a",t,e,n),hg("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"matrices":return Wn(()=>((t,e,n)=>{switch(t.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[Je(hg("a",t,e,n),hg("b",t,e,n),hg("transposeA",t,e,n),hg("transposeB",t,e,n))];case"Transpose":return[Qe(hg("x",t,e,n),hg("perm",t,e,n))];case"_FusedMatMul":const[r,s]=hg("fusedOps",t,e,n),a="biasadd"===r,i="prelu"===s,o=hg("numArgs",t,e,n);if(a){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[l,u]=hg("args",t,e,n);return[ko({a:hg("a",t,e,n),b:hg("b",t,e,n),transposeA:hg("transposeA",t,e,n),transposeB:hg("transposeB",t,e,n),bias:l,activation:s,preluActivationWeights:u})];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"normalization":return Wn(()=>((t,e,n)=>{switch(t.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[Vr(hg("x",t,e,n),hg("mean",t,e,n),hg("variance",t,e,n),hg("offset",t,e,n),hg("scale",t,e,n),hg("epsilon",t,e,n))];case"LRN":return[js(hg("x",t,e,n),hg("radius",t,e,n),hg("bias",t,e,n),hg("alpha",t,e,n),hg("beta",t,e,n))];case"Softmax":return[vi(hg("x",t,e,n))];case"LogSoftmax":return[sa(hg("x",t,e,n))];case"SparseToDense":return[uo(hg("sparseIndices",t,e,n),hg("outputShape",t,e,n),hg("sparseValues",t,e,n),hg("defaultValue",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"reduction":return Wn(()=>((t,e,n)=>{switch(t.op){case"Max":{const r=hg("axis",t,e,n),s=hg("keepDims",t,e,n);return[ea(hg("x",t,e,n),r,s)]}case"Mean":{const r=hg("axis",t,e,n),s=hg("keepDims",t,e,n);return[ma(hg("x",t,e,n),r,s)]}case"Min":{const r=hg("axis",t,e,n),s=hg("keepDims",t,e,n);return[ga(hg("x",t,e,n),r,s)]}case"Sum":{const r=hg("axis",t,e,n),s=hg("keepDims",t,e,n);return[ra(hg("x",t,e,n),r,s)]}case"All":{const r=hg("axis",t,e,n),s=hg("keepDims",t,e,n);return[ur(hg("x",t,e,n),r,s)]}case"Any":{const r=hg("axis",t,e,n),s=hg("keepDims",t,e,n);return[cr(hg("x",t,e,n),r,s)]}case"ArgMax":{const r=hg("axis",t,e,n);return[hr(hg("x",t,e,n),r)]}case"ArgMin":{const r=hg("axis",t,e,n);return[pr(hg("x",t,e,n),r)]}case"Prod":{const r=hg("axis",t,e,n),s=hg("keepDims",t,e,n);return[Ma(hg("x",t,e,n),r,s)]}case"Cumsum":{const r=hg("axis",t,e,n),s=hg("exclusive",t,e,n),a=hg("reverse",t,e,n);return[ls(hg("x",t,e,n),r,s,a)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"slice_join":return Wn(()=>((t,e,n)=>{switch(t.op){case"ConcatV2":case"Concat":{const r=hg("n",t,e,n),s=hg("axis",t,e,n);let a=hg("tensors",t,e,n);return a=a.slice(0,r),[Or(a,s)]}case"GatherV2":case"Gather":{const r=hg("axis",t,e,n),s=hg("x",t,e,n),a=hg("indices",t,e,n);return[_s(s,De(a,"int32"),r)]}case"ReverseV2":case"Reverse":{const r=hg("axis",t,e,n),s=hg("x",t,e,n);return[si(s,r)]}case"Slice":{const r=hg("begin",t,e,n),s=hg("size",t,e,n);return[zr(hg("x",t,e,n),r,s)]}case"StridedSlice":{const r=hg("begin",t,e,n),s=hg("end",t,e,n),a=hg("strides",t,e,n),i=hg("beginMask",t,e,n),o=hg("endMask",t,e,n),l=hg("ellipsisMask",t,e,n),u=hg("newAxisMask",t,e,n),c=hg("shrinkAxisMask",t,e,n),h=hg("x",t,e,n);return[_i(h,r,s,a,i,o,l,u,c)]}case"Pack":return Wn(()=>{const r=hg("axis",t,e,n),s=hg("tensors",t,e,n),a=s[0].shape,i=$i(s[0]).shape,o=s.map(t=>{const e=C(t.shape,a);if(!e&&!C($i(t).shape,i))throw new Error("the input tensors shape does not match");return e?t:Ye(t,a)});return[Ri(o,r)]});case"Unpack":{const r=hg("axis",t,e,n),s=hg("tensor",t,e,n);return Pi(s,r)}case"Tile":{const r=hg("reps",t,e,n);return[Is(hg("x",t,e,n),r)]}case"Split":case"SplitV":{const r=hg("axis",t,e,n),s=hg("numOrSizeSplits",t,e,n),a=hg("x",t,e,n);return Ii(a,s,r)}case"ScatterNd":{const r=hg("indices",t,e,n),s=hg("values",t,e,n),a=hg("shape",t,e,n);return[lo(r,s,a)]}case"GatherNd":{const r=hg("x",t,e,n),s=hg("indices",t,e,n);return[co(r,s)]}case"SparseToDense":{const r=hg("sparseIndices",t,e,n),s=hg("outputShape",t,e,n),a=hg("sparseValues",t,e,n),i=hg("defaultValue",t,e,n);return[uo(r,a,s,a.dtype===i.dtype?i:De(i,a.dtype))]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"spectral":return Wn(()=>((t,e,n)=>{switch(t.op){case"FFT":return[Ni(hg("x",t,e,n))];case"IFFT":return[Ci(hg("x",t,e,n))];case"RFFT":return[Ei(hg("x",t,e,n))];case"IRFFT":return[Si(hg("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"transformation":return Wn(()=>((t,e,n)=>{switch(t.op){case"Cast":return[De(hg("x",t,e,n),hg("dtype",t,e,n))];case"ExpandDims":{const r=hg("axis",t,e,n);return[Ss(hg("x",t,e,n),r)]}case"Squeeze":{const r=hg("axis",t,e,n);return[$i(hg("x",t,e,n),r)]}case"Reshape":return[Ye(hg("x",t,e,n),hg("shape",t,e,n))];case"PadV2":case"Pad":return[Ea(hg("x",t,e,n),hg("padding",t,e,n),hg("constantValue",t,e,n))];case"SpaceToBatchND":{const r=hg("blockShape",t,e,n),s=hg("paddings",t,e,n);return[Da(hg("x",t,e,n),r,s)]}case"BatchToSpaceND":{const r=hg("blockShape",t,e,n),s=hg("crops",t,e,n);return[Pr(hg("x",t,e,n),r,s)]}case"DepthToSpace":{const r=hg("blockSize",t,e,n),s=hg("dataFormat",t,e,n).toUpperCase();return[us(hg("x",t,e,n),r,s)]}case"BroadcastTo":return[jr(hg("x",t,e,n),hg("shape",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"custom":const r=cg(t.op);if(r&&r.customExecutor)return r.customExecutor(new Xg(t,e,n));throw TypeError(`Custom op ${t.op} is not registered.`);default:throw TypeError(`Unknown op '${t.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(t,e,n);return r instanceof Promise?r.then(t=>[].concat(t)):[].concat(r)}class ry{constructor(t={},e={},n={},r={}){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let e=0;e<this.contexts.length-1;e++){const n=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(n))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map(t=>0===t.id&&0===t.iterationId?"":`${t.frameName}-${t.iterationId}`).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(const e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(const e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}}function sy(t,e,n){const r=new Set,s=[];let a=null,i=null;const o=new Set,l=Object.keys(t).map(t=>mg(t)[0]),u=[...e];for(;u.length>0;){const t=u.pop();(oy(t)||ly(t))&&null==a&&(a=t,i=a.children.map(t=>t.name).filter(t=>r.has(t))),r.add(t.name),null==n[t.name]&&(-1===l.indexOf(t.name)&&(0!==t.inputs.length?t.inputs.forEach(t=>{o.has(t.name)||(o.add(t.name),u.push(t))}):s.push(t.name)))}return{inputs:t,outputs:e,usedNodes:r,missingInputs:s,dynamicNode:a,syncInputs:i}}const ay=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],iy=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"];function oy(t){return ay.indexOf(t.op)>=0}function ly(t){return iy.indexOf(t.op)>=0}class uy{constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=t.outputs,this._inputs=t.inputs,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach(e=>{this._functionExecutorMap[e]=new uy(t.functions[e],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map(e=>t[e].map(t=>t.id));this._weightIds=[].concat(...e),this._weightMap=t}get inputs(){return this._inputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(t=>t.signatureKey||t.name)}get outputNodes(){return this._outputs.map(t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e})}get functions(){return Object.keys(this._functions).reduce((t,e)=>(t[e]=this._functions[e].signature,t),{})}getCompilationKey(t,e){const n=t.map(t=>t.name).sort(),r=e.map(t=>t.name).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(t,e){const n=sy(t,e,this.weightMap),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=e.map(t=>t.name),s=Object.keys(t);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return function(t,e,n){const{usedNodes:r,inputs:s}=n,a=[];Object.keys(s).map(t=>mg(t)[0]).map(e=>t.nodes[e]).forEach(t=>{r.has(t.name)&&a.push(t)}),t.weights.forEach(t=>{r.has(t.name)&&a.push(t)});const i=new Set,o=[];for(;a.length>0;){const t=a.pop();i.add(t.name),e[t.name]||o.push(t),t.children.forEach(t=>{!i.has(t.name)&&r.has(t.name)&&t.inputs.every(t=>i.has(t.name))&&a.push(t)})}return o}(this.graph,this.weightMap,n)}execute(t,e){t=this.mapInputs(t);const n=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const r=n.map(t=>this.graph.nodes[mg(t)[0]]),s=e.map(t=>this.graph.nodes[mg(t)[0]]),a=this.getCompilationKey(r,s);let i=this.compiledMap.get(a);null==i&&(i=this.compile(t,s),this.compiledMap.set(a,i));const o={},l={};return Wn(()=>{const n=new ry(this.weightMap,o,l,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(t).forEach(e=>{const[n,s]=mg(e),a=[];a[s]=t[e],r[n]=a});const s=this.getFrozenTensorIds(r),a={};for(let t=0;t<i.length;t++){const o=i[t];if(!r[o.name]){const t=ny(o,r,n);if(t instanceof Promise)throw new Error(`The execution of the op '${o.op}' returned a promise. Please use model.executeAsync() instead.`);r[o.name]=t,this.checkTensorForDisposal(o.name,o,r,n,s,e,a)}}return null==this.parent&&n.dispose(s),e.map(t=>pg(t,r,n))})}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map(e=>t[e]).map(t=>t.map(t=>t.id)));return new Set(e)}checkTensorForDisposal(t,e,n,r,s,a,i){"control"!==e.category&&-1===a.indexOf(t)&&(n[t].forEach(t=>{null!=t&&(i[t.id]=(i[t.id]||0)+e.children.length)}),e.inputs.forEach(t=>{if("control"!==t.category){const e=function(t,e,n){return e[fg(t,n.currentContextId)]}(t.name,n,r);null!=e&&e.forEach(t=>{if(t&&!s.has(t.id)){const e=i[t.id];1===e?(t.dispose(),delete i[t.id]):null!=e&&i[t.id]--}})}}))}async executeAsync(t,e){return this._executeAsync(t,e)}async _executeAsync(t,e,n=!1,r={},s={}){n||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e));const a=new ry(this.weightMap,r,s,this.functionExecutorMap),i=await this.executeWithControlFlow(t,a,e,n),o=e.map(t=>pg(t,i,a)),l=o.map(t=>t.id),u=Object.keys(t).map(e=>t[e].id),c=new Set([...l,...u,...this.weightIds]);return Object.keys(i).forEach(t=>{i[t].forEach(t=>{!t||t.isDisposed||c.has(t.id)||t.dispose()})}),null==this.parent&&a.dispose(c),o}async executeFunctionAsync(t,e,n){const r=t.reduce((t,e,n)=>(t[this.inputs[n].name]=e,t),{});return this._executeAsync(r,this.outputNodes,!0,e,n)}async executeWithControlFlow(t,e,n,r){const s=Object.keys(t),a=s.map(t=>this.graph.nodes[mg(t)[0]]),i=n.map(t=>this.graph.nodes[mg(t)[0]]),{usedNodes:o,missingInputs:l,dynamicNode:u,syncInputs:c}=sy(t,i,this.weightMap),h=[...a,...this.graph.weights].map(t=>({node:t,contexts:e.currentContext})),p=Object.assign({},this.weightMap);Object.keys(t).forEach(e=>{const[n,r]=mg(e),s=[];s[r]=t[e],p[n]=s});const d={},f=this.getFrozenTensorIds(p),m={};for(;h.length>0;){const t=this.processStack(a,h,e,p,m,f,n,d,o);await Promise.all(t)}null!=u||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const g=i.filter(t=>!oy(t)&&!pg(t.name,p,e)).map(t=>t.name);if(g.length>0){let t="";throw null!=u&&(t=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${c}]`),new Error(`Cannot compute the outputs [${g}] from the provided inputs [${s}]. Consider providing the following inputs: [${l}]. ${t}`)}return p}processStack(t,e,n,r,s,a,i,o,l){const u=[];for(;e.length>0;){const c=e.pop();n.currentContext=c.contexts;let h="";if("Enter"===c.node.op&&hg("isConstant",c.node,r,n)&&([h]=dg(c.node.name,n)),-1===t.indexOf(c.node)){const t=ny(c.node,r,n);h||([h]=dg(c.node.name,n));const p=n.currentContext;t instanceof Promise?u.push(t.then(t=>(r[h]=t,n.currentContext=p,this.checkTensorForDisposal(h,c.node,r,n,a,i,o),this.processChildNodes(c.node,e,n,r,s,l),t))):(r[h]=t,this.checkTensorForDisposal(h,c.node,r,n,a,i,o),this.processChildNodes(c.node,e,n,r,s,l))}else this.processChildNodes(c.node,e,n,r,s,l)}return u}processChildNodes(t,e,n,r,s,a){t.children.forEach(t=>{const[i]=dg(t.name,n);!s[i]&&a.has(t.name)&&("Merge"===t.op?t.inputNames.some(t=>!!pg(t,r,n))&&(s[i]=!0,e.push({contexts:n.currentContext,node:t})):t.inputNames.every(t=>!!pg(t,r,n))&&(s[i]=!0,e.push({contexts:n.currentContext,node:t})))})}dispose(){Object.keys(this.weightMap).forEach(t=>this.weightMap[t].forEach(t=>t.dispose()))}checkInputShapeAndType(t){Object.keys(t).forEach(e=>{const n=t[e],[r]=mg(e),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const t=s.attrParams.shape.value;b(t.length===n.shape.length&&n.shape.every((e,n)=>-1===t[n]||t[n]===e),()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${t}], but was [${n.shape}]`)}s.attrParams.dtype&&s.attrParams.dtype.value&&b(n.dtype===s.attrParams.dtype.value,()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`)})}mapInputs(t){const e={};for(const n in t)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){e[this._signature.inputs[n].name]=t[n]}else e[n]=t[n];return e}checkInputs(t){const e=Object.keys(t).filter(t=>{const[e]=mg(t);return null==this.graph.nodes[e]});if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map(t=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[t]){return this._signature.outputs[t].name}return t},{})}checkOutputs(t){t.forEach(t=>{const[e]=mg(t);if(!this.graph.nodes[e])throw new Error(`The output '${t}' is not found in the graph`)})}}class cy{constructor(t,e={}){this.modelUrl=t,this.loadOptions=e,this.version="n/a",null==e&&(this.loadOptions={})}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}findIOHandler(){const t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=je(t,this.loadOptions);else{const e=oe(t,this.loadOptions);if(0===e.length)e.push(je(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const t=await this.handler.load();return this.loadSync(t)}loadSync(t){this.artifacts=t;const e=this.artifacts.modelTopology;let n={};null!=this.artifacts.userDefinedMetadata&&(n=this.artifacts.userDefinedMetadata.signature),this.version=`${e.versions.producer}.${e.versions.minConsumer}`;const r=Jt(this.artifacts.weightData,this.artifacts.weightSpecs);return this.executor=new uy(Fg.Instance.transformGraph(e,n)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),!0}async save(t,e){if("string"==typeof t){const e=ie(t);if(0===e.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new Error(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(this.artifacts)}predict(t,e){return this.execute(t,this.outputNodes)}normalizeInputs(t){if(!(t instanceof yt||Array.isArray(t)))return t;if((t=Array.isArray(t)?t:[t]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${t.length} input tensors.`);return this.inputNodes.reduce((e,n,r)=>(e[n]=t[r],e),{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}execute(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=this.executor.execute(t,e);return n.length>1?n:n[0]}async executeAsync(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=await this.executor.executeAsync(t,e);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce((e,n)=>(e[n]=[t[n]],e),{})}dispose(){this.executor.dispose()}}function hy(t,e,n=new Map,r=new Set){if(null==t)return null;if(r.has(t))throw new Error("Circular references are not supported.");if(n.has(t))return n.get(t);const s=e(t);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(my(t)){const s=Array.isArray(t)?[]:{};r.add(t);for(const a in t){const i=hy(t[a],e,n,r);s[a]=i}return r.delete(t),s}throw new Error("Can't recurse into non-iterable type: "+t)}return n.set(t,s.value),s.value}function py(t,e=dy){return function t(e,n,r=new Set){const s=e[0];if(r.has(s))throw new Error("Circular references are not supported.");const a=n(e);if(a.recurse&&null!==a.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(a.recurse){if(my(s)){const a=Array.isArray(s)?[]:{};r.add(s);for(const i in s){const s=e.map(t=>t[i]),o=t(s,n,r);a[i]=o}return r.delete(s),a}throw new Error("Can't recurse into non-iterable type: "+s)}return a.value}(t,e)}function dy(t){return null===t?null:my(t[0])?{value:null,recurse:!0}:{value:t,recurse:!1}}async function fy(t,e){const n=new Map;hy(t,e,n);for(const t of Array.from(n.keys())){const e=n.get(t);if(e instanceof Promise){const r=await e;n.set(t,r)}}return hy(t,e,n)}function my(t){return null!=t&&!ArrayBuffer.isView(t)&&(Array.isArray(t)||"object"==typeof t&&!(t instanceof yt))}function gy(t){return function(t,e){return hy(t,e)}(t,yy)}function yy(t){return t instanceof yt?{value:t.clone(),recurse:!1}:my(t)?{value:null,recurse:!0}:{value:t,recurse:!1}}class by{constructor(t){if(this.capacity=t,this.begin=0,this.end=0,null==t)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t}wrap(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity}get(t){if(t<0)throw new RangeError("Can't get item at a negative index.");return this.data[t%this.capacity]}set(t,e){if(t<0)throw new RangeError("Can't set item at a negative index.");this.data[t%this.capacity]=e}length(){let t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,t),this.end=this.wrap(this.end+1)}pushAll(t){for(const e of t)this.push(e)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const t=this.get(this.end);return this.set(this.end,void 0),t}unshift(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,t)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t}shuffleExcise(t){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.wrap(this.begin+t),n=this.get(e);return this.set(e,this.pop()),n}}class xy extends by{constructor(){super(xy.INITIAL_CAPACITY)}isFull(){return!1}push(t){super.isFull()&&this.expand(),super.push(t)}unshift(t){super.isFull()&&this.expand(),super.unshift(t)}expand(){const t=2*this.capacity,e=new Array(t),n=this.length();for(let t=0;t<n;t++)e[t]=this.get(this.wrap(this.begin+t));this.data=e,this.capacity=t,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function wy(t){return new Sy(t)}function vy(t){return new ky(t)}function Ny(t,e){return new My(t,e)}xy.INITIAL_CAPACITY=32;class Cy{async toArray(){const t=[];let e=await this.next();for(;!e.done;)t.push(e.value),e=await this.next();return t}async toArrayForTest(){const t=this.prefetch(100),e=[];let n=await t.next();for(;!n.done;)e.push(n.value),n=await t.next();return e}async resolveFully(){let t=await this.next();for(;!t.done;)t=await this.next()}async resolveWhile(t){let e=await this.next(),n=t(e.value);for(;!e.done&&n;)e=await this.next(),n=t(e.value)}handleErrors(t){return new Dy(this,t)}filter(t){return new $y(this,t)}map(t){return new Ry(this,t)}mapAsync(t){return new _y(this,t)}serialMapAsync(t){return new _y(this,t).serial()}flatmap(t){return new Oy(this,t)}async forEachAsync(t){return this.map(t).resolveFully()}async serialForEach(t){return this.serialMapAsync(t).resolveWhile(t=>!0===t)}rowMajorBatch(t,e=!0){return new Ty(this,t,e)}columnMajorBatch(t,e=!0,n=dy){return this.rowMajorBatch(t,e).map(t=>py(t,n))}concatenate(t,e){return new My(wy([this,t]),e)}take(t){return t<0||null==t?this:new Ay(this,t)}skip(t){return t<0||null==t?this:new Ey(this,t)}prefetch(t){return new By(this,t)}shuffle(t,e){return new Py(this,t,e)}serial(){return new Iy(this)}}class Sy extends Cy{constructor(t){super(),this.items=t,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const t=this.items[this.trav];return this.trav++,{value:gy(t),done:!1}}}class ky extends Cy{constructor(t){super(),this.nextFn=t}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(t){throw t.message="Error thrown while iterating through a dataset: "+t.message,t}}}class Iy extends Cy{constructor(t){super(),this.upstream=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Serial"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}}class Ey extends Cy{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Skip"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const t=await this.upstream.next();if(t.done)return t;Vn(t.value)}return this.upstream.next()}}class Ay extends Cy{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0}summary(){return this.upstream.summary()+" -> Take"}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class Ty extends Cy{constructor(t,e,n=!0){super(),this.upstream=t,this.batchSize=e,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> RowMajorBatch"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){const t=[];for(;t.length<this.batchSize;){const e=await this.upstream.next();if(e.done)return this.enableSmallLastBatch&&t.length>0?{value:t,done:!1}:{value:null,done:!0};t.push(e.value)}return{value:t,done:!1}}}class $y extends Cy{constructor(t,e){super(),this.upstream=t,this.predicate=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Filter"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){const t=await this.upstream.next();if(t.done||this.predicate(t.value))return t;Vn(t.value)}}}class Ry extends Cy{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> Map"}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=$t(t.value),n=this.transform(t.value),r=$t(n);for(const t of e)Tt(t,r)||t.dispose();return{value:n,done:!1}}}class Dy extends Cy{constructor(t,e){super(),this.upstream=t,this.handler=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> handleErrors"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(t){if(!this.handler(t))return{value:null,done:!0}}}}class _y extends Cy{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> AsyncMap"}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=$t(t.value),n=await this.transform(t.value),r=$t(n);for(const t of e)Tt(t,r)||t.dispose();return{value:n,done:!1}}}class Fy extends Cy{constructor(){super(),this.outputQueue=new xy,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class Oy extends Fy{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> Flatmap"}async pump(){const t=await this.upstream.next();if(t.done)return!1;const e=$t(t.value),n=this.transform(t.value),r=$t(n);this.outputQueue.pushAll(n);for(const t of e)Tt(t,r)||t.dispose();return!0}}class My extends Cy{constructor(t,e){super(),this.baseErrorHandler=e,this.lastRead=null,this.iterator=null,this.moreIterators=t}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(t){if(await t,null==this.iterator){const t=await this.moreIterators.next();if(t.done)return{value:null,done:!0};this.iterator=t.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const e=await this.iterator.next();return e.done?(this.iterator=null,this.readFromChain(t)):e}}var zy;!function(t){t[t.FAIL=0]="FAIL",t[t.SHORTEST=1]="SHORTEST",t[t.LONGEST=2]="LONGEST"}(zy||(zy={}));class Ly extends Cy{constructor(t,e=zy.FAIL){super(),this.iterators=t,this.mismatchMode=e,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(t){await t;let e=0,n=0;const r=await fy(this.iterators,(function(t){if(t instanceof Cy){return{value:t.next().then(t=>(e++,t.done&&n++,t.value)),recurse:!1}}return{value:null,recurse:!0}}));if(e===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case zy.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case zy.SHORTEST:return{value:null,done:!0};case zy.LONGEST:}return this.count++,{value:r,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class By extends Cy{constructor(t,e){super(),this.upstream=t,this.bufferSize=e,this.buffer=new by(e)}summary(){return this.upstream.summary()+" -> Prefetch"}refill(){for(;!this.buffer.isFull();){const t=this.upstream.next();this.buffer.push(t)}}next(){return this.refill(),this.buffer.shift()}}class Py extends By{constructor(t,e,n){super(t,e),this.upstream=t,this.windowSize=e,this.upstreamExhausted=!1,this.random=ja(n||Z().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(t){return Math.floor(this.random()*t)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const t=this.chooseIndex(),e=await this.buffer.shuffleExcise(t);if(!e.done)return this.refill(),e;this.upstreamExhausted=!0}return{value:null,done:!0}}}class Wy{constructor(){this.size=null}batch(t,e=!0){const n=this;let r;return b(t>0,()=>"batchSize needs to be positive, but it is\n      "+t),r=this.size===1/0||null==this.size?this.size:e?Math.ceil(this.size/t):Math.floor(this.size/t),Vy(async()=>(await n.iterator()).columnMajorBatch(t,e,Uy),r)}concatenate(t){const e=this;let n;return n=this.size===1/0||t.size===1/0?1/0:null!=this.size&&null!=t.size?this.size+t.size:null,Vy(async()=>(await e.iterator()).concatenate(await t.iterator()),n)}filter(t){const e=this;let n;return n=this.size===1/0?1/0:null,Vy(async()=>(await e.iterator()).filter(e=>Wn(()=>t(e))),n)}async forEachAsync(t){return(await this.iterator()).forEachAsync(t)}map(t){const e=this;return Vy(async()=>(await e.iterator()).map(e=>Wn(()=>t(e))),this.size)}mapAsync(t){const e=this;return Vy(async()=>(await e.iterator()).mapAsync(t),this.size)}prefetch(t){if(null==t)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const e=this;return Vy(async()=>(await e.iterator()).prefetch(t),this.size)}repeat(t){const e=this;let n;return n=null!=this.size&&t>0?this.size*t:0===t?0:null!=this.size&&(void 0===t||t<0)?1/0:null,Vy(async()=>Ny(vy(async()=>({value:await e.iterator(),done:!1})).take(t)),n)}skip(t){const e=this;let n;return n=null!=this.size&&t>=0&&this.size>=t?this.size-t:null!=this.size&&(this.size<t||void 0===t||t<0)?0:null,Vy(async()=>(await e.iterator()).skip(t),n)}shuffle(t,e,n=!0){if(null==t||t<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,s=ja(e||Z().toString());return Vy(async()=>{let e=s.int32();return n&&(e+=s.int32()),(await r.iterator()).shuffle(t,e.toString())},this.size)}take(t){const e=this;let n;return n=null!=this.size&&this.size>t?t:null!=this.size&&this.size<=t?this.size:null,Vy(async()=>(await e.iterator()).take(t),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function Vy(t,e=null){return new class extends Wy{constructor(){super(...arguments),this.size=e}async iterator(){return t()}}}function Uy(t){if(null===t)return null;const e=t[0];if(null==(n=e)||null===(r=n)||"object"!=typeof r&&"function"!=typeof r||Array.isArray(n)||"object"==typeof n&&n instanceof yt||z(n)){return{value:function(t){if(0===t.length)throw new Error("Can't make a batch of zero elements.");return t[0]instanceof yt?Ri(t):Kt(t)}(t),recurse:!1}}var n,r;return{value:null,recurse:!0}}Wy.MAX_BUFFER_SIZE=1e4;class Gy extends Wy{constructor(t){super(),this.input=t}async iterator(){return(await this.input.iterator()).decodeUTF8().split("\n").map(t=>(t.endsWith("\r")&&(t=t.slice(0,-1)),t))}}const Hy=Symbol("out"),jy=Symbol("field"),qy=Symbol("quote"),Ky=Symbol("quoteafterquote"),Xy=Symbol("quoteinquote");class Yy extends Wy{constructor(t,e){super(),this.input=t,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new Gy(t),e||(e={}),this.hasHeader=!1!==e.hasHeader,this.fullColumnNames=e.columnNames,this.columnConfigs=e.columnConfigs,this.configuredColumnsOnly=e.configuredColumnsOnly,e.delimWhitespace?(b(null==e.delimiter,()=>"Delimiter should not be provided when delimWhitespace is true."),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=e.delimiter?e.delimiter:","}async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const t=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!t)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&t&&b(t.length===this.fullColumnNames.length,()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+t.length.toString()+")."),this.fullColumnNames||(this.fullColumnNames=t);const e=this.fullColumnNames.reduce((t,e)=>(t[e]=t[e]+1||1,t),{}),n=Object.keys(e).filter(t=>e[t]>1);if(b(0===n.length,()=>"Duplicate column names found: "+n.toString()),this.columnConfigs)for(const t of Object.keys(this.columnConfigs)){if(-1===this.fullColumnNames.indexOf(t))throw new Error('The key "'+t+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").")}this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const t=await this.base.iterator(),e=await t.next();if(e.done)throw new Error("No data was found for CSV parsing.");const n=e.value;return this.parseRow(n,!1)}return null}async iterator(){this.columnNamesValidated||await this.setColumnNames();let t=await this.base.iterator();return this.hasHeader&&(t=t.skip(1)),t.map(t=>this.makeDataElement(t))}makeDataElement(t){const e=this.parseRow(t),n={},r={};for(let s=0;s<this.fullColumnNames.length;s++){const a=this.fullColumnNames[s],i=this.columnConfigs?this.columnConfigs[a]:null;if(!this.configuredColumnsOnly||i){const o=e[s];let l=null;if(""===o)if(i&&void 0!==i.default)l=i.default;else{if(i&&(i.required||i.isLabel))throw new Error(`Required column ${a} is empty in this line: ${t}`);l=void 0}else{const t=Number(o);if(isNaN(t))l=i&&"bool"===i.dtype?this.getBoolean(o):o;else if(i&&i.dtype)switch(i.dtype){case"float32":l=t;break;case"int32":l=Math.floor(t);break;case"bool":l=this.getBoolean(o);break;default:l=t}else l=t}i&&i.isLabel?r[a]=l:n[a]=l}}return 0===Object.keys(r).length?n:{xs:n,ys:r}}getBoolean(t){return"1"===t||"true"===t.toLowerCase()?1:0}parseRow(t,e=!0){const n=[];let r=0;const s=t.length;let a=Hy;for(let e=0;e<s;e++)switch(a){case Hy:switch(t.charAt(e)){case'"':r=e+1,a=qy;break;case this.delimiter:if(r=e+1," "===this.delimiter&&this.delimWhitespace)break;n.push(""),a=Hy;break;default:a=jy,r=e}break;case jy:switch(t.charAt(e)){case this.delimiter:n.push(t.substring(r,e)),a=Hy,r=e+1}break;case qy:switch(t.charAt(e)){case'"':a=Ky}break;case Ky:switch(t.charAt(e)){case this.delimiter:n.push(t.substring(r,e-1)),a=Hy,r=e+1;break;case'"':a=qy;break;default:a=Xy}break;case Xy:switch(t.charAt(e)){case'"':a=qy}}if(a===Ky?n.push(t.substring(r,s-1)):n.push(t.substring(r)),e&&n.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);return n}}class Jy extends Cy{constructor(t){super(),this.microphoneConfig=t,this.isClosed=!1,this.fftSize=t.fftSize||1024;const e=Math.log2(this.fftSize);if(this.fftSize<0||e<4||e>14||!Number.isInteger(e))throw new Error("Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got "+this.fftSize);if(this.numFrames=t.numFramesPerSpectrogram||43,this.sampleRateHz=t.sampleRateHz,this.columnTruncateLength=t.columnTruncateLength||this.fftSize,this.audioTrackConstraints=t.audioTrackConstraints,this.smoothingTimeConstant=t.smoothingTimeConstant||0,this.includeSpectrogram=!1!==t.includeSpectrogram,this.includeWaveform=!0===t.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(t={}){if(n().get("IS_NODE"))throw new Error("microphone API is only supported in browser environment.");const e=new Jy(t);return await e.start(),e}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(t){throw new Error("Error thrown while initializing video stream: "+t.message)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const t=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new t,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: `+this.audioContext.sampleRate)}else this.sampleRateHz=this.audioContext.sampleRate;const e=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,e.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let t,e;const n=await this.getAudioData();if(this.includeSpectrogram){const e=this.flattenQueue(n.freqDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const t=this.flattenQueue(n.timeDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:t,waveform:e},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const t=[],e=[];let n=0;return new Promise(r=>{const s=setInterval(()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&r({freqDataQueue:t,timeDataQueue:e}),t.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),e.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(s),r({freqDataQueue:t,timeDataQueue:e}))},this.fftSize/this.sampleRateHz*1e3)})}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(t){const e=t[0].length,n=new Float32Array(t.length*e);return t.forEach((t,r)=>n.set(t,r*e)),n}getTensorFromAudioDataArray(t,e){const n=new Float32Array(N(e));return n.set(t,n.length-t.length),Kt(n,e)}}class Zy extends Cy{constructor(t,e){if(super(),this.webcamVideoElement=t,this.webcamConfig=e,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=Qa([0],"int32"),this.webcamConfig.centerCrop){const t=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,e=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-t)/2,r=(1-e)/2,s=n+t,a=e+r;this.cropBox=Oi([r,n,a,s],[1,4])}else this.cropBox=Oi([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(t,e={}){if(n().get("IS_NODE"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!t){if(t=document.createElement("video"),!e.resizeWidth||!e.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");t.width=e.resizeWidth,t.height=e.resizeHeight}const r=new Zy(t,e);return await r.start(),r}async start(){this.webcamConfig.facingMode&&b("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`);try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(t){throw t.message="Error thrown while initializing video stream: "+t.message,t}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(t){console.log(t),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise(t=>{this.webcamVideoElement.onloadedmetadata=()=>{t()}})}async next(){if(this.isClosed)return{value:null,done:!0};let t;try{t=sn(this.webcamVideoElement)}catch(t){throw new Error("Error thrown converting video to pixels: "+JSON.stringify(t))}if(!this.resize)return{value:t,done:!1};try{return{value:this.cropAndResizeFrame(t),done:!1}}catch(t){throw new Error("Error thrown cropping the video: "+t.message)}finally{t.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(t){return Wn(()=>{const e=t.toFloat().expandDims(0);let n;n=fl.cropAndResize(e,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear");const r=n.shape;return n.reshape(r.slice(1))})}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach(t=>t.stop());try{this.webcamVideoElement.srcObject=null}catch(t){console.log(t),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class Qy{}class tb extends Cy{split(t){return new eb(this,t)}}class eb extends tb{constructor(t,e){super(),this.upstream=t,this.impl=new nb(t,e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class nb extends Fy{constructor(t,e){super(),this.upstream=t,this.separator=e,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const t=await this.upstream.next();if(t.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const e=t.value.split(this.separator);e[0]=this.carryover+e[0];for(const t of e.slice(0,-1))this.outputQueue.push(t);return this.carryover=e[e.length-1],!0}}class rb extends Cy{decodeUTF8(){return new sb(this)}}class sb extends tb{constructor(t){super(),this.upstream=t,this.impl=new ab(t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class ab extends Fy{constructor(t){if(super(),this.upstream=t,n().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:t}=require("string_decoder");this.decoder=new t("utf8")}}summary(){return this.upstream.summary()+" -> Utf8"}async pump(){const t=await this.upstream.next();let e,r;return!t.done&&(e=t.value,r=n().get("IS_BROWSER")?this.decoder.decode(e,{stream:!0}):this.decoder.write(Buffer.from(e.buffer)),this.outputQueue.push(r),!0)}}class ib extends rb{constructor(t,e={}){super(),this.file=t,this.options=e,b(t instanceof Uint8Array||!!n().get("IS_BROWSER")&&(t instanceof File||t instanceof Blob),()=>"FileChunkIterator only supports File, Blob and Uint8Array right now."),this.offset=e.offset||0,this.chunkSize=e.chunkSize||1048576}summary(){return"FileChunks "+this.file}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const t=new Promise((t,e)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)t(new Uint8Array(this.file.slice(this.offset,n)));else{const r=new FileReader;r.onload=n=>{let s=r.result;if(s instanceof ArrayBuffer&&(s=new Uint8Array(s)),!(s instanceof Uint8Array))return e(new TypeError("FileReader returned unknown type."));t(s)},r.onabort=t=>e(new Error("Aborted")),r.onerror=t=>e(new Error(t.type));const s=this.file.slice(this.offset,n);r.readAsArrayBuffer(s)}this.offset=n});return{value:await t,done:!1}}}const ob=t=>({method:t.method,headers:t.headers,body:t.body,mode:t.mode,credentials:t.credentials,cache:t.cache,redirect:t.redirect,referrer:t.referrer,integrity:t.integrity});function lb(t){return"string"==typeof t&&"file://"===t.substr(0,7)}class ub extends Qy{constructor(t,e={}){super(),this.input=t,this.options=e}async iterator(){if(lb(this.input)&&n().get("IS_NODE")){const t=require("fs");this.input=t.readFileSync(this.input.substr(7))}return new ib(this.input,this.options)}}class cb extends Qy{constructor(t,e={}){super(),this.url=t,this.fileOptions=e}async iterator(){return lb(this.url)?new ub(this.url,this.fileOptions).iterator():async function(t,e={}){let n,r;"string"==typeof t?n=t:(n=t.url,r=ob(t));const s=await tt(n,r);if(s.ok){const t=new Uint8Array(await s.arrayBuffer());return new ib(t,e)}throw new Error(s.statusText)}(this.url,this.fileOptions)}}var hb=Object.freeze({__proto__:null,array:function(t){return Vy(async()=>wy(t),t.length)},Dataset:Wy,zip:function(t){if(!my(t))throw new Error("The argument to zip() must be an object or array.");let e;if(Array.isArray(t))for(let n=0;n<t.length;n++)e=null==e?t[n].size:Math.min(e,t[n].size);else if(t instanceof Object)for(const n in t)e=null==e?t[n].size:Math.min(e,t[n].size);return Vy(async()=>function(t,e=zy.FAIL){return new Ly(t,e)}(await fy(t,t=>{if(t instanceof Wy)return{value:t.iterator(),recurse:!1};if(my(t))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")}),zy.SHORTEST),e)},CSVDataset:Yy,TextLineDataset:Gy,csv:function(t,e={}){return new Yy(new cb(t),e)},func:function(t){const e=vy(t);return Vy(async()=>e)},generator:function(t){return Vy(async()=>{const e=await t();return vy(()=>e.next())})},microphone:async function(t){return Jy.create(t)},webcam:async function(t,e){return Zy.create(t,e)},FileDataSource:ub,URLDataSource:cb,version_data:"2.4.0"});function pb(t,e){Array.isArray(t)||(t=[t]),t.forEach(t=>{null!=t&&b("complex64"!==t.dtype,()=>e+" does not support complex64 tensors in the CPU backend.")})}function db(t,e,n,r,s,a){const i=s.strideHeight,o=s.strideWidth,l=s.dilationHeight,u=s.dilationWidth,c=s.effectiveFilterHeight,h=s.effectiveFilterWidth,p=s.padInfo.top,d=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Re(s.outShape,n),g=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let e=0;e<s.batchSize;++e){const n=e*y,m=e*r[0];for(let e=0;e<s.inChannels;++e)for(let y=0;y<s.outHeight;++y){const w=y*i-p,v=Math.max(0,w),N=Math.min(s.inHeight,c+w),C=n+y*b;for(let n=0;n<s.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(s.inWidth,h+i);let y=f,b=0,w=0;for(let n=v;n<N;n+=l){const s=m+n*r[1];for(let n=c;n<p;n+=u){const i=t[s+n*r[2]+e];"max"===a&&i>y?y=i:"avg"===a&&(b+=i,w++)}if(isNaN(y))break}g[C+n*x+e]="avg"===a?b/w:y}}}return m}function fb(t,e,n,r,s=!1,a=!1){const i=Re(r.outShape,"int32"),o=r.strideHeight,l=r.strideWidth,u=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterHeight,p=r.effectiveFilterWidth,d=r.padInfo.top,f=r.padInfo.left,m=Re(e,n,t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=u;const b=Math.min(r.inHeight,h+g);for(let o=0;o<r.outWidth;++o){const h=o*l-f;let d=h;for(;d<0;)d+=c;const x=Math.min(r.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let n=y;n<b;n+=u){const i=n-g;for(let o=d;o<x;o+=c){const l=o-h,u=m.get(t,n,o,e);u>w&&(w=u,v=s?a?((t*r.inHeight+n)*r.inWidth+o)*r.inChannels+e:(n*r.inWidth+o)*r.inChannels+e:i*p+l)}}i.set(v,t,n,o,e)}}return i}const mb=Lo,gb=Xl,yb=Yl,bb=Jl,xb=Vi;function wb(t,e,n,r){if("linear"===n)return t.linear(e);if("relu"===n)return t.relu(e);if("elu"===n)return t.elu(e);if("relu6"===n)return t.relu6(e);if("prelu"===n)return t.prelu(e,r);throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}class vb extends tu{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new Ql(this,Bn())}write(t,e,r){this.firstUse&&(this.firstUse=!1,n().get("IS_NODE")&&Ml("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const s={};return this.data.set(s,{values:t,dtype:r,refCount:1}),s}incRef(t){this.data.get(t).refCount++}decRef(t){if(this.data.has(t)){this.data.get(t).refCount--}}move(t,e,n,r){this.data.set(t,{values:e,dtype:r,refCount:1})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){const{dtype:e,complexTensors:n}=this.data.get(t);if("complex64"===e){return zl(this.readSync(n.real.dataId),this.readSync(n.imag.dataId))}return this.data.get(t).values}bufferSync(t){const e=this.readSync(t.dataId);let n=e;if("string"===t.dtype)try{n=e.map(t=>nt(t))}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return Re(t.shape,t.dtype,n)}makeOutput(t,e,n){const r=this.write(t,e,n);return Bn().makeTensorFromDataId(r,e,n,this)}disposeData(t){if(this.data.has(t)){const{complexTensors:e}=this.data.get(t);null!=e&&(e.real.dispose(),e.imag.dispose()),this.data.delete(t)}}disposeIntermediateTensorInfo(t){const e=t.dataId;if(this.data.has(e)){const t=this.data.get(e);t.refCount--,t.refCount<1&&this.disposeData(e)}}async time(t){const e=Z();return t(),{kernelMs:Z()-e}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}complex(t,e){const n=this.makeOutput(null,t.shape,"complex64");return this.data.get(n.dataId).complexTensors={real:Bn().keep(t.clone()),imag:Bn().keep(e.clone())},n}real(t){return this.data.get(t.dataId).complexTensors.real.clone()}imag(t){return this.data.get(t.dataId).complexTensors.imag.clone()}slice(t,e,n){if(pb(t,"slice"),kn(t.shape,e,n)){const r=In(e,t.strides),s=N(n);return Kt(this.readSync(t.dataId).subarray(r,r+s),n,t.dtype)}const r=Re(n,t.dtype),s=this.bufferSync(t);for(let t=0;t<r.size;++t){const n=r.indexToLoc(t).map((t,n)=>t+e[n]);r.values[t]=s.get(...n)}return r.toTensor()}stridedSlice(t,e,n,r){pb(t,"stridedSlice");const s=mn(e,n,r);if(s.some(t=>0===t))return Kt([],s);const a=Re(s,t.dtype),i=this.bufferSync(t);for(let t=0;t<a.size;t++){const n=a.indexToLoc(t),s=new Array(n.length);for(let t=0;t<s.length;t++)s[t]=n[t]*r[t]+e[t];a.set(i.get(...s),...n)}return a.toTensor()}diag(t){const e=this.readSync(t.dataId),n=Re([t.size,t.size],t.dtype),r=n.values;for(let n=0;n<e.length;n++)r[n*t.size+n]=e[n];return n.toTensor()}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let s=0;for(let n=0;n<t.rank;n++)n!==e&&(r[s++]=t.shape[n]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[e]=n,o[n]=this.slice(t,a,i).reshape(r);return o}reverse(t,e){pb(t,"reverse");const n=Re(t.shape,t.dtype),r=this.bufferSync(t);for(let s=0;s<n.size;s++){const a=n.indexToLoc(s),i=a.slice();e.forEach(e=>i[e]=t.shape[e]-1-i[e]),n.set(r.get(...i),...a)}return n.toTensor()}concat(t,e){if("complex64"===t[0].dtype){const n=t.map(t=>Sa(t)),r=t.map(t=>Ms(t));return jt(this.concat(n,e),this.concat(r,e))}const n=t.map(t=>{const n=N(t.shape.slice(e));return t.as2D(-1,n)}),r=Fr(n.map(t=>t.shape),1),s=Re(r,t[0].dtype).values;if(1===n[0].shape[0]){let t=0;n.forEach(e=>{s.set(this.readSync(e.dataId),t),t+=e.size})}else{let t=0;n.forEach(e=>{const n=this.readSync(e.dataId);let a=0;for(let i=0;i<e.shape[0];++i){const o=i*r[1]+t;for(let t=0;t<e.shape[1];++t)s[o+t]=n[a++]}t+=e.shape[1]})}const a=Fr(t.map(t=>t.shape),e);return Kt(s,a,t[0].dtype)}neg(t){return pb(t,"neg"),this.multiply(Ws(-1),t)}add(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t+n,imag:e+r})):this.broadcastedBinaryOp(t,e,kt(t.dtype,e.dtype),(t,e)=>t+e)}addN(t){pb(t,"addN");const e=t.map(t=>this.readSync(t.dataId)),n=Re(t[0].shape,t[0].dtype),r=n.values;for(let n=0;n<t.length;n++){const t=e[n];for(let e=0;e<r.length;e++)r[e]+=t[e]}return n.toTensor()}softmax(t,e){const n=$([e],t.shape),r=ea(t,n),s=sr(r.shape,n),a=this.subtract(t,r.reshape(s)),i=this.exp(a),o=this.sum(i,n).reshape(s);return Xn(i,o)}subtract(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t-n,imag:e-r})):this.broadcastedBinaryOp(t,e,kt(t.dtype,e.dtype),(t,e)=>t-e)}pow(t,e){return pb([t,e],"pow"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.pow(t,e))}batchMatMul(t,e,n,r){pb([t,e],"matMul");const s=n?t.shape[1]:t.shape[2],a=n?t.shape[2]:t.shape[1],i=r?e.shape[1]:e.shape[2],o=t.shape[0],l=this.readSync(t.dataId),u=this.readSync(e.dataId),[c,h,p]=n?[t.strides[0],1,t.strides[1]]:[t.strides[0],t.strides[1],1],[d,f,m]=r?[1,e.strides[1],e.strides[0]]:[e.strides[1],1,e.strides[0]],g=a*i,y=Re([o,a,i],t.dtype),b=y.values,x=this.blockSize;for(let t=0;t<o;t++)for(let e=0;e<a;e+=x)for(let n=0;n<i;n+=x)for(let r=0;r<s;r+=x){const o=Math.min(e+x,a),y=Math.min(n+x,i),w=Math.min(r+x,s);for(let s=e;s<o;s++)for(let e=n;e<y;e++){let n=0;for(let a=r;a<w;a++)n+=l[t*c+s*h+a*p]*u[a*d+e*f+t*m];b[t*g+(s*i+e)]+=n}}return y.toTensor()}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){let o=this.batchMatMul(t,e,n,r);return s&&(o=this.add(o,s)),a&&(o=wb(this,o,a,i)),o}multiply(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t*n-e*r,imag:t*r+e*n})):this.broadcastedBinaryOp(t,e,kt(t.dtype,e.dtype),(t,e)=>t*e)}floorDiv(t,e){pb([t,e],"floorDiv");return this.broadcastedBinaryOp(t,e,"int32",(t,e)=>Math.floor(t/e))}sum(t,e){pb(t,"sum"),ar("sum",e,t.rank);const[n,r]=rr(t.shape,e),s=da(n,kt(t.dtype,"int32")),a=N(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=0;for(let t=0;t<a;++t)n+=o[e+t];i[t]=n}return s}prod(t,e){pb(t,"sum");const[n,r]=rr(t.shape,e),s=da(n,kt(t.dtype,"int32")),a=N(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=1;for(let t=0;t<a;++t)n*=o[e+t];i[t]=n}return s}unsortedSegmentSum(t,e,n){pb(t,"unsortedSegmentSum");const r=[],s=t.rank-e.rank;for(let t=0;t<s;++t)e=e.expandDims(t+1);for(let s=0;s<n;++s){const n=Ws(s,"int32"),a=gs(n,e).asType("float32").mul(t).sum(0);r.push(a)}return Ri(r)}argMin(t,e){pb(t,"argMin");const n=[e];ar("argMin",n,t.rank);const[r,s]=rr(t.shape,n),a=da(r,"int32"),i=N(s),o=this.readSync(a.dataId),l=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=l[e],r=0;for(let t=0;t<i;++t){const s=l[e+t];s<n&&(n=s,r=t)}o[t]=r}return a}argMax(t,e){pb(t,"argMax");const n=[e];ar("argMax",n,t.rank);const[r,s]=rr(t.shape,n),a=da(r,"int32"),i=N(s),o=this.readSync(a.dataId),l=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=l[e],r=0;for(let t=0;t<i;++t){const s=l[e+t];s>n&&(n=s,r=t)}o[t]=r}return a}cumsum(t,e,n,r){if(pb(t,"cumsum"),e!==t.rank-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${t.rank-1} but got axis=`+e);const s=kt(t.dtype,"int32"),a=da(t.shape,s),i=this.readSync(a.dataId),o=this.readSync(t.dataId),l=t.shape[t.rank-1],u=r?(t,e)=>t+l-e-1:(t,e)=>t+e;for(let t=0;t<o.length;t+=l)for(let e=0;e<l;e++){const r=u(t,e);if(0===e)i[r]=n?0:o[r];else{const s=u(t,e-1);i[r]=n?o[s]+i[s]:o[r]+i[s]}}return a}equal(t,e){return pb([t,e],"equal"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t===e?1:0)}notEqual(t,e){return pb([t,e],"notEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t!==e?1:0)}less(t,e){return pb([t,e],"less"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t<e?1:0)}lessEqual(t,e){return pb([t,e],"lessEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t<=e?1:0)}greater(t,e){return pb([t,e],"greater"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t>e?1:0)}greaterEqual(t,e){return pb([t,e],"greaterEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t>=e?1:0)}logicalNot(t){pb(t,"logicalNot");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)n[t]=e[t]?0:1;return this.makeOutput(n,t.shape,"bool")}logicalAnd(t,e){return pb([t,e],"logicalAnd"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t&&e)}logicalOr(t,e){return pb([t,e],"logicalOr"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t||e)}select(t,e,n){pb([t,e,n],"select");const r=this.readSync(t.dataId),s=this.readSync(e.dataId),a=this.readSync(n.dataId),i=da(e.shape,kt(e.dtype,n.dtype)),o=this.readSync(i.dataId);let l=0;const u=0===t.rank||t.rank>1||1===e.rank?1:N(e.shape.slice(1));for(let t=0;t<r.length;t++)for(let e=0;e<u;e++)1===r[t]?o[l++]=s[t]:o[l++]=a[t];return i}where(t){pb([t],"where");const e=this.readSync(t.dataId);return xb(t.shape,e)}topk(t,e,n){pb(t,"topk");const r=this.readSync(t.dataId);return bb(r,t.shape,t.dtype,e,n)}min(t,e){pb(t,"min"),ar("min",e,t.rank);const[n,r]=rr(t.shape,e),s=da(n,t.dtype),a=N(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];r<n&&(n=r)}i[t]=n}return s}minimum(t,e){return pb([t,e],"minimum"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.min(t,e))}mod(t,e){return pb([t,e],"mod"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>{const n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e})}maximum(t,e){return pb([t,e],"maximum"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.max(t,e))}all(t,e){pb(t,"all"),ar("all",e,t.rank);const[n,r]=rr(t.shape,e),s=da(n,t.dtype),a=N(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];n=n&&r}i[t]=n}return s}any(t,e){pb(t,"any"),ar("any",e,t.rank);const[n,r]=rr(t.shape,e),s=da(n,t.dtype),a=N(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];n=n||r}i[t]=n}return s}squaredDifference(t,e){return pb([t,e],"squaredDifference"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>{const n=t-e;return n*n})}ceil(t){pb(t,"ceil");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.ceil(e[t]);return this.makeOutput(n,t.shape,"float32")}floor(t){pb(t,"floor");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.floor(e[t]);return this.makeOutput(n,t.shape,"float32")}sign(t){pb(t,"x");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)e[t]<0?n[t]=-1:e[t]>0?n[t]=1:n[t]=0;return this.makeOutput(n,t.shape,"float32")}isNaN(t){pb(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Number.isNaN(e[t])&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}isInf(t){pb(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Math.abs(e[t])===1/0&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}isFinite(t){pb(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Number.isFinite(e[t])&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}round(t){pb(t,"round");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=Math.floor(e[t]);e[t]-r<.5?n[t]=Math.floor(e[t]):e[t]-r>.5?n[t]=Math.ceil(e[t]):n[t]=r%2==0?r:r+1}return this.makeOutput(n,t.shape,"float32")}exp(t){pb(t,"exp");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.exp(e[t]);return this.makeOutput(n,t.shape,"float32")}expm1(t){pb(t,"expm1");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.expm1(e[t]);return this.makeOutput(n,t.shape,"float32")}log(t){pb(t,"log");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.log(r)}return this.makeOutput(n,t.shape,"float32")}log1p(t){pb(t,"log1p");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.log1p(r)}return this.makeOutput(n,t.shape,"float32")}sqrt(t){pb(t,"sqrt");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.sqrt(r)}return this.makeOutput(n,t.shape,"float32")}rsqrt(t){pb(t,"rsqrt");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=1/Math.sqrt(r)}return this.makeOutput(n,t.shape,"float32")}reciprocal(t){pb(t,"reciprocal");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=1/e[t];return this.makeOutput(n,t.shape,"float32")}linear(t){return t}relu(t){pb(t,"relu");const e=da(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t)n[t]=Math.max(0,r[t]);return e}relu6(t){pb(t,"relu");const e=da(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t)n[t]=Math.min(Math.max(0,r[t]),6);return e}prelu(t,e){return pb([t,e],"prelu"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>t<0?e*t:t)}elu(t){pb(t,"elu");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t){const r=n[t];e[t]=r>=0?r:Math.exp(r)-1}return this.makeOutput(e,t.shape,"float32")}eluDer(t,e){pb([t,e],"eluDer");const n=new Float32Array(e.size),r=this.readSync(e.dataId),s=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const e=r[t];n[t]=e>=1?s[t]:s[t]*(e+1)}return this.makeOutput(n,e.shape,"float32")}selu(t){pb(t,"selu");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t){const r=n[t];e[t]=r>=0?1.0507009873554805*r:1.7580993408473768*(Math.exp(r)-1)}return this.makeOutput(e,t.shape,"float32")}clip(t,e,n){pb(t,"clip");const r=new Float32Array(t.size),s=this.readSync(t.dataId);for(let t=0;t<s.length;++t){const a=s[t];r[t]=a>n?n:a<e?e:a}return this.makeOutput(r,t.shape,t.dtype)}abs(t){const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.abs(n[t]);return this.makeOutput(e,t.shape,"float32")}complexAbs(t){const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<t.size;++r){const t=n[2*r],s=n[2*r+1];e[r]=Math.hypot(t,s)}return this.makeOutput(e,t.shape,"float32")}int(t){pb(t,"int");const e=new Int32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=n[t];return this.makeOutput(e,t.shape,"int32")}sigmoid(t){pb(t,"sigmoid");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=1/(1+Math.exp(-n[t]));return this.makeOutput(e,t.shape,"float32")}softplus(t){pb(t,"softplus");const e=Math.log(1.1920928955078125e-7)+2,n=new Float32Array(t.size),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const s=r[t]>-e,a=r[t]<e,i=Math.exp(r[t]);let o;o=a?i:s?r[t]:Math.log(1+i),n[t]=o}return this.makeOutput(n,t.shape,"float32")}sin(t){pb(t,"sin");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.sin(n[t]);return this.makeOutput(e,t.shape,"float32")}tan(t){pb(t,"tan");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.tan(n[t]);return this.makeOutput(e,t.shape,"float32")}asin(t){pb(t,"asin");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.asin(n[t]);return this.makeOutput(e,t.shape,"float32")}acos(t){pb(t,"acos");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.acos(n[t]);return this.makeOutput(e,t.shape,"float32")}atan(t){pb(t,"atan");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.atan(n[t]);return this.makeOutput(e,t.shape,"float32")}atan2(t,e){return pb([t,e],"atan2"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.atan2(t,e))}sinh(t){pb(t,"sinh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.sinh(n[t]);return this.makeOutput(e,t.shape,"float32")}cosh(t){pb(t,"cosh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.cosh(n[t]);return this.makeOutput(e,t.shape,"float32")}tanh(t){pb(t,"tanh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=k(n[t]);return this.makeOutput(e,t.shape,"float32")}asinh(t){pb(t,"asinh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.asinh(n[t]);return this.makeOutput(e,t.shape,"float32")}acosh(t){pb(t,"acosh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.acosh(n[t]);return this.makeOutput(e,t.shape,"float32")}atanh(t){pb(t,"atanh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.atanh(n[t]);return this.makeOutput(e,t.shape,"float32")}erf(t){pb(t,"erf");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t){const r=Math.sign(n[t]),s=Math.abs(n[t]),a=1/(1+.3275911*s);e[t]=r*(1-((((1.061405429*a-1.453152027)*a+1.421413741)*a-.284496736)*a+.254829592)*a*Math.exp(-s*s))}return this.makeOutput(e,t.shape,"float32")}step(t,e=0){pb(t,"step");const n=new Float32Array(t.size),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const s=r[t];isNaN(s)?n[t]=NaN:n[t]=s>0?1:e}return this.makeOutput(n,t.shape,"float32")}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){let i=this.conv2d(t,e,n);return r&&(i=this.add(i,r)),s&&(i=wb(this,i,s,a)),i}conv2d(t,e,n){pb([t,e],"conv2d");const r=n.filterHeight,s=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,o=n.padInfo.left,l=n.padInfo.top,u="channelsLast"===n.dataFormat,c=Re(n.outShape,t.dtype),h=t.strides[0],p=u?t.strides[1]:t.strides[2],d=u?t.strides[2]:1,f=u?1:t.strides[1],m=c.strides[0],g=u?c.strides[1]:c.strides[2],y=u?c.strides[2]:1,b=u?1:c.strides[1],x=this.readSync(t.dataId),w=this.readSync(e.dataId),v=c.values;for(let t=0;t<n.batchSize;++t){const u=t*h,c=t*m;for(let t=0;t<n.outHeight;++t){const h=c+t*g,m=t*n.strideHeight-l;for(let t=0;t<r;t++){const r=m+t*a;if(r<0||r>=n.inHeight)continue;const l=t*e.strides[0],c=u+r*p;for(let t=0;t<n.outWidth;++t){const r=h+t*y,a=t*n.strideWidth-o;for(let t=0;t<s;t++){const s=a+t*i;if(s<0||s>=n.inWidth)continue;const o=c+s*d;let u=l+t*e.strides[1];for(let t=0;t<n.inChannels;++t){const e=x[o+t*f];for(let t=0;t<n.outChannels;++t)v[r+t*b]+=e*w[u+t];u+=n.outChannels}}}}}}return c.toTensor()}conv3d(t,e,n){const r=n.filterDepth,s=n.filterHeight,a=n.filterWidth,i=n.dilationDepth,o=n.dilationHeight,l=n.dilationWidth,u=n.padInfo.front,c=n.padInfo.left,h=n.padInfo.top,p=Re(n.outShape,t.dtype),d=this.readSync(t.dataId),f=this.readSync(e.dataId),m=p.values;for(let g=0;g<n.batchSize;++g){const y=g*t.strides[0],b=g*p.strides[0];for(let g=0;g<n.outDepth;++g){const x=b+g*p.strides[1],w=g*n.strideDepth-u;for(let u=0;u<r;u++){const r=w+u*i;if(r<0||r>=n.inDepth)continue;const g=u*e.strides[0],b=y+r*t.strides[1];for(let r=0;r<n.outHeight;++r){const i=x+r*p.strides[2],u=r*n.strideHeight-h;for(let r=0;r<s;r++){const s=u+r*o;if(s<0||s>=n.inHeight)continue;const h=g+r*e.strides[1],p=b+s*t.strides[2];for(let t=0;t<n.outWidth;++t){const r=i+t*n.outChannels,s=t*n.strideWidth-c;for(let t=0;t<a;t++){const a=s+t*l;if(a<0||a>=n.inWidth)continue;const i=h+t*e.strides[2],o=p+a*n.inChannels;let u=i;for(let t=0;t<n.inChannels;++t){const e=d[o+t];for(let t=0;t<n.outChannels;++t)m[r+t]+=e*f[u+t];u+=n.outChannels}}}}}}}}return p.toTensor()}conv2dDerInput(t,e,n){pb([t,e],"conv2dDerInput");const r=Re(n.inShape,"float32"),s=r.values,a=this.readSync(t.dataId),i=this.readSync(e.dataId),[o,l,u]=e.strides,{batchSize:c,filterHeight:h,filterWidth:p,inChannels:d,inHeight:f,inWidth:m,outChannels:g,outHeight:y,outWidth:b,strideHeight:x,strideWidth:w,dataFormat:v}=n,N=h-1-n.padInfo.top,C=p-1-n.padInfo.left,S="channelsLast"===v,k=r.strides[0],I=S?r.strides[1]:r.strides[2],E=S?r.strides[2]:1,A=S?1:r.strides[1],T=t.strides[0],$=S?t.strides[1]:t.strides[2],R=S?t.strides[2]:1,D=S?1:t.strides[1];for(let t=0;t<c;++t)for(let e=0;e<d;++e)for(let n=0;n<f;++n){const r=n-N,c=Math.max(0,Math.ceil(r/x)),d=Math.min(y,(h+r)/x);for(let f=0;f<m;++f){const m=f-C,y=Math.max(0,Math.ceil(m/w)),v=Math.min(b,(p+m)/w);let N=0;for(let n=c;n<d;++n){const s=n*x-r;for(let r=y;r<v;++r){const c=T*t+$*n+R*r,d=o*(h-1-s)+l*(p-1-(r*w-m))+u*e;for(let t=0;t<g;++t){N+=a[c+D*t]*i[d+t]}}}s[k*t+I*n+E*f+A*e]=N}}return r.toTensor()}conv3dDerInput(t,e,n){const r=Re(n.inShape,"float32"),s=r.values,[a,i,o,l]=r.strides,u=this.readSync(t.dataId),[c,h,p,d]=t.strides,f=this.readSync(e.dataId),[m,g,y,b]=e.strides,{batchSize:x,filterDepth:w,filterHeight:v,filterWidth:N,inChannels:C,inDepth:S,inHeight:k,inWidth:I,outChannels:E,outDepth:A,outHeight:T,outWidth:$,strideDepth:R,strideHeight:D,strideWidth:_}=n,F=w-1-n.padInfo.front,O=v-1-n.padInfo.top,M=N-1-n.padInfo.left;for(let t=0;t<x;++t)for(let e=0;e<C;++e)for(let n=0;n<S;++n){const r=n-F,x=Math.max(0,Math.ceil(r/R)),C=Math.min(A,(w+r)/R);for(let S=0;S<k;++S){const k=S-O,A=Math.max(0,Math.ceil(k/D)),F=Math.min(T,(v+k)/D);for(let T=0;T<I;++T){const I=T-M,O=Math.max(0,Math.ceil(I/_)),z=Math.min($,(N+I)/_);let L=0;for(let n=x;n<C;++n){const s=n*R-r;for(let r=A;r<F;++r){const a=r*D-k;for(let i=O;i<z;++i){const o=c*t+h*n+p*r+d*i,l=m*(w-1-s)+g*(v-1-a)+y*(N-1-(i*_-I))+b*e;for(let t=0;t<E;++t){L+=u[o+t]*f[l+t]}}}}s[a*t+i*n+o*S+l*T+e]=L}}}return r.toTensor()}conv2dDerFilter(t,e,n){pb([t,e],"conv2dDerFilter");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o="channelsLast"===n.dataFormat,l=Re(n.filterShape,"float32"),u=n.padInfo.left,c=n.padInfo.top,h=this.bufferSync(t),p=this.bufferSync(e);for(let t=0;t<a;++t){const e=Math.max(0,Math.ceil((c-t)/r)),a=Math.min(n.outHeight,(n.inHeight+c-t)/r);for(let d=0;d<i;++d){const i=Math.max(0,Math.ceil((u-d)/s)),f=Math.min(n.outWidth,(n.inWidth+u-d)/s);for(let m=0;m<n.inChannels;++m)for(let g=0;g<n.outChannels;++g){let y=0;for(let l=0;l<n.batchSize;++l)for(let n=e;n<a;++n){const e=t+n*r-c;for(let t=i;t<f;++t){const r=d+t*s-u;y+=o?h.get(l,e,r,m)*p.get(l,n,t,g):h.get(l,m,e,r)*p.get(l,g,n,t)}}l.set(y,t,d,m,g)}}}return l.toTensor()}conv3dDerFilter(t,e,n){const r=n.strideDepth,s=n.strideHeight,a=n.strideWidth,i=n.filterDepth,o=n.filterHeight,l=n.filterWidth,u=Re(n.filterShape,"float32"),c=u.values,[h,p,d,f]=u.strides,m=this.readSync(e.dataId),[g,y,b,x]=e.strides,w=this.readSync(t.dataId),[v,N,C,S]=t.strides,k=n.padInfo.front,I=n.padInfo.left,E=n.padInfo.top;for(let t=0;t<i;++t){const e=Math.max(0,Math.ceil((k-t)/r)),i=Math.min(n.outDepth,(n.inDepth+k-t)/r),u=t*h;for(let h=0;h<o;++h){const o=Math.max(0,Math.ceil((E-h)/s)),A=Math.min(n.outHeight,(n.inHeight+E-h)/s),T=h*p+u;for(let u=0;u<l;++u){const l=Math.max(0,Math.ceil((I-u)/a)),p=Math.min(n.outWidth,(n.inWidth+I-u)/a),$=u*d+T;for(let d=0;d<n.inChannels;++d){const T=d*f+$;for(let f=0;f<n.outChannels;++f){let $=0;for(let c=0;c<n.batchSize;++c){const n=c*v,T=c*g;for(let c=e;c<i;++c){const e=(t+c*r-k)*N+n,i=c*y+T;for(let t=o;t<A;++t){const n=(h+t*s-E)*C+e,r=t*b+i;for(let t=l;t<p;++t){const e=t*x+r;$+=w[(u+t*a-I)*S+n+d]*m[e+f]}}}}c[T+f]=$}}}}}return u.toTensor()}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){let i=this.depthwiseConv2D(t,e,n);return r&&(i=this.add(i,r)),s&&(i=wb(this,i,s,a)),i}depthwiseConv2D(t,e,n){pb([t,e],"depthwiseConv2D");const r=n.filterHeight,s=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,o=n.padInfo.left,l=n.padInfo.top,u=n.outChannels/n.inChannels,c=Re(n.outShape,t.dtype),h=this.readSync(t.dataId),p=this.readSync(e.dataId),d=c.values;for(let f=0;f<n.batchSize;++f){const m=f*t.strides[0],g=f*c.strides[0];for(let f=0;f<n.outHeight;++f){const y=g+f*c.strides[1],b=f*n.strideHeight-o;for(let o=0;o<r;++o){const r=b+o*a;if(r<0||r>=n.inHeight)continue;const f=o*e.strides[0],g=m+r*t.strides[1];for(let t=0;t<n.outWidth;++t){const r=y+t*c.strides[2],a=t*n.strideWidth-l;for(let t=0;t<s;++t){const s=a+t*i;if(s<0||s>=n.inWidth)continue;const o=f+t*e.strides[1],l=g+s*n.inChannels;let c=r,m=o;for(let t=0;t<n.inChannels;++t){const e=h[l+t];for(let t=0;t<u;++t)d[c+t]+=e*p[m+t];c+=u,m+=u}}}}}}return c.toTensor()}depthwiseConv2DDerInput(t,e,n){pb([t,e],"depthwiseConv2DDerInput");const r=Re(n.inShape,"float32"),s=r.values,[a,i,o]=r.strides,l=this.readSync(t.dataId),[u,c,h]=t.strides,p=this.readSync(e.dataId),[d,f,m]=e.strides,{batchSize:g,filterHeight:y,filterWidth:b,inChannels:x,inHeight:w,inWidth:v,outChannels:N,outHeight:C,outWidth:S,strideHeight:k,strideWidth:I}=n,E=y-1-n.padInfo.top,A=b-1-n.padInfo.left,T=N/x;for(let t=0;t<g;++t)for(let e=0;e<x;++e)for(let n=0;n<w;++n){const r=n-E,g=Math.max(0,Math.ceil(r/k)),x=Math.min(C,(y+r)/k);for(let w=0;w<v;++w){const v=w-A,N=Math.max(0,Math.ceil(v/I)),C=Math.min(S,(b+v)/I);let E=0;for(let n=g;n<x;++n){const s=n*k-r;for(let r=N;r<C;++r){const a=u*t+c*n+h*r,i=d*(y-1-s)+f*(b-1-(r*I-v))+m*e;for(let t=0;t<T;++t){E+=l[a+(e*T+t)]*p[i+t]}}}s[a*t+i*n+o*w+e]=E}}return r.toTensor()}depthwiseConv2DDerFilter(t,e,n){pb([t,e],"depthwiseConv2DDerFilter");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o=Re(n.filterShape,"float32"),l=n.padInfo.left,u=n.padInfo.top,c=n.outChannels/n.inChannels,h=this.bufferSync(t),p=this.bufferSync(e);for(let t=0;t<a;++t){const e=Math.max(0,Math.ceil((u-t)/r)),a=Math.min(n.outHeight,(n.inHeight+u-t)/r);for(let d=0;d<i;++d){const i=Math.max(0,Math.ceil((l-d)/s)),f=Math.min(n.outWidth,(n.inWidth+l-d)/s);for(let m=0;m<n.outChannels;++m){const g=Math.trunc(m/c),y=m%c;let b=0;for(let o=0;o<n.batchSize;++o)for(let n=e;n<a;++n){const e=t+n*r-u;for(let t=i;t<f;++t){const r=d+t*s-l;b+=h.get(o,e,r,g)*p.get(o,n,t,m)}}o.set(b,t,d,g,y)}}}return o.toTensor()}tile(t,e){return pb(t,"tile"),yb(this.bufferSync(t),e)}gather(t,e,n){pb([t,e],"gather");const r=t.shape.slice(),s=this.readSync(e.dataId);r[n]=s.length;const a=Re(r,t.dtype),i=this.bufferSync(t);for(let t=0;t<a.size;++t){const e=a.indexToLoc(t),r=e.slice();r[n]=s[e[n]];const o=i.locToIndex(r);a.values[t]=i.values[o]}return a.toTensor()}batchToSpaceND(t,e,n){pb([t],"batchToSpaceND");const r=e.reduce((t,e)=>t*e),s=$l(t.shape,e,r),a=Rl(s.length,e.length),i=Dl(t.shape,e,r),o=_l(n,e.length),l=Fl(i,n,e.length);return Qe(t.reshape(s),a).reshape(i).slice(o,l)}maxPool(t,e){return pb(t,"maxPool"),db(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,"max").toTensor()}maxPoolBackprop(t,e,n,r){pb([e,n],"maxPoolBackprop");const s=this.readSync(e.dataId),a=Re(r.outShape,e.dtype,fb(s,e.shape,e.dtype,r).values),i=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,p=h-1-r.padInfo.left,d=c-1-r.padInfo.top,f=Re(e.shape,"float32"),m=this.bufferSync(t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.inHeight;++n)for(let s=0;s<r.inWidth;++s){const g=n-d,y=s-p;let b=0;for(let n=0;n<c;n+=l){const s=(g+n)/i;if(!(s<0||s>=r.outHeight||Math.floor(s)!==s))for(let i=0;i<h;i+=u){const l=(y+i)/o;if(l<0||l>=r.outWidth||Math.floor(l)!==l)continue;const u=c*h-1-a.get(t,s,l,e)===n*h+i?1:0;0!==u&&(b+=m.get(t,s,l,e)*u)}}f.set(b,t,n,s,e)}return f.toTensor()}avgPoolBackprop(t,e,n){pb([t,e],"avgPoolBackprop");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o=n.dilationHeight,l=n.dilationWidth,u=n.effectiveFilterHeight,c=n.effectiveFilterWidth,h=c-1-n.padInfo.left,p=u-1-n.padInfo.top,d=Re(e.shape,"float32"),f=1/(a*i),m=this.bufferSync(t);for(let t=0;t<n.batchSize;++t)for(let e=0;e<n.inChannels;++e)for(let a=0;a<n.inHeight;++a)for(let i=0;i<n.inWidth;++i){const g=a-p,y=i-h;let b=0;for(let a=0;a<u;a+=o){const i=(g+a)/r;if(!(i<0||i>=n.outHeight||Math.floor(i)!==i))for(let r=0;r<c;r+=l){const a=(y+r)/s;a<0||a>=n.outWidth||Math.floor(a)!==a||(b+=m.get(t,i,a,e))}}d.set(b*f,t,a,i,e)}return d.toTensor()}pool3d(t,e,n){pb(t,"pool3d");const r=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,l=e.dilationWidth,u=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.front,d=e.padInfo.top,f=e.padInfo.left,m="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=this.readSync(t.dataId),y=Re(e.outShape,t.dtype),b=y.values,x=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],w=e.outShape[2]*e.outShape[3]*e.outShape[4],v=e.outShape[3]*e.outShape[4],N=e.outShape[4];for(let y=0;y<e.batchSize;++y){const C=y*x,S=y*t.strides[0];for(let y=0;y<e.inChannels;++y)for(let x=0;x<e.outDepth;++x){const k=x*r-p;let I=k;for(;I<0;)I+=i;const E=Math.min(e.inDepth,u+k),A=C+x*w;for(let r=0;r<e.outHeight;++r){const u=r*s-d;let p=u;for(;p<0;)p+=o;const x=Math.min(e.inHeight,c+u),w=A+r*v;for(let r=0;r<e.outWidth;++r){const s=r*a-f;let u=s;for(;u<0;)u+=l;const c=Math.min(e.inWidth,h+s),d=w+r*N;let v=m,C=0,k=0;for(let e=I;e<E;e+=i){const r=S+e*t.strides[1];for(let e=p;e<x;e+=o){const s=r+e*t.strides[2];for(let e=u;e<c;e+=l){const r=g[s+e*t.strides[3]+y];if("max"===n&&r>v?v=r:"avg"===n&&(C+=r,k++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}b[d+y]="avg"===n?C/k:v}}}}return y.toTensor()}avgPool3d(t,e){return pb(t,"avgPool3d"),this.pool3d(t,e,"avg").toFloat()}avgPool3dBackprop(t,e,n){pb([t,e],"avgPool3dBackprop");const r=n.strideDepth,s=n.strideHeight,a=n.strideWidth,i=n.filterDepth,o=n.filterHeight,l=n.filterWidth,u=n.dilationDepth,c=n.dilationHeight,h=n.dilationWidth,p=n.effectiveFilterDepth,d=n.effectiveFilterHeight,f=n.effectiveFilterWidth,m=p-1-n.padInfo.front,g=f-1-n.padInfo.left,y=d-1-n.padInfo.top,b=Re(e.shape,"float32"),x=1/(i*o*l),w=this.bufferSync(t);for(let t=0;t<n.batchSize;++t)for(let e=0;e<n.inChannels;++e)for(let i=0;i<n.inDepth;++i)for(let o=0;o<n.inHeight;++o)for(let l=0;l<n.inWidth;++l){const v=i-m,N=o-y,C=l-g;let S=0;for(let i=0;i<p;i+=u){const o=(v+i)/r;if(!(o<0||o>=n.outDepth||Math.floor(o)!==o))for(let r=0;r<d;r+=c){const i=(N+r)/s;if(!(i<0||i>=n.outHeight||Math.floor(i)!==i))for(let r=0;r<f;r+=h){const s=(C+r)/a;s<0||s>=n.outWidth||Math.floor(s)!==s||(S+=w.get(t,o,i,s,e))}}}b.set(S*x,t,i,o,l,e)}return b.toTensor()}maxPool3d(t,e){return pb(t,"maxPool3d"),this.pool3d(t,e,"max").toFloat()}maxPool3dPositions(t,e){const n=Re(e.outShape,"int32"),r=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,l=e.dilationWidth,u=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.front,d=e.padInfo.top,f=e.padInfo.left,m=this.bufferSync(t);for(let t=0;t<e.batchSize;++t)for(let g=0;g<e.inChannels;++g)for(let y=0;y<e.outDepth;++y){const b=y*r-p;let x=b;for(;x<0;)x+=i;const w=Math.min(e.inDepth,u+b);for(let r=0;r<e.outHeight;++r){const u=r*s-d;let p=u;for(;p<0;)p+=o;const v=Math.min(e.inHeight,c+u);for(let s=0;s<e.outWidth;++s){const d=s*a-f;let N=d;for(;N<0;)N+=l;const C=Math.min(e.inWidth,h+d);let S=Number.NEGATIVE_INFINITY,k=-1;for(let e=x;e<w;e+=i){const n=e-b;for(let r=p;r<v;r+=o){const s=r-u;for(let a=N;a<C;a+=l){const i=a-d,o=m.get(t,e,r,a,g);o>=S&&(S=o,k=n*c*h+s*c+i)}}}n.set(k,t,y,r,s,g)}}}return n.toTensor()}maxPool3dBackprop(t,e,n,r){pb([e,n],"maxPool3dBackprop");const s=this.maxPool3dPositions(e,r),a=r.strideDepth,i=r.strideHeight,o=r.strideWidth,l=r.dilationDepth,u=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterDepth,p=r.effectiveFilterHeight,d=r.effectiveFilterWidth,f=h-1-r.padInfo.front,m=d-1-r.padInfo.left,g=p-1-r.padInfo.top,y=Re(e.shape,"float32"),b=this.bufferSync(s),x=this.bufferSync(t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.inDepth;++n)for(let s=0;s<r.inHeight;++s)for(let w=0;w<r.inWidth;++w){const v=n-f,N=s-g,C=w-m;let S=0;for(let n=0;n<h;n+=l){const s=(v+n)/a;if(!(s<0||s>=r.outDepth||Math.floor(s)!==s))for(let a=0;a<p;a+=u){const l=(N+a)/i;if(!(l<0||l>=r.outHeight||Math.floor(l)!==l))for(let i=0;i<d;i+=c){const u=(C+i)/o;if(u<0||u>=r.outWidth||Math.floor(u)!==u)continue;const c=h*p*d-1-b.get(t,s,l,u,e)===n*p*d+a*d+i?1:0;0!==c&&(S+=x.get(t,s,l,u,e)*c)}}}y.set(S,t,n,s,w,e)}return y.toTensor()}cast(t,e){return Hl(t,e,this)}avgPool(t,e){return pb(t,"avgPool"),pb(t,"maxPool"),db(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,"avg").toTensor().toFloat()}resizeBilinear(t,e,n,r){pb(t,"resizeBilinear");const[s,a,i,o]=t.shape,l=this.readSync(t.dataId),u=new Float32Array(N([s,e,n,o])),c=[r&&e>1?a-1:a,r&&n>1?i-1:i],h=[r&&e>1?e-1:e,r&&n>1?n-1:n];let p=0;const d=c[0]/h[0],f=c[1]/h[1];for(let r=0;r<s;r++)for(let s=0;s<e;s++){const e=d*s,c=Math.floor(e),h=e-c,m=Math.min(a-1,Math.ceil(e)),g=r*t.strides[0]+c*t.strides[1],y=r*t.strides[0]+m*t.strides[1];for(let e=0;e<n;e++){const n=f*e,r=Math.floor(n),s=n-r,a=Math.min(i-1,Math.ceil(n)),c=g+r*t.strides[2],d=y+r*t.strides[2],m=g+a*t.strides[2],b=y+a*t.strides[2];for(let t=0;t<o;t++){const e=l[c+t],n=l[d+t],r=e+(l[m+t]-e)*s,a=r+(n+(l[b+t]-n)*s-r)*h;u[p++]=a}}}return Kt(u,[s,e,n,o])}resizeBilinearBackprop(t,e,n){pb([t,e],"resizeBilinearBackprop");const[r,s,a,i]=e.shape,[,o,l]=t.shape,u=new Float32Array(r*s*a*i),c=[n&&o>1?s-1:s,n&&l>1?a-1:a],h=[n&&o>1?o-1:o,n&&l>1?l-1:l],p=c[0]/h[0],d=c[1]/h[1],f=this.readSync(t.dataId);let m=0;for(let t=0;t<r;t++){const n=t*e.strides[0];for(let t=0;t<o;t++){const r=t*p,o=Math.floor(r),c=Math.min(Math.ceil(r),s-1),h=n+o*e.strides[1],g=n+c*e.strides[1],y=r-o,b=1-y;for(let t=0;t<l;t++){const n=t*d,r=Math.floor(n),s=Math.min(Math.ceil(n),a-1),o=n-r,l=1-o,c=h+r*e.strides[2],p=h+s*e.strides[2],x=g+r*e.strides[2],w=g+s*e.strides[2],v=b*l,N=b*o,C=y*l,S=y*o;for(let t=0;t<i;t++){const e=f[m++];u[c+t]+=e*v,u[p+t]+=e*N,u[x+t]+=e*C,u[w+t]+=e*S}}}}return Mi(u,[r,a,s,i],e.dtype)}resizeNearestNeighbor(t,e,n,r){pb(t,"resizeNearestNeighbor");const[s,a,i,o]=t.shape,l=this.readSync(t.dataId),u=new Float32Array(s*e*n*o),c=[r&&e>1?a-1:a,r&&n>1?i-1:i],h=[r&&e>1?e-1:e,r&&n>1?n-1:n],p=c[0]/h[0],d=c[1]/h[1];let f=0;for(let c=0;c<s;c++){const s=c*t.strides[0];for(let c=0;c<e;c++){const e=p*c,h=s+Math.min(a-1,r?Math.round(e):Math.floor(e))*t.strides[1];for(let e=0;e<n;e++){const n=d*e,s=h+Math.min(i-1,r?Math.round(n):Math.floor(n))*t.strides[2];for(let t=0;t<o;t++){const e=l[s+t];u[f++]=e}}}}return Kt(u,[s,e,n,o],t.dtype)}resizeNearestNeighborBackprop(t,e,n){pb([t,e],"resizeNearestNeighborBackprop");const[r,s,a,i]=e.shape,[,o,l]=t.shape,u=new Float32Array(r*s*a*i),c=this.readSync(t.dataId),h=[n&&o>1?s-1:s,n&&l>1?a-1:a],p=[n&&o>1?o-1:o,n&&l>1?l-1:l],d=h[0]/p[0],f=h[1]/p[1],m=1/d,g=1/f,y=2*Math.ceil(m)+2,b=2*Math.ceil(g)+2;for(let h=0;h<r;h++){const r=h*e.strides[0];for(let h=0;h<s;h++){const p=r+h*e.strides[1],x=Math.floor(h*m),w=Math.floor(x-y/2);for(let m=0;m<a;m++){const x=p+m*e.strides[2],v=Math.floor(m*g),N=Math.floor(v-b/2);for(let e=0;e<i;e++){let i=0;for(let u=0;u<y;u++){const p=u+w;if(p<0||p>=o)continue;const g=r+p*t.strides[1],y=p*d;if(h===Math.min(s-1,n?Math.round(y):Math.floor(y)))for(let r=0;r<b;r++){const s=r+N;if(s<0||s>=l)continue;const o=g+s*t.strides[2],u=s*f;m===Math.min(a-1,n?Math.round(u):Math.floor(u))&&(i+=c[o+e])}}u[x+e]=i}}}}return Mi(u,e.shape,e.dtype)}batchNorm(t,e,n,r,s,a){pb([t,e,n,s,r],"batchNorm");const i=this.readSync(t.dataId),o=this.readSync(e.dataId),l=this.readSync(n.dataId),u=s?this.readSync(s.dataId):new Float32Array([1]),c=r?this.readSync(r.dataId):new Float32Array([0]),h=new Float32Array(i.length),p=c.length,d=u.length,f=l.length,m=o.length;let g=0,y=0,b=0,x=0;for(let t=0;t<i.length;++t)h[t]=c[g++]+(i[t]-o[y++])*u[b++]/Math.sqrt(l[x++]+a),g>=p&&(g=0),y>=m&&(y=0),b>=d&&(b=0),x>=f&&(x=0);return Mi(h,t.shape)}localResponseNormalization4D(t,e,n,r,s){pb(t,"localResponseNormalization4D");const a=t.shape[3],i=a-1,o=this.readSync(t.dataId),l=t.size,u=new Float32Array(l);function c(t){const n=t%a;let r=t-n+Math.max(0,n-e);const s=t-n+Math.min(n+e,i);let l=0;for(;r<=s;r++){const t=o[r];l+=t*t}return l}for(let t=0;t<l;t++){const e=c(t),a=o[t]*Math.pow(n+r*e,-s);u[t]=a}return Mi(u,t.shape)}LRNGrad(t,e,n,r,s,a,i){pb(t,"LRNGrad");const o=t.shape[3],l=this.readSync(t.dataId),u=this.readSync(e.dataId),c=this.readSync(n.dataId),h=new Float32Array(t.size),p=t.size;for(let t=0;t<p;t++){const e=t%o,n=t-e+Math.max(0,e-r),p=t-e+Math.min(o,e+r+1);let d=0;for(let t=n;t<p;t++)d+=Math.pow(u[t],2);d=a*d+s;for(let e=n;e<p;e++){let n=-2*a*i*u[e]*c[t]/d;t===e&&(n+=Math.pow(d,-i)),n*=l[t],h[e]+=n}}return Mi(h,t.shape)}multinomial(t,e,n,r){pb(t,"multinomial");const s=e?t:vi(t),a=s.shape[0],i=s.shape[1],o=da([a,n],"int32"),l=this.readSync(o.dataId),u=this.readSync(s.dataId);for(let t=0;t<a;++t){const e=t*i,s=new Float32Array(i-1);s[0]=u[e];for(let t=1;t<s.length;++t)s[t]=s[t-1]+u[e+t];const a=ja(r.toString()),o=t*n;for(let t=0;t<n;++t){const e=a();l[o+t]=s.length;for(let n=0;n<s.length;n++)if(e<s[n]){l[o+t]=n;break}}}return o}oneHot(t,e,n,r){pb(t,"oneHot");const s=new Float32Array(t.size*e);s.fill(r);const a=this.readSync(t.dataId);for(let r=0;r<t.size;++r)a[r]>=0&&a[r]<e&&(s[r*e+a[r]]=n);return Oi(s,[t.size,e],"int32")}nonMaxSuppression(t,e,n,r,s){pb(t,"nonMaxSuppression");const a=this.readSync(t.dataId),i=this.readSync(e.dataId);return mb(a,i,n,r,s)}fft(t){return this.fftBatch(t,!1)}ifft(t){return this.fftBatch(t,!0)}fftBatch(t,e){const n=t.shape[0],r=t.shape[1],s=Re(t.shape,"float32"),a=Re(t.shape,"float32"),i=Sa(t).as2D(n,r),o=Ms(t).as2D(n,r);for(let t=0;t<n;t++){const n=i.slice([t,0],[1,r]),l=o.slice([t,0],[1,r]),u=jt(n,l),c=this.readSync(this.fftImpl(u,e).dataId);for(let e=0;e<r;e++){const n=Wl(c,e);s.values[t*r+e]=n.real,a.values[t*r+e]=n.imag}}return jt(s.toTensor(),a.toTensor()).as2D(n,r)}fftImpl(t,e){const n=t.as1D(),r=n.size;if(this.isExponentOf2(r)){let s=this.fftRadix2(n,r,e).as2D(t.shape[0],t.shape[1]);return e&&(s=jt(Sa(s).div(Ws(r)),Ms(s).div(Ws(r)))),s}{const n=this.readSync(t.dataId),s=Ll(this.fourierTransformByMatmul(n,r,e));return jt(s.real,s.imag).as2D(t.shape[0],t.shape[1])}}isExponentOf2(t){return 0==(t&t-1)}fftRadix2(t,e,n){if(1===e)return t;const r=this.readSync(t.dataId),s=e/2,a=Bl(r);let i=jt(a.real,a.imag).as1D();const o=Pl(r);let l=jt(o.real,o.imag).as1D();i=this.fftRadix2(i,s,n),l=this.fftRadix2(l,s,n);const u=Ul(e,n),c=jt(u.real,u.imag).mul(l),h=i.add(c),p=i.sub(c),d=Sa(h).concat(Sa(p)),f=Ms(h).concat(Ms(p));return jt(d,f).as1D()}fourierTransformByMatmul(t,e,n){const r=new Float32Array(2*e);for(let s=0;s<e;s++){let a=0,i=0;for(let r=0;r<e;r++){const o=Gl(s*r,e,n),l=Wl(t,r);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=e,i/=e),Vl(r,a,i,s)}return r}depthToSpace(t,e,n){b("NHWC"===n,()=>"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+n),b(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+e);const r=t.shape[0],s=t.shape[1],a=t.shape[2],i=t.shape[3],o=s*e,l=a*e,u=i/(e*e),c=this.readSync(t.dataId),h=new Float32Array(r*o*l*u);let p=0;for(let t=0;t<r;++t)for(let n=0;n<o;++n){const r=Math.floor(n/e),o=n%e;for(let n=0;n<l;++n){const l=Math.floor(n/e),d=(o*e+n%e)*u;for(let e=0;e<u;++e){const n=e+d+i*(l+a*(r+s*t));h[p++]=c[n]}}}return Mi(h,[r,o,l,u])}broadcastedBinaryOp(t,e,n,r){const s=ms(t.shape,e.shape),a=Re(s,n),i=this.readSync(t.dataId),o=this.readSync(e.dataId),l=ds(t.shape,s),u=ds(e.shape,s),c=a.values;if(l.length+u.length===0)for(let t=0;t<c.length;++t)c[t]=r(i[t%i.length],o[t%o.length]);else{const n=this.bufferSync(t),s=this.bufferSync(e);for(let h=0;h<c.length;++h){const p=a.indexToLoc(h),d=p.slice(-t.rank);l.forEach(t=>d[t]=0);const f=n.locToIndex(d),m=p.slice(-e.rank);u.forEach(t=>m[t]=0);const g=s.locToIndex(m);c[h]=r(i[f],o[g])}}return a.toTensor()}broadcastedBinaryComplexOp(t,e,n){const r=ms(t.shape,e.shape),s=Re(r,"float32"),a=Re(r,"float32"),i=this.readSync(t.dataId),o=this.readSync(e.dataId),l=ds(t.shape,r),u=ds(e.shape,r),c=s.values,h=a.values;if(l.length+u.length===0)for(let t=0;t<c.length;t++){const e=t%i.length,r=t%o.length,s=n(i[2*e],i[2*e+1],o[2*r],o[2*r+1]);c[t]=s.real,h[t]=s.imag}else{const r=this.bufferSync(this.data.get(t.dataId).complexTensors.real),a=this.bufferSync(this.data.get(e.dataId).complexTensors.real);for(let p=0;p<c.length;p++){const d=s.indexToLoc(p),f=d.slice(-t.rank);l.forEach(t=>f[t]=0);const m=r.locToIndex(f),g=d.slice(-e.rank);u.forEach(t=>g[t]=0);const y=a.locToIndex(g),b=n(i[2*m],i[2*m+1],o[2*y],o[2*y+1]);c[p]=b.real,h[p]=b.imag}}return this.complex(s.toTensor(),a.toTensor())}split(t,e,n){return gb(t,e,n)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}cropAndResize(t,e,n,r,s,a){const[i,o,l,u]=t.shape,c=e.shape[0],[h,p]=r,d=Re([c,h,p,u],"float32"),f=this.readSync(e.dataId),m=this.readSync(n.dataId),g=this.readSync(t.dataId),y=t.strides,b=d.strides;for(let t=0;t<c;t++){const e=4*t,n=f[e],r=f[e+1],c=f[e+2],x=f[e+3],w=m[t];if(w>=i)continue;const v=h>1?(c-n)*(o-1)/(h-1):0,N=p>1?(x-r)*(l-1)/(p-1):0;for(let e=0;e<h;e++){const i=h>1?n*(o-1)+e*v:.5*(n+c)*(o-1);if(i<0||i>o-1)for(let n=0;n<p;n++)for(let r=0;r<u;r++){const s=r+n*b[2]+e*b[1]+t*b[0];d.values[s]=a}else if("bilinear"===s){const n=Math.floor(i),s=Math.ceil(i),o=i-n;for(let i=0;i<p;i++){const c=p>1?r*(l-1)+i*N:.5*(r+x)*(l-1);if(c<0||c>l-1){for(let n=0;n<u;n++){const r=n+i*b[2]+e*b[1]+t*b[0];d.values[r]=a}continue}const h=Math.floor(c),f=Math.ceil(c),m=c-h;for(let r=0;r<u;r++){let a=r+h*y[2]+n*y[1]+w*y[0];const l=g[a];a=r+f*y[2]+n*y[1]+w*y[0];const u=g[a];a=r+h*y[2]+s*y[1]+w*y[0];const c=g[a];a=r+f*y[2]+s*y[1]+w*y[0];const p=l+(u-l)*m,x=c+(g[a]-c)*m;a=r+i*b[2]+e*b[1]+t*b[0],d.values[a]=p+(x-p)*o}}}else for(let n=0;n<p;++n){const s=p>1?r*(l-1)+n*N:.5*(r+x)*(l-1);if(s<0||s>l-1){for(let r=0;r<u;r++){const s=r+n*b[2]+e*b[1]+t*b[0];d.values[s]=a}continue}const o=Math.round(s),c=Math.round(i);for(let r=0;r<u;r++){const s=r+o*y[2]+c*y[1]+w*y[0],a=r+n*b[2]+e*b[1]+t*b[0];d.values[a]=g[s]}}}}return d.toTensor()}sparseToDense(t,e,n,r){const{sliceRank:s,numUpdates:a,sliceSize:i,strides:o,outputSize:l}=hn(0,t,n);return this.scatter(t,e,n,l,i,a,s,o,r,!1)}gatherND(t,e){const n=e.shape,r=n[n.length-1],[s,a,i,o]=on(t,e);if(0===a)return Kt([],s,t.dtype);const l=new dt([a,i],t.dtype),u=this.readSync(e.dataId),c=this.readSync(t.dataId);for(let e=0;e<a;e++){const n=[];let s=0;for(let t=0;t<r;t++){const a=u[e*r+t];s+=a*o[t],n.push(a)}if(s<0||s>=t.size/i)throw new Error(`Invalid indices: ${n} does not index into ${t.shape}`);for(let t=0;t<i;t++)l.values[e*i+t]=c[s*i+t]}return l.toTensor().reshape(s)}scatterND(t,e,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:i,outputSize:o}=hn(0,t,n),l=Ws(0);return this.scatter(t,e,n,o,a,s,r,i,l,!0)}fill(t,e,n){const r=_(n=n||U(e),N(t));return r.fill(e),Bn().makeTensor(r,t,n,this)}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported for string tensors");return this.fill(t.shape,1,t.dtype)}zerosLike(t){const e=_(t.dtype,N(t.shape));return this.makeOutput(e,t.shape,t.dtype)}linspace(t,e,n){return ql(t,e,n)}scatter(t,e,n,r,s,a,i,o,l,u){const c=[r/s,s],h=this.readSync(t.dataId),p=this.readSync(e.dataId);if(0===r)return Kt([],n,e.dtype);const d=new dt(c,e.dtype);d.values.fill(this.readSync(l.dataId)[0]);for(let t=0;t<a;t++){const a=[];let l=0;for(let e=0;e<i;e++){const n=h[t*i+e];a.push(n),l+=n*o[e]}if(l<0||l>=r/s)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<s;n++)u?d.values[l*s+n]+=p[t*s+n]:d.values[l*s+n]=0===e.rank?p[0]:p[t*s+n]}return d.toTensor().reshape(n)}}function Nb(t,e,n,r){const s=D(r,N(n));for(let n=0;n<s.length;++n){const r=n*e;let a=t[r];for(let n=0;n<e;++n){const e=t[r+n];e>a&&(a=e)}s[n]=a}return s}function Cb(t,e,n,r,s){const a=e.length,i=N(e),o=j(e),l=j(s),u=D(n,N(s));for(let e=0;e<i;++e){const n=st(e,a,o),s=new Array(n.length);for(let t=0;t<s.length;t++)s[t]=n[r[t]];u[rt(s,a,l)]=t[e]}return u}var Sb=Object.freeze({__proto__:null,maxImpl:Nb,transposeImpl:Cb});Hn("cpu",()=>new vb,1);const kb={kernelName:"Cos",backendName:"cpu",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e;pb(n,"cos");const s=r.data.get(n.dataId).values,a=N(n.shape),i=new Float32Array(a);for(let t=0;t<a;++t)i[t]=Math.cos(s[t]);return{dataId:r.write(i,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},Ib={kernelName:"Dilation2D",backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s}=t,{strides:a,pad:i,dilations:o}=n,l=e,u=l.data.get(r.dataId).values,c=r.shape.length,h=l.data.get(s.dataId).values,p=s.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:C,filterWidth:S,dilationHeight:k,dilationWidth:I,outShape:E}=br(r.shape,s.shape,a,i,"NHWC",o),A=N(E),T=E.length,$=_(r.dtype,A);for(let t=0;t<d;++t)for(let e=0;e<y;++e){const n=e*w-x.top;for(let a=0;a<b;++a){const i=a*v-x.left;for(let o=0;o<g;++o){let l=Number.MIN_SAFE_INTEGER;for(let e=0;e<C;++e){const a=n+e*k;if(a>=0&&a<f)for(let n=0;n<S;++n){const d=i+n*I;if(d>=0&&d<m){const i=rt([t,a,d,o],c,j(r.shape)),f=rt([e,n,o],p,j(s.shape)),m=u[i]+h[f];m>l&&(l=m)}}}$[rt([t,e,a,o],T,j(E))]=l}}}return{dataId:l.write(q($,r.dtype),E,r.dtype),shape:E,dtype:r.dtype}}},Eb={kernelName:"Dilation2DBackpropFilter",backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s,dy:a}=t,{strides:i,pad:o,dilations:l}=n,u=e,c=K(r.shape,u.data.get(r.dataId).values),h=K(s.shape,u.data.get(s.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:N,filterWidth:C,dilationHeight:S,dilationWidth:k,outShape:I}=br(r.shape,s.shape,i,o,"NHWC",l);b(a.rank===I.length,()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${I.length}, but got `+a.rank);const E=K(I,u.data.get(a.dataId).values),A=J(s.shape,s.dtype);for(let t=0;t<p;++t)for(let e=0;e<g;++e){const n=e*w-x.top;for(let r=0;r<y;++r){const s=r*v-x.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let e=0;e<N;++e){const r=n+e*S;if(r>=0&&r<d)for(let n=0;n<C;++n){const u=s+n*k;if(u>=0&&u<f){const s=c[t][r][u][a]+h[e][n][a];s>i&&(i=s,o=e,l=n)}}}A[o][l][a]+=E[t][e][r][a]}}}return{dataId:u.write(q(A,r.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},Ab={kernelName:"Dilation2DBackpropInput",backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s,dy:a}=t,{strides:i,pad:o,dilations:l}=n,u=e,c=K(r.shape,u.data.get(r.dataId).values),h=K(s.shape,u.data.get(s.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:N,filterWidth:C,dilationHeight:S,dilationWidth:k,outShape:I}=br(r.shape,s.shape,i,o,"NHWC",l);b(a.rank===I.length,()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${I.length}, but got `+a.rank);const E=K(I,u.data.get(a.dataId).values),A=J(r.shape,r.dtype);for(let t=0;t<p;++t)for(let e=0;e<g;++e){const n=e*w-x.top;for(let r=0;r<y;++r){const s=r*v-x.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=s<0?0:s;for(let e=0;e<N;++e){const r=n+e*S;if(r>=0&&r<d)for(let n=0;n<C;++n){const u=s+n*k;if(u>=0&&u<f){const s=c[t][r][u][a]+h[e][n][a];s>i&&(i=s,o=r,l=u)}}}A[t][o][l][a]+=E[t][e][r][a]}}}return{dataId:u.write(q(A,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};function Tb(t,e){return{kernelName:t,backendName:"cpu",kernelFunc:({inputs:n,backend:r})=>{const{a:s,b:a}=n,i=r;pb([s,a],t);const o=i.data.get(s.dataId).values,l=i.data.get(a.dataId).values,[u,c]=e(s.shape,a.shape,o,l,s.dtype);return{dataId:i.write(u,c,s.dtype),shape:c,dtype:s.dtype}}}}function $b(t){return(e,n,r,s,a)=>{const i=ms(e,n),o=i.length,l=j(i),u=D(a,N(i)),c=e.length,h=n.length,p=j(e),d=j(n),f=ds(e,i),m=ds(n,i);if(f.length+m.length===0)for(let e=0;e<u.length;++e)u[e]=t(r[e%r.length],s[e%s.length]);else for(let e=0;e<u.length;++e){const n=st(e,o,l),a=n.slice(-c);f.forEach(t=>a[t]=0);const i=rt(a,c,p),g=n.slice(-h);m.forEach(t=>g[t]=0);const y=rt(g,h,d);u[e]=t(r[i],s[y])}return[u,i]}}const Rb=Tb("Div",$b((t,e)=>t/e)),Db={kernelName:"FlipLeftRight",backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,s=n,a=D(r.dtype,N(r.shape)),[i,o,l,u]=r.shape,c=s.data.get(r.dataId).values;for(let t=0;t<i;t++){const e=t*l*o*u;for(let t=0;t<o;t++){const n=t*(l*u);for(let r=0;r<l;r++){const s=r*u;for(let o=0;o<u;o++){const h=[i,t,r,o][2],p=Math.round(l-h),d=e+n+s+o;let f=c[d];if(p>=0&&p<l){f=c[e+n+p*u+o]}a[d]=f}}}}return{dataId:s.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};const _b={kernelName:"Identity",backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:r}=e;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}},Fb={kernelName:"Max",backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{reductionIndices:s,keepDims:a}=e,i=n;let o=r.shape;const l=o.length,u=$(s,o);let c=u;const h=ir(c,l);let p=i.data.get(r.dataId).values;if(null!=h){const t=new Array(l);for(let e=0;e<t.length;e++)t[e]=o[h[e]];p=Cb(p,o,r.dtype,h,t),c=lr(c.length,l),o=t}pb(r,"max"),ar("max",c,l);const[d,f]=rr(o,c),m=Nb(p,N(f),d,r.dtype),g=i.write(m,d,r.dtype);let y=d;if(a){y=sr(d,u)}return{dataId:g,shape:y,dtype:r.dtype}}};const Ob={kernelName:"MaxPoolWithArgmax",backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=e,l=n;pb(r,"MaxPoolWithArgmax");const u=l.data.get(r.dataId).values,c=xr(r.shape,s,a,[1,1],i),[h,p]=function(t,e,n,r,s){const a=db(t,0,n,j(e),s,"max"),i=fb(t,e,n,s,!0,r);return[a.values,i.values]}(u,r.shape,r.dtype,o,c),d=l.write(h,c.outShape,r.dtype),f=l.write(p,c.outShape,r.dtype);return[{dataId:d,shape:c.outShape,dtype:r.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},Mb=Bo,zb={kernelName:"NonMaxSuppressionV4",backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,padToMaxOutputSize:l}=n,u=e;pb(r,"NonMaxSuppressionPadded");const c=u.data.get(r.dataId).values,h=u.data.get(s.dataId).values,{selectedIndices:p,validOutputs:d}=Mb(c,h,a,i,o,l);return[p,d]}},Lb=Po,Bb={kernelName:"NonMaxSuppressionV5",backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=n,u=e;pb(r,"NonMaxSuppressionWithScore");const c=u.data.get(r.dataId).values,h=u.data.get(s.dataId).values,p=a,d=i,f=o,m=l,{selectedIndices:g,selectedScores:y}=Lb(c,h,p,d,f,m);return[g,y]}};const Pb={kernelName:"PadV2",backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{paddings:a,constantValue:i}=r;pb(s,"pad");const o=a.map((t,e)=>t[0]+s.shape[e]+t[1]),l=a.map(t=>t[0]),u=n.data.get(s.dataId).values,c=N(s.shape),h=s.shape.length,p=j(s.shape),d=N(o),f=o.length,m=j(o),g=D(s.dtype,d);0!==i&&g.fill(i);for(let t=0;t<c;t++){g[rt(st(t,h,p).map((t,e)=>t+l[e]),f,m)]=u[t]}return{dataId:n.write(g,o,s.dtype),shape:o,dtype:s.dtype}}};function Wb(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{shape:a}=r;return n.incRef(s.dataId),{dataId:s.dataId,shape:a,dtype:s.dtype}}const Vb={kernelName:"Reshape",backendName:"cpu",kernelFunc:Wb},Ub={kernelName:"RotateWithOffset",backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,{radians:s,fillValue:a,center:i}=e,o=n,l=D(r.dtype,N(r.shape)),[u,c,h,p]=r.shape,[d,f]=Tl(i,c,h),m=Math.sin(s),g=Math.cos(s),y=o.data.get(r.dataId).values;for(let t=0;t<u;t++){const e=t*h*c*p;for(let t=0;t<c;t++){const n=t*(h*p);for(let r=0;r<h;r++){const s=r*p;for(let i=0;i<p;i++){const o=[u,t,r,i],b=o[2],x=o[1];let w=(b-d)*g-(x-f)*m,v=(b-d)*m+(x-f)*g;w=Math.round(w+d),v=Math.round(v+f);let N=a;if("number"!=typeof a&&(N=3===i?255:a[i]),w>=0&&w<h&&v>=0&&v<c){N=y[e+v*(h*p)+w*p+i]}l[e+n+s+i]=N}}}}return{dataId:o.write(l,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};function Gb(t){const{inputs:e,attrs:n,backend:r}=t,{x:s}=e,{perm:a}=n;pb(s,"transpose");const i=s.shape.length,o=new Array(i);for(let t=0;t<o.length;t++)o[t]=s.shape[a[t]];const l=Cb(r.data.get(s.dataId).values,s.shape,s.dtype,a,o);return{dataId:r.write(l,o,s.dtype),shape:o,dtype:s.dtype}}const Hb={kernelName:"Transpose",backendName:"cpu",kernelFunc:Gb};const jb={kernelName:"SpaceToBatchND",backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{blockShape:a,paddings:i}=r;pb([s],"spaceToBatchND");const o=N(a),l=[[0,0]];l.push(...i);for(let t=1+a.length;t<s.shape.length;++t)l.push([0,0]);const u=Pb.kernelFunc({inputs:{x:s},backend:n,attrs:{paddings:l,constantValue:0}}),c=$l(u.shape,a,o,!1),h=Rl(c.length,a.length,!1),p=Dl(u.shape,a,o,!1),d=Wb({inputs:{x:u},backend:n,attrs:{shape:c}}),f=Gb({inputs:{x:d},backend:n,attrs:{perm:h}}),m=Wb({inputs:{x:f},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}},qb={kernelName:"Square",backendName:"cpu",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e;pb(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let t=0;t<s.length;++t){const e=s[t];a[t]=e*e}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},Kb=Tb("SquaredDifference",$b((t,e)=>{const n=t-e;return n*n})),Xb=[kb,Ib,Ab,Eb,Rb,Db,_b,Ob,Fb,zb,Bb,Pb,Vb,Ub,jb,qb,Kb,Hb];for(const t of Xb)h(t);const Yb={},Jb={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Zb(t){t in Yb||(Yb[t]=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=function(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(t);if(e.addEventListener("webglcontextlost",e=>{e.preventDefault(),delete Yb[t]},!1),1===t)return e.getContext("webgl",Jb)||e.getContext("experimental-webgl",Jb);return e.getContext("webgl2",Jb)}(t));const e=Yb[t];return e.isContextLost()?(delete Yb[t],Zb(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Yb[t])}var Qb,tx,ex;function nx(t,e){return[e,t]}function rx(t){const e=N(t);return I(Math.ceil(e/4))}function sx(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function ax(t,e){const r=t;let s,a,i,o,l,u,c,h,p,d;return 2===n().getNumber("WEBGL_VERSION")?(s=r.R32F,a=r.R16F,i=r.RGBA16F,o=r.RGBA32F,l=r.RED,c=4,h=1,p=r.HALF_FLOAT,d=r.FLOAT):(s=t.RGBA,a=t.RGBA,i=t.RGBA,o=r.RGBA,l=t.RGBA,c=4,h=4,p=null!=e?e.HALF_FLOAT_OES:null,d=t.FLOAT),u=t.RGBA,{internalFormatFloat:s,internalFormatHalfFloat:a,internalFormatPackedHalfFloat:i,internalFormatPackedFloat:o,textureFormatFloat:l,downloadTextureFormat:u,downloadUnpackNumChannels:c,defaultNumChannels:h,textureTypeHalfFloat:p,textureTypeFloat:d}}function ix(t,e){const r=e();return n().getBool("DEBUG")&&function(t){const e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+function(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+e}}(t,e))}(t),r}!function(t){t[t.DENSE=0]="DENSE",t[t.SHARED_BATCH=1]="SHARED_BATCH"}(Qb||(Qb={})),function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(tx||(tx={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(ex||(ex={}));function ox(t){return!!(n().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||5.96e-8<Math.abs(t)&&Math.abs(t)<65504)}function lx(t,e){return yx(t,()=>t.getExtension(e),'Extension "'+e+'" not supported on this browser.')}function ux(t,e){const n=yx(t,()=>t.createShader(t.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(ix(t,()=>t.shaderSource(n,e)),ix(t,()=>t.compileShader(n)),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw function(t,e){const n=cx.exec(e);if(null==n)return console.log("Couldn't parse line number in error: "+e),void console.log(t);const r=+n[1],s=t.split("\n"),a=s.length.toString().length+2,i=s.map((t,e)=>E((e+1).toString(),a)+t);let o=0;for(let t=0;t<i.length;t++)o=Math.max(i[t].length,o);const l=i.slice(0,r-1),u=i.slice(r-1,r),c=i.slice(r);console.log(l.join("\n")),console.log(e.split("\n")[0]),console.log("%c "+E(u[0],o),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(e,t.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const cx=/ERROR: [0-9]+:([0-9]+):/g;function hx(t,e){if(ix(t,()=>t.validateProgram(e)),!1===t.getProgramParameter(e,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function px(t,e,n,r,s,a,i){const o=t.getAttribLocation(e,n);return-1!==o&&(ix(t,()=>t.bindBuffer(t.ARRAY_BUFFER,r)),ix(t,()=>t.vertexAttribPointer(o,s,t.FLOAT,!1,a,i)),ix(t,()=>t.enableVertexAttribArray(o)),!0)}function dx(t,e,n,r){ix(t,()=>function(t,e,n){bx(t,n),ix(t,()=>t.activeTexture(t.TEXTURE0+n)),ix(t,()=>t.bindTexture(t.TEXTURE_2D,e))}(t,e,r)),ix(t,()=>t.uniform1i(n,r))}function fx(t,e,n){ix(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,n)),ix(t,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0))}function mx(t,e){ix(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,e)),ix(t,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0))}function gx(t){const e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+e}}(t,e))}function yx(t,e,n){const r=ix(t,()=>e());if(null==r)throw new Error(n);return r}function bx(t,e){const n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function xx(t,e=2){return N(t.slice(0,t.length-e))}function wx(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function vx(t){let e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[xx(t),...wx(t)]),e}function Nx(t){return t%2==0}function Cx(t,e){if(C(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){const n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if(Nx(n)&&Nx(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&Nx(t[0])&&Nx(e[0])}let Sx,kx;function Ix(t,e){return null!=t.getExtension(e)}function Ex(t){try{if(null!=Zb(t))return!0}catch(t){return!1}return!1}function Ax(t){if(0===t)return!1;const e=Zb(t);if(1!==t){if(Ix(e,"EXT_color_buffer_float"))return Tx(e);const t="EXT_color_buffer_half_float";if(Ix(e,t)){const n=e.getExtension(t);return function(t,e){const n=ax(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r);t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const s=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,s),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);const a=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(s),a}(e,n)}return!1}return!!Ix(e,"OES_texture_float")&&(!!Ix(e,"WEBGL_color_buffer_float")&&Tx(e))}function Tx(t){const e=ax(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n);t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);const r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);const s=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),s}const $x=n();$x.registerFlag("HAS_WEBGL",()=>$x.getNumber("WEBGL_VERSION")>0),$x.registerFlag("WEBGL_VERSION",()=>Ex(2)?2:Ex(1)?1:0),$x.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),$x.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===$x.get("WEBGL_VERSION")),$x.registerFlag("WEBGL_CPU_FORWARD",()=>!0),$x.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),$x.registerFlag("WEBGL_PACK",()=>$x.getBool("HAS_WEBGL")),$x.registerFlag("WEBGL_PACK_NORMALIZATION",()=>$x.getBool("WEBGL_PACK")),$x.registerFlag("WEBGL_PACK_CLIP",()=>$x.getBool("WEBGL_PACK")),$x.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>!1),$x.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>$x.getBool("WEBGL_PACK")),$x.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>$x.getBool("WEBGL_PACK")),$x.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>$x.getBool("WEBGL_PACK")),$x.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>$x.getBool("WEBGL_PACK")),$x.registerFlag("WEBGL_PACK_REDUCE",()=>$x.getBool("WEBGL_PACK")),$x.registerFlag("WEBGL_LAZILY_UNPACK",()=>$x.getBool("WEBGL_PACK")),$x.registerFlag("WEBGL_CONV_IM2COL",()=>$x.getBool("WEBGL_PACK")),$x.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function(t){if(null==Sx){const e=Zb(t);Sx=e.getParameter(e.MAX_TEXTURE_SIZE)}return Sx}($x.getNumber("WEBGL_VERSION"))),$x.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function(t){if(null==kx){const e=Zb(t);kx=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,kx)}($x.getNumber("WEBGL_VERSION"))),$x.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const t=$x.getNumber("WEBGL_VERSION");return 0===t?0:function(t){if(0===t)return 0;let e;const n=Zb(t);return e=Ix(n,"EXT_disjoint_timer_query_webgl2")&&2===t?2:Ix(n,"EXT_disjoint_timer_query")?1:0,e}(t)}),$x.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>$x.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!zt()),$x.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function(t){if(0===t)return!1;const e=Zb(t);if(1===t){if(!Ix(e,"OES_texture_float"))return!1}else if(!Ix(e,"EXT_color_buffer_float"))return!1;return Tx(e)}($x.getNumber("WEBGL_VERSION"))),$x.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!$x.getBool("WEBGL_FORCE_F16_TEXTURES")&&$x.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),$x.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>Ax($x.getNumber("WEBGL_VERSION"))),$x.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{return 2===(t=$x.getNumber("WEBGL_VERSION"))&&null!=Zb(t).fenceSync;var t}),$x.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>$x.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),$x.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,t=>{if(t<0&&-1!==t)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${t}.`)});class Rx{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((t,e)=>"T"+e);const n=[];this.variableNames.forEach(t=>{n.push(`float v${t} = get${t}AtOutCoords();`)});const r=this.variableNames.map(t=>"v"+t).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class Dx{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((t,e)=>"T"+e);const n=[];this.variableNames.forEach(t=>{n.push(`vec4 v${t} = get${t}AtOutCoords();`)});const r=this.variableNames.map(t=>"v"+t).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}class _x{constructor(t,e,n){this.variableNames=["A"];const{windowSize:r,batchSize:s,outSize:a}=t;n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,a];const i="max"===e?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}function Fx(t,e){return["x","y","z","w","u","v"].slice(0,e).map(e=>`${t}.${e}`)}function Ox(t,e){return 1===e?[t]:Fx(t,e)}function Mx(){let t,e,r,s,a,i,o,l,u,c;return 2===n().getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",r="out",s="in",a="texture",i="outputColor",o="out vec4 outputColor;",l="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",r="varying",s="varying",a="texture2D",i="gl_FragColor",o="",l="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:r,varyingFs:s,texture2D:a,output:i,defineOutput:o,defineSpecialNaN:l,defineSpecialInf:u,defineRound:c}}function zx(t,e,n="index"){const r=j(e);return r.map((e,s)=>`${`int ${t[s]} = ${n} / ${e}`}; ${s===r.length-1?`int ${t[s+1]} = ${n} - ${t[s]} * ${e}`:`index -= ${t[s]} * ${e}`};`).join("")}function Lx(t){const e=j(t).map(t=>t.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;\n  }\n`}const Bx="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:Px}=Kl;function Wx(t,e,n,r){const s=[];t.forEach(t=>{const e=N(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?s.push(`uniform float ${t.name}${e>1?`[${e}]`:""};`):(s.push(`uniform sampler2D ${t.name};`),s.push(`uniform int offset${t.name};`))});const a=s.join("\n"),i=t.map(t=>function(t,e,n=!1){let r="";r+=n?Ux(t):Vx(t);const s=t.shapeInfo.logicalShape,a=e.logicalShape;s.length<=a.length&&(r+=n?function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=t.shapeInfo.logicalShape.length,i=e.logicalShape.length,o=Px(t.shapeInfo.logicalShape,e.logicalShape),l=Jx(i),u=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map(t=>`coords.${h[t+u]} = 0;`).join("\n");let p="";p=i<2&&a>0?"coords":t.shapeInfo.logicalShape.map((t,e)=>"coords."+h[e+u]).join(", ");let d="return outputValue;";const f=1===N(t.shapeInfo.logicalShape),m=1===N(e.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const t=a-2,e=a-1;o.indexOf(t)>-1&&o.indexOf(e)>-1?d="return vec4(outputValue.x);":o.indexOf(t)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(e)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${p});\n      ${d}\n    }\n  `}(t,e):function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=e.texShape,i=t.shapeInfo.texShape,o=t.shapeInfo.logicalShape.length,l=e.logicalShape.length;if(!t.shapeInfo.isUniform&&o===l&&null==t.shapeInfo.flatOffset&&C(i,a))return`\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=Jx(l),c=Px(t.shapeInfo.logicalShape,e.logicalShape),h=l-o;let p;const d=["x","y","z","w","u","v"];p=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map(t=>`coords.${d[t+h]} = 0;`).join("\n");let f="";f=l<2&&o>0?"coords":t.shapeInfo.logicalShape.map((t,e)=>"coords."+d[e+h]).join(", ");return`\n    float ${s}() {\n      ${u} coords = getOutputCoords();\n      ${p}\n      return get${r}(${f});\n    }\n  `}(t,e));return r}(t,e,r)).join("\n"),o=e.texShape,l=Mx(),u=function(t){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${t.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let c,h,p=function(t){return`${t.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${t.varyingFs} vec2 resultUV;\n    ${t.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${t.defineSpecialNaN}\n    ${t.defineSpecialInf}\n    ${t.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${Gx}\n    ${Hx}\n    ${jx}\n  `}(l);return e.isPacked?(c=function(t,e){switch(t.length){case 0:return Kx();case 1:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(1===n[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,e);case 2:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(C(t,e))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const r=Math.ceil(t[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[2]/2),s=r*Math.ceil(t[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(t,e);default:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[t.length-1]/2),s=r*Math.ceil(t[t.length-2]/2);let a=s,i="",o="b, r, c";for(let e=2;e<t.length-1;e++)a*=t[t.length-e-1],i=`\n      int b${e} = index / ${a};\n      index -= b${e} * ${a};\n    `+i,o=`b${e}, `+o;return`\n    ivec${t.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${t.length}(${o});\n    }\n  `}(t,e)}}(e.logicalShape,o),h=function(t){return`\n    void setOutput(vec4 val) {\n      ${t.output} = val;\n    }\n  `}(l)):(c=function(t,e){switch(t.length){case 0:return Kx();case 1:return function(t,e){if(1===e[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${e[1]}.0);\n      }\n    `;if(1===e[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${e[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      return resTexRC.x * ${e[1]} + resTexRC.y;\n    }\n  `}(0,e);case 2:return function(t,e){if(C(t,e))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));\n      }\n    `;if(1===t[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===t[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      int r = index / ${t[1]};\n      int c = index - r * ${t[1]};\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=zx(["r","c","d"],t);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(t,e);case 4:return function(t,e){const n=zx(["r","c","d","d2"],t);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(t,e);case 5:return function(t,e){const n=zx(["r","c","d","d2","d3"],t);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},\n                             ${e[1]}));\n\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(t,e);case 6:return function(t,e){const n=zx(["r","c","d","d2","d3","d4"],t);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(t,e);default:throw new Error(t.length+"-D output sampling is not yet supported")}}(e.logicalShape,o),h=function(t){return`\n    void setOutput(float val) {\n      ${t.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),r&&(p+=qx),[p,u,h,a,c,i,n].join("\n")}function Vx(t){const e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`float ${n}() {return ${e};}`;const[r,s]=t.shapeInfo.texShape;if(1===r&&1===s)return`\n      float ${n}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const[a,i]=t.shapeInfo.texShape,o=Xx(e);return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${o});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${Yx(t)}\n      }\n    `;const r=t.shapeInfo.texShape,s=r[0],a=r[1];if(1===a&&1===s)return`\n      float ${n}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=Xx(e);if(1===a)return`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(1===s)return`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${s}, ${a}, index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape;if(null!=s&&C(e,s)){const t=s[0],e=s[1];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${e}.0, ${t}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:a,keptDims:i}=R(e),o=a;if(o.length<e.length){const e=Zx(t,o),n=["row","col"];return`\n      ${Vx(e)}\n      float ${r}(int row, int col) {\n        return ${r}(${Qx(n,i)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${Yx(t)}\n      }\n    `;const l=s[0],u=s[1],c=Xx(n);if(1===u)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;if(1===l)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${l}, ${u}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[1]*e[2],a=e[2],{newShape:i,keptDims:o}=R(e),l=i;if(l.length<e.length){const e=Zx(t,l),n=["row","col","depth"];return`\n        ${Vx(e)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${Qx(n,o)});\n        }\n      `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${s}, ${a}, 1)));\n        ${Yx(t)}\n      }\n    `;const u=t.shapeInfo.texShape,c=u[0],h=u[1],p=t.shapeInfo.flatOffset;if(h===s&&null==p)return`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===a&&null==p)return`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const d=Xx(n);return`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s} + col * ${a} + depth + ${d};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(t);case 4:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[3],a=e[2]*s,i=e[1]*a,{newShape:o,keptDims:l}=R(e);if(o.length<e.length){const e=Zx(t,o),n=["row","col","depth","depth2"];return`\n      ${Vx(e)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${Qx(n,l)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${s}, 1)));\n        ${Yx(t)}\n      }\n    `;const u=t.shapeInfo.flatOffset,c=t.shapeInfo.texShape,h=c[0],p=c[1];if(p===i&&null==u)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===s&&null==u)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const d=Xx(n);return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${s} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${p}, index + ${d});\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 5:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[4],a=e[3]*s,i=e[2]*a,o=e[1]*i,{newShape:l,keptDims:u}=R(e);if(l.length<e.length){const e=Zx(t,l),n=["row","col","depth","depth2","depth3"];return`\n      ${Vx(e)}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${Qx(n,u)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${s})) +\n          depth3;\n        ${Yx(t)}\n      }\n    `;const c=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===s&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]},\n               ${e[2]*e[3]}, ${e[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=Xx(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${s} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 6:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:a}=R(e);if(s.length<e.length){const e=Zx(t,s),n=["row","col","depth","depth2","depth3","depth4"];return`\n      ${Vx(e)}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${Qx(n,a)});\n      }\n    `}const i=e[5],o=e[4]*i,l=e[3]*o,u=e[2]*l,c=e[1]*u;if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${Yx(t)}\n      }\n    `;const h=t.shapeInfo.flatOffset,p=t.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]*e[4]},\n               ${e[2]*e[3]*e[4]},\n               ${e[3]*e[4]},\n               ${e[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=Xx(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);default:throw new Error(e.length+"-D input sampling is not yet supported")}}function Ux(t){switch(t.shapeInfo.logicalShape.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=Mx();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${e}, halfCR);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,s=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=Mx();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${s[0]}, ${s[1]}, index);\n      return ${a.texture2D}(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape,a=s[0],i=s[1],o=Mx();if(null!=s&&C(e,s))return`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${o.texture2D}(${n}, uv);\n      }\n    `;const l=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],u=Math.ceil(e[1]/2);return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${u}, ${l[0]}, ${l[1]}, row, col);\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape,a=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(1===e[0]){const n=e.slice(1),s=[1,2],a=Zx(t,n),i=["b","row","col"];return`\n        ${Ux(a)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${Qx(i,s)});\n        }\n      `}const i=a[0],o=a[1],l=Math.ceil(e[2]/2),u=l*Math.ceil(e[1]/2),c=Mx();return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${u}, ${l}, b, row, col);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `}(t);default:return function(t){const e=t.shapeInfo.logicalShape,n=e.length,r=t.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=t.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],l=i[1],u=Math.ceil(e[n-1]/2);let c=u*Math.ceil(e[n-2]/2),h="int b, int row, int col",p=`b * ${c} + (row / 2) * ${u} + (col / 2)`;for(let t=2;t<n-1;t++)h=`int b${t}, `+h,c*=e[n-t-1],p=`b${t} * ${c} + `+p;const d=Mx();return`\n    vec4 ${s}(${h}) {\n      int index = ${p};\n      int texR = index / ${l};\n      int texC = index - texR * ${l};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${o});\n      return ${d.texture2D}(${r}, uv);\n    }\n  `}(t)}}const Gx="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Hx="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",jx="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",qx="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function Kx(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function Xx(t){return"offset"+t}function Yx(t){const e=t.name,n=N(t.shapeInfo.logicalShape);return n<2?`return ${e};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${e}[i];\n      }\n    }\n  `}function Jx(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error(`GPU for rank ${t} is not yet supported`)}function Zx(t,e){const n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function Qx(t,e){return e.map(e=>t[e]).join(", ")}class tw{constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,b(t.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const s=t[t.length-1],a=Math.ceil(s/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=Jx(o),u=Ox("coords",o);let c,h;if(1===a){h=o+1;const t=Jx(h);c=`\n        ${t} sourceLocR = ${t}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${t} sourceLocG = ${t}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${t} sourceLocA = ${t}(${u.join()}, 0);\n        --${u[o-1]};\n        ${t} sourceLocB = ${t}(${u.join()}, 0);\n        --${u[o-2]};`}else h=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),d="."+p[h-1],f=p.map(t=>"int "+t),m=Ox("sourceLocR",h-1).concat("inIdx.r"),g=Ox("sourceLocG",h-1).concat("inIdx.g"),y=Ox("sourceLocB",h-1).concat("inIdx.b"),x=Ox("sourceLocA",h-1).concat("inIdx.a"),w="max"===n?"greaterThan":"lessThan",v=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${x.join()})));`,N=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${x.join()}) : 0.)`,C=r?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${C}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${N};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${v}\n          vec4 candidate = ${N};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${w}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}class ew{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a=t.dilationHeight,i=t.dilationWidth,o=t.effectiveFilterHeight,l=t.effectiveFilterWidth,u=o-1-t.padInfo.top,c=l-1-t.padInfo.left,h=1/(e*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class nw{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,l=t.dilationHeight,u=t.dilationWidth,c=t.effectiveFilterDepth,h=t.effectiveFilterHeight,p=t.effectiveFilterWidth,d=c-1-t.padInfo.front,f=h-1-t.padInfo.top,m=p-1-t.padInfo.left,g=1/(e*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class rw{constructor(t,e,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],ms(t,e),ms(t,n);let i="0.0";null!=r&&(ms(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=s&&(ms(t,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class sw{constructor(t,e,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],ms(t,e),ms(t,n);let i="vec4(0.0)";null!=r&&(ms(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=s&&(ms(t,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const aw="return areal * breal - aimag * bimag;",iw="return areal * bimag + aimag * breal;";class ow{constructor(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=ms(e,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const lw="return a + b;",uw="return a - b;",cw="return a * b;",hw="return (a < 0.) ? b * a : a;";class pw{constructor(t,e,n){this.variableNames=["A","B"],this.outputShape=ms(e,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const dw="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";class fw{constructor(t,e,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=ms(e,n);const s=this.outputShape.length;let a="";if(r)if(0===s||1===N(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${Jx(s)} coords = getOutputCoords();\n        `,1===s)a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const t=Ox("coords",s);a+=`\n            bool nextRowOutOfBounds =\n              (${t[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${t[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}class mw{constructor(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class gw{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class yw{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}class bw{constructor(t){this.outputShape=[],this.outputShape=Fr(t,1),this.variableNames=t.map((t,e)=>"T"+e);const e=new Array(t.length-1);e[0]=t[0][1];for(let n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];const n=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let t=1;t<e.length;t++){const r=e[t-1];n.push(`else if (yC < ${e[t]}) setOutput(getT${t}(yR, yC-${r}));`)}const r=e.length,s=e[e.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class xw{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Fr(t,e);const n=this.outputShape,r=n.length,s=Jx(r),a=Ox("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((t,e)=>"T"+e);const o=new Array(t.length-1);o[0]=t[0][e];for(let n=1;n<o.length;n++)o[n]=o[n-1]+t[n][e];const l=i[e],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let t=1;t<o.length;t++){const e=o[t-1];h+=`\n        if (${l} < ${o[t]}  && ${l} >= ${o[t-1]}) {\n          return getChannel(\n            getT${t}(${ww(i,l,e)}),\n            vec2(${ww(u,l,e)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${ww(i,l,d)}),\n          vec2(${ww(u,l,d)}));`,this.userCode=`\n      float getValue(${i.map(t=>"int "+t)}) {\n        ${h}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function ww(t,e,n){const r=t.indexOf(e);return t.map((t,e)=>e===r?`${t} - ${n}`:t).join()}class vw{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,s=t.padInfo.left,a="channelsLast"===t.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Nw{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a="channelsLast"===t.dataFormat,i=e-1-t.padInfo.top,o=n-1-t.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Cw{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,s=t.padInfo.front,a=t.padInfo.top,i=t.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${e} - ${s};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${i};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Sw{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=e-1-t.padInfo.front,l=n-1-t.padInfo.top,u=r-1-t.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class kw{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,s=t.padInfo.left,a=t.outChannels/t.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Iw{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a=e-1-t.padInfo.top,i=n-1-t.padInfo.left,o=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ew{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const s=t.padInfo.top,a=t.padInfo.left,i=t.strideHeight,o=t.strideWidth,l=t.dilationHeight,u=t.dilationWidth,c=t.filterHeight,h=t.filterWidth,p=4*Math.floor(t.inChannels/4),d=t.inChannels%4,f="channelsLast"===t.dataFormat,m=f?1:2,g=f?2:3,y=f?3:1;let b="",x="";n&&(b=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,x="result = activation(result);");const w=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${s}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${y}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${m}], coords[${g}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${c}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${u};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${p}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${f}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===d}) {\n\n              if (${f}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${p}) *\n                    getW(wR, wC, ${p}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${p}, xR, xC) *\n                    getW(wR, wC, ${p}, d2);\n              }\n\n            } else if (${2===d}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2)\n              );\n\n              if (${f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===d}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2),\n                getW(wR, wC, ${p} + 2, d2)\n              );\n\n              if (${f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1),\n                  getX(batch, xR, xC, ${p} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC),\n                  getX(batch, ${p} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${x}\n        setOutput(result);\n      }\n    `}}class Aw{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,l=t.dilationHeight,u=t.dilationWidth,c=t.filterDepth,h=t.filterHeight,p=t.filterWidth,d=4*Math.floor(t.inChannels/4),f=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${i});\n      const ivec3 pads = ivec3(${e}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Tw{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const s=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,p=t.filterHeight,d=t.filterWidth,f=t.outChannels/t.inChannels;let m="",g="";n&&(m=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,g="result = activation(result);");const y=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${m}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${f};\n        int q = d2 - d1 * ${f};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${s}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${a}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${y}\n        ${g}\n        setOutput(result);\n      }\n    `}}class $w{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;const s=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,p=t.filterHeight,d=t.filterWidth,f=d;let m="int xR; int xC; int xCOffset;";for(let t=0;t<p;t++)for(let e=0;e<d;e++)m+=`\n          vec4 xTexelR${t}C${2*e} = vec4(0.);\n          vec4 wR${t}C${e} = vec4(0.);\n          vec4 xR${t}C${e} = vec4(0.);`;for(let t=0;t<p;t++)for(let e=0;e<f;e++){const n=2*e;if(m+=`\n          xR = xRCorner + ${t*c};\n          xC = xCCorner + ${n*h};\n        `,1===u){if(n<d&&(m+=o%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${s} && xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    xTexelR${t}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${s} && xCOffset >= 0 && xCOffset < ${a}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${t}C${n} = vec4(previous.zw, xTexelR${t}C${n}.xy);\n                } else {\n                  xR${t}C${n} = vec4(0, 0, xTexelR${t}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${s} && xC >= 0 && xC < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xR${t}C${n} = xTexelR${t}C${n};\n              `,n+1<d)){const e=o%2==0?g(h):h;h%2==0&&o%2==1||h%2!=0&&o%2!=1?(m+=`\n                  xCOffset = xC + ${o%2} + ${e};\n\n                  if(xR >= 0 && xR < ${s} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,h>1&&(m+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${s} &&\n                      xCOffset >= 0 && xCOffset < ${a}) {\n                      xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${t}C${n} = vec4(0.);\n                    }\n                  `),m+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.xy);\n                `):m+=`\n                  xCOffset = xC + ${e};\n\n                  if(xR >= 0 && xR < ${s} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${t}C${n+1} = xTexelR${t}C${n+2};\n                `}}else n<d&&(m+=`\n              if(xR >= 0 && xR < ${s}) {\n            `,o%2==1?(m+=`\n                xCOffset = xC + 1 - ${u};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${a}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n              `,n+1<d&&(m+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${u};\n                  if(xCOffset >= 0 && xCOffset < ${a}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${t}C${n+1} = vec4(xTexelR${t}C${n+2}.xy, final.xy);\n                `)):(m+=`\n                if(xC >= 0 && xC < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${u};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.xy, xTexelR${t}C${n+2}.xy);\n              `,n+1<d&&(m+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n                `)),m+="}");n<d&&(m+=`\n            vec4 wTexelR${t}C${n} = getW(${t}, ${n}, d1, q);\n            wR${t}C${n} = vec4(wTexelR${t}C${n}.xz, wTexelR${t}C${n}.xz);\n          `,n+1<d&&(m+=`\n              vec4 wTexelR${t}C${n+1} = getW(${t}, ${n+1}, d1, q);\n              wR${t}C${n+1} =\n                vec4(wTexelR${t}C${n+1}.xz, wTexelR${t}C${n+1}.xz);`))}for(let t=0;t<p;t++)for(let e=0;e<d;e++)m+=`dotProd += xR${t}C${e} * wR${t}C${e};`;let y="",b="";n&&(y=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,b="result = activation(result);");const x=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${y}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${m}\n\n        vec4 result = dotProd;\n        ${x}\n        ${b}\n        setOutput(result);\n      }\n    `}}class Rw{constructor(t,e,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=t,[u]=e,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===r?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+d],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+f];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}class Dw{constructor(t,e,n){this.variableNames=["x"],this.outputShape=t;const r=t.length,s=e?"0.0":`getX(${_w(r,"coords")})`,a=t[t.length-1];let i="",o="";e?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?"end + pow2 < "+a:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${Jx(r)} coords = getOutputCoords();\n        int end = ${Fw(r,"coords")};\n        float val = ${s};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${Fw(r,"coords")} = idx;\n          val += getX(${_w(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.index&&(this.index=e.getUniformLocation(n,"index")),e.gl.uniform1f(this.index,t)}}}function _w(t,e){if(1===t)return""+e;if(2===t)return`${e}.x, ${e}.y`;if(3===t)return`${e}.x, ${e}.y, ${e}.z`;if(4===t)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw Error(`Cumulative sum for rank ${t} is not yet supported`)}function Fw(t,e){if(1===t)return""+e;if(2===t)return e+".y";if(3===t)return e+".z";if(4===t)return e+".w";throw Error(`Cumulative sum for rank ${t} is not yet supported`)}class Ow{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Qb.DENSE;const e=rx(t),n=Mx();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${zx(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class Mw{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Qb.DENSE;const e=rx(t),n=Mx();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${zx(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class zw{constructor(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class Lw{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}class Bw{constructor(t){this.variableNames=["A"],this.outTexUsage=tx.DOWNLOAD;const e=Mx();this.outputShape=t,this.userCode=`\n      ${Bx}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class Pw{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=tx.DOWNLOAD;const e=Mx();this.outputShape=t,this.userCode=`\n      ${Bx}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}class Ww{constructor(t,e,n=!1){this.variableNames=["A"];const r=Mx(),[s,a]=e;this.outputShape=t;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${Lx(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class Vw{constructor(t,e,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=Mx(),[s,a]=e;this.outputShape=t;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let e=0;e<=1;e++)for(let n=0;n<=1;n++){const o=2*e+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${t[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${e} < ${t[1]}) {\n              localCoords[1] += ${e};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${Lx(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${r.output} = ${o};\n      }\n    `}}const Uw="return real * expR - imag * expI;",Gw="return real * expI + imag * expR;";class Hw{constructor(t,e,n){this.variableNames=["real","imag"];const r=e[1];this.outputShape=e;const s=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,a=n?r+".0":"1.0";this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${t}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}class jw{constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(t){return(e,n)=>{null==this.valueLoc&&(this.valueLoc=e.getUniformLocationNoThrow(n,"value")),e.gl.uniform1f(this.valueLoc,t)}}}class qw{constructor(t,e,n){this.variableNames=["A","indices"];const r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;const s=Jx(this.rank),a=function(t,e){const n=t.length;if(n>4)throw Error(`Gather for rank ${n} is not yet supported`);if(1===n)return"int(getIndices(resRC))";const r=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let n=0;n<t.length;n++)n===e?s.push(`int(getIndices(${r[n]}))`):s.push(""+r[n]);return s.join()}(t,n);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}class Kw{constructor(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;const r=Jx(e.length),s=Jx(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}function Xw(t){const e=Mx();return function(t,e){const n=yx(t,()=>t.createShader(t.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(ix(t,()=>t.shaderSource(n,e)),ix(t,()=>t.compileShader(n)),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(t,`${e.version}\n    precision highp float;\n    ${e.attribute} vec3 clipSpacePos;\n    ${e.attribute} vec2 uv;\n    ${e.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function Yw(t){return function(t,e){const n=yx(t,()=>t.createBuffer(),"Unable to create WebGLBuffer");return ix(t,()=>t.bindBuffer(t.ARRAY_BUFFER,n)),ix(t,()=>t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW)),n}(t,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function Jw(t){return function(t,e){const n=yx(t,()=>t.createBuffer(),"Unable to create WebGLBuffer");return ix(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,n)),ix(t,()=>t.bufferData(t.ELEMENT_ARRAY_BUFFER,e,t.STATIC_DRAW)),n}(t,new Uint16Array([0,1,2,2,1,3]))}function Zw(t,e,r,s,a,i){!function(t,e){const r=n().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0){throw new Error("Requested texture size "+`[${t}x${e}]`+" is invalid.")}if(t>r||e>r){throw new Error("Requested texture size "+`[${t}x${e}]`+" greater than WebGL maximum on this browser / GPU "+`[${r}x${r}]`+".")}}(e,r);const o=function(t){return yx(t,()=>t.createTexture(),"Unable to create WebGLTexture.")}(t),l=t.TEXTURE_2D;return ix(t,()=>t.bindTexture(l,o)),ix(t,()=>t.texParameteri(l,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)),ix(t,()=>t.texParameteri(l,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)),ix(t,()=>t.texParameteri(l,t.TEXTURE_MIN_FILTER,t.NEAREST)),ix(t,()=>t.texParameteri(l,t.TEXTURE_MAG_FILTER,t.NEAREST)),ix(t,()=>t.texImage2D(l,0,s,e,r,0,a,i,null)),ix(t,()=>t.bindTexture(t.TEXTURE_2D,null)),o}function Qw(t){return t.internalFormatFloat}function tv(t){return t.internalFormatHalfFloat}function ev(t){return t.downloadTextureFormat}function nv(t){return t.internalFormatPackedFloat}function rv(t){return t.internalFormatPackedHalfFloat}function sv(t,e,n,r,s,a,i,o){const l=t,u=new Float32Array(function(t,e){const[n,r]=sx(t,e);return n*r*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,e),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}class av{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const e=n().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,function(t,e){Yb[t]=e}(e,t)):this.gl=Zb(e);let r="WEBGL_color_buffer_float";if(1===n().getNumber("WEBGL_VERSION")){const t="OES_texture_float",e="OES_texture_half_float";if(this.textureFloatExtension=lx(this.gl,t),Ix(this.gl,e))this.textureHalfFloatExtension=lx(this.gl,e);else if(n().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(r),Ix(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=lx(this.gl,"EXT_color_buffer_half_float");else if(n().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(r="EXT_color_buffer_float",Ix(this.gl,r))this.colorBufferFloatExtension=this.gl.getExtension(r);else{if(!Ix(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=Yw(this.gl),this.indexBuffer=Jw(this.gl),this.framebuffer=function(t){return yx(t,()=>t.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=ax(this.gl,this.textureHalfFloatExtension)}get debug(){return n().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;ix(t,()=>t.finish()),ix(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),ix(t,()=>t.deleteFramebuffer(this.framebuffer)),ix(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),ix(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),ix(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=nx(e,n);return Zw(t,s,a,Qw(r),r.textureFormatFloat,t.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=nx(e,n);return Zw(t,s,a,tv(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=nx(e,n);return Zw(t,s,a,ev(r),t.RGBA,t.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function(t,e,n){ix(t,()=>t.bindTexture(t.TEXTURE_2D,e)),n.data instanceof Uint8Array?ix(t,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,n.width,n.height,0,t.RGBA,t.UNSIGNED_BYTE,n.data)):ix(t,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n)),ix(t,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,n,r){this.throwIfDisposed(),function(t,e,n,r,s,a){let i,o,l;ix(t,()=>t.bindTexture(t.TEXTURE_2D,e)),s instanceof Uint8Array?(i=new Uint8Array(n*r*4),o=t.UNSIGNED_BYTE,l=t.RGBA):(i=new Float32Array(n*r*4),o=t.FLOAT,l=a.internalFormatPackedFloat),i.set(s),ix(t,()=>t.texImage2D(t.TEXTURE_2D,0,l,n,r,0,t.RGBA,o,i)),ix(t,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,t,e,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=sx(e,n);return Zw(t,s,a,rv(r),t.RGBA,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=sx(e,n);return Zw(t,s,a,nv(r),t.RGBA,t.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(mx(this.gl,this.framebuffer),this.outputTexture=null),ix(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,n){return this.downloadMatrixDriver(t,()=>function(t,e,n,r){const[s,a]=nx(e,n),i=new Uint8Array(e*n*4);return ix(t,()=>t.readPixels(0,0,s,a,r.downloadTextureFormat,t.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}(this.gl,e,n,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,n,r,s,a){return sv(this.gl,t,0,0,0,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return function(t,e,n){const r=t,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,t,e)}createBufferFromTexture(t,e,n){this.bindTextureToFrameBuffer(t);const r=function(t,e,n,r){const s=t.createBuffer();ix(t,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,s));const a=16*e*n;return ix(t,()=>t.bufferData(t.PIXEL_PACK_BUFFER,a,t.STREAM_READ)),ix(t,()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,0)),ix(t,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,null)),s}(this.gl,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,r;if(n().getBool("WEBGL_FENCE_API_ENABLED")){const n=t,s=n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),r=()=>{const t=n.clientWaitSync(s,0,0);return t===n.ALREADY_SIGNALED||t===n.CONDITION_SATISFIED},e=s}else n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),r=()=>this.isQueryAvailable(e,n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):r=()=>!0;return{query:e,isFencePassed:r}}downloadMatrixFromPackedTexture(t,e,n){return this.downloadMatrixDriver(t,()=>function(t,e,n){const r=new Float32Array(e*n*4);return ix(t,()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,r)),r}(this.gl,e,n))}createProgram(t){this.throwIfDisposed();const e=this.gl,n=ux(e,t),r=Xw(e),s=function(t){return yx(t,()=>t.createProgram(),"Unable to create WebGLProgram.")}(e);return ix(e,()=>e.attachShader(s,r)),ix(e,()=>e.attachShader(s,n)),function(t,e){if(ix(t,()=>t.linkProgram(e)),!1===t.getProgramParameter(e,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}(e,s),this.debug&&hx(e,s),this.vertexAttrsAreBound||(this.setProgram(s),this.vertexAttrsAreBound=function(t,e,n){return ix(t,()=>t.bindBuffer(t.ARRAY_BUFFER,n)),px(t,e,"clipSpacePos",n,3,20,0)&&px(t,e,"uv",n,2,20,12)}(e,this.program,this.vertexBuffer)),s}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&ix(this.gl,()=>this.gl.deleteProgram(t))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&hx(this.gl,this.program),ix(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,n=!0){return this.throwIfDisposed(),n?function(t,e,n){return yx(t,()=>t.getUniformLocation(e,n),'uniform "'+n+'" not present in program.')}(this.gl,t,e):function(t,e,n){return t.getUniformLocation(e,n)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),ix(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),dx(this.gl,t,e,n)}setOutputMatrixTexture(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)}setOutputPackedMatrixTexture(t,e,n){this.throwIfDisposed();const[r,s]=sx(e,n);this.setOutputMatrixTextureDriver(t,r,s)}setOutputMatrixWriteRegion(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&hx(this.gl,this.program),gx(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;this.debug&&this.debugValidate(),ix(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),ix(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=lx(this.gl,2===n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2();return void t.endQuery(e.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await A(()=>this.disposed||this.isQueryAvailable(t,n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(t,n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(0===e)return null;if(2===e){const e=this.gl;return e.getQueryParameter(t,e.QUERY_RESULT)/1e6}{const e=this.getQueryTimerExtensionWebGL1();return e.getQueryObjectEXT(t,e.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const e=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=e.getQueryParameter(t,e.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const e=this.getQueryTimerExtensionWebGL1(),n=e.getQueryObjectEXT(t,e.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(e.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){const t=function(t){let e=0;for(;e<t.length;++e){if(!t[e]())break}return e-1}(this.itemsToPoll.map(t=>t.isDoneFn));for(let e=0;e<=t;++e){const{resolveFn:t}=this.itemsToPoll[e];t()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||A(()=>(this.pollItems(),0===this.itemsToPoll.length))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),fx(this.gl,t,this.framebuffer),this.debug&&gx(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(fx(this.gl,this.outputTexture,this.framebuffer),this.debug&&gx(this.gl)):mx(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const n=e();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(t,e,n){this.throwIfDisposed();const r=this.gl;fx(r,t,this.framebuffer),this.debug&&gx(r),this.outputTexture=t,ix(r,()=>r.viewport(0,0,e,n)),ix(r,()=>r.scissor(0,0,e,n))}setOutputMatrixWriteRegionDriver(t,e,n,r){this.throwIfDisposed(),ix(this.gl,()=>this.gl.scissor(t,e,n,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function iv(t,e){if(t.length!==e.length)throw Error(`Binary was compiled with ${t.length} inputs, but was executed with ${e.length} inputs`);t.forEach((t,n)=>{const r=t.logicalShape,s=e[n],a=s.shape;if(!C(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(t.isUniform&&s.isUniform)return;const i=t.texShape,o=s.isUniform?null:s.texData.texShape;if(!C(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)})}class ov{constructor(t,e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;const{filterWidth:r,inChannels:s,strideWidth:a,strideHeight:i,padInfo:o,outWidth:l,dilationWidth:u,dilationHeight:c,dataFormat:h}=n,{left:p,top:d}=o,f=s*r,m=Mx(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let n=0;n<=1;n++)for(let r=0;r<=1;r++)x+=`\n          blockIndex = rc.y + ${r};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${t[1]} && pos < ${t[0]}) {\n            offsetY = int(blockIndex / (${l})) * ${i} - ${d};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${e[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${l}.) * ${a}. - ${p}.);\n              d1 = offsetX + ${u} * (int(mod(float(pos), ${f}.) / ${s}.));\n\n              if(d1 < ${e[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${s}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+r}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+r}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}class lv{constructor(t,e,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=e,i=t[3]-1;let o;this.outputShape=t;const l=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${l})`:1===s?`1.0/(${l})`:`exp(log(${l}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class uv{constructor(t,e,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}class cv{constructor(t,e,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=e,i=t[3]-1;let o;this.outputShape=t;const l=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${l})`:1===s?`1.0/(${l})`:`exp(log(${l}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}class hv{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,s=t.effectiveFilterHeight,a=t.effectiveFilterWidth,i=s-1-t.padInfo.top,o=a-1-t.padInfo.left,l=s*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${e}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class pv{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,s=t.dilationDepth,a=t.dilationHeight,i=t.dilationWidth,o=t.effectiveFilterDepth,l=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=o-1-t.padInfo.front,h=l-1-t.padInfo.top,p=u-1-t.padInfo.left,d=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${e}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class dv{constructor(t,e,n=!1,r=!1,s=!1,a=null,i=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const o=n?t[1]:t[2],l=Math.ceil(o/2),u=n?"i * 2, rc.y":"rc.y, i * 2",c=r?"rc.z, i * 2":"i * 2, rc.z",h=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],p=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let d="",f="";a&&(d=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${a}\n        }`:`vec4 activation(vec4 x) {\n          ${a}\n        }`,f="result = activation(result);");const m=s?"result += getBiasAtOutCoords();":"";s&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${d}\n\n      const float sharedDimension = ${l}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${l}; i++) {\n          vec4 a = getMatrixA(rc.x, ${u});\n          vec4 b = getMatrixB(rc.x, ${c});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${h[0]} * ${p[0]});\n          result += (${h[1]} * ${p[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${m}\n\n        ${f}\n\n        setOutput(result);\n      }\n    `}}class fv{constructor(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.seedLoc&&(this.seedLoc=e.getUniformLocation(n,"seed")),e.gl.uniform1f(this.seedLoc,t)}}}class mv{constructor(t,e,n,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}class gv{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;const e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=Ox("rc",e),r=Jx(e),s=function(t,e,n){if(1===t)return"rc > "+e[0];let r="";for(let s=t-2;s<t;s++)r+=`${n[s]} >= ${e[s]}`,s<t-1&&(r+="||");return r}(e,t,n),a=function(t,e,n,r){if(1===t)return"";const s=r.slice(-2);return`\n    int r = ${s[0]};\n    int c = ${s[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${e};\n    bool rEdge = rp1 >= ${n};\n  `}(e,t[t.length-1],t[t.length-2],n),i=function(t,e){const n=t.length,r=function(t,e){const n=[];for(let r=0;r<=1;r++)for(let s=0;s<=1;s++){let a=`${0===r?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let n=2;n<t;n++)a=e[e.length-1-n]+","+a;n.push(a)}return n}(n,e);if(1===n)return`getA(rc),\n            rc + 1 >= ${t[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(t,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${s}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class yv{constructor(t,e,n){this.variableNames=["x"],this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const r=t.length,s=Jx(r),a=e.map(t=>t[0]).join(","),i=e.map((e,n)=>e[0]+t[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class bv{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const r=t.length,s=Jx(r),a=e.map(t=>t[0]).join(","),i=e.map((e,n)=>e[0]+t[n]).join(","),o=Ox("rc",r),l=Ox("source",r),u=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${l.slice(-2).join()})`,h=[s+" rc = outputLoc;",`${o[r-1]} += 1;\n       if(${u}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${o[r-2]} += 1;\n       if(${o[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${o[r-1]} += 1;\n         if(${u}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let t=0,e=1===r?2:4;t<e;t++)d+=`\n        ${h[t]}\n        if (${p}) {\n          result[${t}] = float(${n});\n        } else {\n          ${s} source = rc - start;\n          result[${t}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}class xv{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideHeight,o=t.strideWidth,l=t.dilationHeight,u=t.dilationWidth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.top,d=t.padInfo.left;this.outputShape=t.outShape;const f="avg"===e,m=`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,g=`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${e} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class wv{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideDepth,o=t.strideHeight,l=t.strideWidth,u=t.dilationDepth,c=t.dilationHeight,h=t.dilationWidth,p=t.effectiveFilterDepth,d=t.effectiveFilterHeight,f=t.effectiveFilterWidth,m=t.padInfo.front,g=t.padInfo.top,y=t.padInfo.left;this.outputShape=t.outShape;const b="avg"===e;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${e} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(w="avgValue / count");const v=4*Math.floor(a/4),N=a%4,C=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${C}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===N}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${C}\n            } else if (${2===N}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${C}\n            } else if (${3===N}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${C}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}class vv{constructor(t,e){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=t;this.outputShape=[r,a];let i="0.0",o="";"prod"===e?i="1.0":"min"===e?(i="1.0 / 1e-20",o="min"):"max"===e&&(i="-1.0 / 1e-20",o="max");let l=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?l="sumValue":"prod"===e?l="prodValue":"all"===e?l="allValue":"any"===e&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===e?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===e&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";s%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}class Nv{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;let n="";for(let t=0;t<4;t++){let e="thisRC = rc;";t%2==1&&(e+="thisRC.z += 1;"),t>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${t>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${t}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${t>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=e,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${zx(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${Lx(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${t[1]};\n        int cols = ${t[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class Cv{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,s]=e.shape,[,a,i]=t.shape,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class Sv{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const l=[r&&e>1?a-1:a,r&&n>1?i-1:i],u=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class kv{constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const l=[r&&e>1?a-1:a,r&&n>1?i-1:i],u=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]},\n          ${l[1]/u[1]});\n      const vec3 inputShapeRC = vec3(${a}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${o-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}class Iv{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,s]=e.shape,[,a,i]=t.shape,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class Ev{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const l=[r&&e>1?a-1:a,r&&n>1?i-1:i],u=[r&&e>1?e-1:e,r&&n>1?n-1:n],c=r?"0.5":"0.0";this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${c})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class Av{constructor(t,e){this.variableNames=["x"];const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=t,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const r=t.map((n,r)=>(n=>-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - coords[${n}] - 1`:`coords[${n}]`)(r)).join(","),s=Jx(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class Tv{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=t;const r=Ox("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,i=Jx(n);function o(n){const r=t.map((r,s)=>function(n,r){return-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - ${r[n]} - 1`:""+r[n]}(s,n));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(t){return o(t)}(r.slice())};\n          if(${s}){\n            result.g = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",o(t)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(t){return t[n-2]="("+t[n-2]+" + 1)",o(t)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",o(t)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}class $v{constructor(t,e,n,r,s,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=Jx(s.length),l=Jx(a.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===r?h="i":2===r&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=e>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${s});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}class Rv{constructor(t,e){this.variableNames=["x","segmentIds"];const n=t.windowSize,r=t.batchSize,s=t.inSize,a=t.numSegments,i=a*Math.ceil(s/n);this.outputShape=[r,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let h="";s%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class Dv{constructor(t,e,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let r=0;r<e.length;r++)i.push(""+n[r]),r<t&&a.push(""+n[r]);r=a.join(),s=i.join()}const a=Jx(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}class _v{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=Jx(this.rank),n=`uniform int start[${this.rank}];`,r=function(t){if(1===t)return"sourceLoc";if(t<=6)return Fv.slice(0,t).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${t} is not yet supported`)}(this.rank);let s;s=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map((t,e)=>`sourceLoc.${Fv[e]} = start[${e}] + coords.${Fv[e]};`).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${s}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}const Fv=["x","y","z","w","u","v"];class Ov{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;const e=Jx(this.rank),n=Ox("coords",this.rank),r=Ox("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map((t,e)=>`start[${e}]`).join()});`:t.map((t,e)=>`${r[e]} = ${n[e]} + start[${e}];`).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}class Mv{constructor(t,e,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=Jx(n.length),a=Jx(n.length);let i="";if(1===r)i="coords * strides + begin";else{let t=0;i=n.map((e,r)=>(t++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${t-1}] * strides[${r}] + begin[${r}]`)).join(",")}this.userCode=`\n      ${s} begin = ${s}(${t});\n      ${s} strides = ${s}(${e});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}class zv{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,n){const r=Bv(e,n),s=Pv(t,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const a=Lv(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const t=this.freeTextures[s].shift();return this.usedTextures[s].push(t),t}let i;return r===ex.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===ex.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===ex.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===ex.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===ex.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[s].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(t,e,r,s){if(null==this.freeTextures)return;const a=Bv(r,s),i=Pv(e,a,s);i in this.freeTextures||(this.freeTextures[i]=[]);const o=Lv(e,a,this.gpgpu.gl,this.gpgpu.textureConfig,s),l=n().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==l&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(t),this._numBytesAllocated-=o):(this.freeTextures[i].push(t),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const u=this.usedTextures[i],c=u.indexOf(t);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(c,1),this.log()}log(){if(!this.logEnabled)return;const t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${t})`);const e=this._numBytesFree/this._numBytesAllocated;console.log("Bytes allocated: "+this._numBytesAllocated),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});for(const t in this.usedTextures)this.usedTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function Lv(t,e,n,r,s){const a=function(t,e){switch(t){case ex.PACKED_2X2_FLOAT32:return nv(e);case ex.PACKED_2X2_FLOAT16:return rv(e);case ex.UNPACKED_FLOAT32:return Qw(e);case ex.UNPACKED_FLOAT16:return tv(e);case ex.PACKED_4X1_UNSIGNED_BYTE:return ev(e);default:throw new Error("Unknown physical texture type "+t)}}(e,r);let i;if(s){const[e,n]=sx(t[0],t[1]);i=e*n}else{const[e,n]=nx(t[0],t[1]);i=e*n}return i*function(t,e){const n=t;if(e===n.R32F)return 4;if(e===n.R16F)return 2;if(e===n.RGBA32F)return 16;if(e===t.RGBA)return 16;if(e===n.RGBA16F)return 8;throw new Error("Unknown internal format "+e)}(n,a)}function Bv(t,e){if(t===tx.UPLOAD)return ex.PACKED_2X2_FLOAT32;if(t===tx.RENDER||null==t)return function(t){return n().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?ex.PACKED_2X2_FLOAT32:ex.UNPACKED_FLOAT32:t?ex.PACKED_2X2_FLOAT16:ex.UNPACKED_FLOAT16}(e);if(t===tx.DOWNLOAD||t===tx.PIXELS)return ex.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+t)}function Pv(t,e,n){return`${t[0]}_${t[1]}_${e}_${n}`}class Wv{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;const r=Jx(this.rank),s=function(t){const e=t.length;if(e>5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`imod(resRC, ${t[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let e=0;e<t.length;e++)r.push(`imod(${n[e]}, ${t[e]})`);return r.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}class Vv{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const Uv="if (isnan(x)) return x;",Gv="return abs(x);",Hv=Uv+"\n  return (x < 0.0) ? 0.0 : x;\n",jv=Uv+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",qv="return (x >= 0.0) ? x : (exp(x) - 1.0);",Kv=`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = ${Ol};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;const Xv="return -x;",Yv="return ceil(x);",Jv="return floor(x);",Zv="return exp(x);",Qv="return exp(x) - 1.0;",tN="return x;",eN="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",nN="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",rN="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";class sN{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class aN{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;const e=t.length,n=Ox("rc",e),r=Jx(e),s=function(t,e){if(1===t)return"rc";let n="";for(let r=0;r<t;r++)n+=e[r],r<t-1&&(n+=",");return n}(e,n),a=n.slice(-2),i=e<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const{segment_util:iN}=Kl,oN=Xl,lN=Yl,uN=Jl,cN=Vi,hN={};function pN(t,e=!1){if("linear"===t)return"return x;";if("relu"===t)return e?eN:Hv;if("elu"===t)return e?rN:qv;if("relu6"===t)return e?nN:jv;if("prelu"===t)return e?dw:hw;throw new Error(`Activation ${t} has not been implemented for the WebGL backend.`)}class dN extends tu{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!n().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){const t=Zb(n().getNumber("WEBGL_VERSION"));this.binaryCache=((e=n().getNumber("WEBGL_VERSION"))in hN||(hN[e]={}),hN[e]),this.gpgpu=new av(t),this.canvas=t.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=t,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var e;this.textureManager=new zv(this.gpgpu),this.numMBBeforeWarning=null==n().global.screen?1024:n().global.screen.height*n().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new Ql(this,Bn())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(t,e,r){if((n().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||n().getBool("DEBUG"))&&this.checkNumericalProblems(t),"complex64"===r&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={};return this.texData.set(s,{shape:e,dtype:r,values:t,usage:tx.UPLOAD}),s}move(t,e,r,s){if(n().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:r,dtype:s,values:e,usage:tx.UPLOAD})}readSync(t){const e=this.texData.get(t),{values:n,dtype:r,complexTensors:s,slice:a,shape:i,isPacked:o}=e;if(null!=a){let e;e=o?new sN(i,tN):new Vv(i,tN);const n=this.runWebGLProgram(e,[{dataId:t,shape:i,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeData(n.dataId),s}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===r)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=Z()),"complex64"===r){c=zl(s.real.dataSync(),s.imag.dataSync())}else c=this.getValuesFromTexture(t);return l&&(this.downloadWaitMs+=Z()-u),this.convertAndCacheOnCPU(t,c)}async read(t){if(this.pendingRead.has(t)){const e=this.pendingRead.get(t);return new Promise(t=>e.push(t))}const e=this.texData.get(t),{values:r,shape:s,slice:a,dtype:i,complexTensors:o,isPacked:l}=e;if(null!=a){let e;e=l?new sN(s,tN):new Vv(s,tN);const n=this.runWebGLProgram(e,[{dataId:t,shape:s,dtype:i}],i),r=this.read(n.dataId);return this.disposeData(n.dataId),r}if(null!=r)return this.convertAndCacheOnCPU(t);if(!n().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===n().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,c,h=null;if("complex64"!==i&&n().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(t);const e=this.texData.get(u.dataId);h=this.gpgpu.createBufferFromTexture(e.texture,...rx(s))}if(this.pendingRead.set(t,[]),"complex64"!==i&&await this.gpgpu.createAndWaitForFence(),"complex64"===i){const t=await Promise.all([o.real.data(),o.imag.data()]);c=zl(t[0],t[1])}else if(null==h)c=this.getValuesFromTexture(t);else{const t=N(s);c=this.gpgpu.downloadFloat32MatrixFromBuffer(h,t)}null!=u&&this.disposeData(u.dataId);const p=this.convertAndCacheOnCPU(t,c),d=this.pendingRead.get(t);return this.pendingRead.delete(t),d.forEach(t=>t(p)),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),p}checkNumericalProblems(t){if(null!=t)for(let e=0;e<t.length;e++){const r=t[e];if(!ox(r)){if(n().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${r} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${r} cannot be represented on this device.`)}}}getValuesFromTexture(t){const{shape:e,dtype:r,isPacked:s}=this.texData.get(t),a=N(e);if(n().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(t),r=this.texData.get(n.dataId),s=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...rx(e)).subarray(0,a);return this.disposeData(n.dataId),s}const i=n().getBool("WEBGL_PACK")&&!0===s,o=i?vx(e):e,l=i?new Pw(o):new Bw(o),u=this.runWebGLProgram(l,[{shape:o,dtype:r,dataId:t}],"float32"),c=this.texData.get(u.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture,c.texShape[0],c.texShape[1]).subarray(0,a);return this.disposeData(u.dataId),h}async time(t){const e=this.activeTimers,r=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=r,s=!0):this.activeTimers.push(r),this.activeTimers=r,t();const a=v(this.activeTimers.map(t=>t.query)).filter(t=>null!=t),i=v(this.activeTimers.map(t=>t.name)).filter(t=>null!=t);this.activeTimers=e,s&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const t=await Promise.all(a);o.kernelMs=y(t),o.getExtraProfileInfo=()=>t.map((t,e)=>({name:i[e],ms:t})).map(t=>`${t.name}: ${t.ms}`).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Z(),endMs:null}}endTimer(t){return n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=Z(),t)}async getQueryTime(t){if(n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(t);const e=t;return e.endMs-e.startMs}disposeData(t){if(this.pendingDisposal.has(t))return;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(!this.texData.has(t))return;this.releaseGPUData(t);const{complexTensors:e}=this.texData.get(t);null!=e&&(e.real.dispose(),e.imag.dispose()),this.texData.delete(t)}releaseGPUData(t){const{texture:e,dtype:n,texShape:r,usage:s,isPacked:a,slice:i}=this.texData.get(t),o=i&&i.origDataId||t,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=e&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(e,r,s,a)));const u=this.texData.get(t);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture}getDataInfo(t){return this.texData.get(t)}getCPUBackend(){return n().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Bn().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(t,e=128){const r=this.getCPUBackend();return this.warnedAboutCPUBackend||null!=r||n().getBool("IS_TEST")||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=r&&t.every(t=>null==this.texData.get(t.dataId).texture&&N(t.shape)<e)}getGPGPUContext(){return this.gpgpu}complex(t,e){const n=this.makeOutput(t.shape,"complex64");return this.texData.get(n.dataId).complexTensors={real:Bn().keep(t.clone()),imag:Bn().keep(e.clone())},n}real(t){return this.texData.get(t.dataId).complexTensors.real.clone()}imag(t){return this.texData.get(t.dataId).complexTensors.imag.clone()}slice(t,e,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.slice(t,e,r);if(0===N(r))return Kt([],r,t.dtype);const{isPacked:s}=this.texData.get(t.dataId),a=kn(t.shape,e,r);if(s||!a){const s=n().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ov(r):new _v(r),a=s.getCustomSetupFunc(e);return this.compileAndRun(s,[t],null,a)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,r)}shallowSlice(t,e,n){const r=this.texData.get(t.dataId),s=this.makeOutput(n,t.dtype),a=this.texData.get(s.dataId);Object.assign(a,r),a.shape=n,a.dtype=t.dtype;let i=In(e,t.strides);r.slice&&(i+=r.slice.flatOffset),a.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||t.dataId};const o=this.dataRefCount.get(a.slice.origDataId)||1;return this.dataRefCount.set(a.slice.origDataId,o+1),s}stridedSlice(t,e,n,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.stridedSlice(t,e,n,r);const s=mn(e,n,r);if(s.some(t=>0===t))return Kt([],s);const a=new Mv(e,r,s);return this.compileAndRun(a,[t])}reverse(t,e){const r=n().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Tv(t.shape,e):new Av(t.shape,e);return this.compileAndRun(r,[t])}concat(t,e){if("complex64"===t[0].dtype){const n=t.map(t=>Sa(t)),r=t.map(t=>Ms(t));return jt(this.concat(n,e),this.concat(r,e))}if(this.shouldExecuteOnCPU(t))return this.cpuBackend.concat(t,e);if(1===t.length)return t[0];if(t.length>n().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const n=Math.floor(t.length/2),r=this.concat(t.slice(0,n),e),s=this.concat(t.slice(n),e);return this.concat([r,s],e)}if(n().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].rank>1){const n=new xw(t.map(t=>t.shape),e);return this.compileAndRun(n,t)}const r=Fr(t.map(t=>t.shape),e),s=t.map(t=>t.as2D(-1,N(t.shape.slice(e)))),a=new bw(s.map(t=>t.shape));return this.compileAndRun(a,s).reshape(r)}neg(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.neg(t);if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Xv,t.dtype);const e=new Vv(t.shape,Xv);return this.compileAndRun(e,[t])}batchMatMul(t,e,n,r){const s=n?t.shape[2]:t.shape[1],a=r?e.shape[1]:e.shape[2],i=n?t.shape[1]:t.shape[2],[o,,]=t.shape;if((1===s||1===a)&&i>1e3){n&&(t=Qe(t,[0,2,1])),r&&(e=Qe(e,[0,2,1]));const s=1===a?t:t.as3D(o,i,1),l=1===a?2:1,u=1===a?e.as3D(o,1,i):e;return this.multiply(s,u).sum(l,!0)}const l=kt(t.dtype,e.dtype),u=new dv(t.shape,[o,s,a],n,r);return this.compileAndRun(u,[t,e],l)}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){const o=n?t.shape[2]:t.shape[1],l=r?e.shape[1]:e.shape[2],[u,,]=t.shape,c=kt(t.dtype,e.dtype),h=null!=s,p=null!=i,d=a?pN(a,!0):null,f=new dv(t.shape,[u,o,l],n,r,h,d,p),m=[t,e];return s&&m.push(s),i&&m.push(i),this.compileAndRun(f,m,c)}multiply(t,e){if("complex64"===t.dtype){const n=this.texData.get(t.dataId),r=this.texData.get(e.dataId),s=new ow(aw,t.shape,e.shape),a=new ow(iw,t.shape,e.shape),i=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag),this.makeComplexComponentTensorInfo(e,r.complexTensors.real),this.makeComplexComponentTensorInfo(e,r.complexTensors.imag)],o=this.compileAndRun(s,i),l=this.compileAndRun(a,i),u=this.complex(o,l);return o.dispose(),l.dispose(),u}if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.multiply(t,e);if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,cw,t.dtype);const r=new pw(cw,t.shape,e.shape);return this.compileAndRun(r,[t,e],t.dtype)}batchNorm(t,e,r,s,a,i){const o=[t,e,r];let l=null;null!=s&&(l=s.shape,o.push(s));let u=null;if(null!=a&&(u=a.shape,o.push(a)),n().getBool("WEBGL_PACK_NORMALIZATION")){const n=new sw(t.shape,e.shape,r.shape,l,u,i);return this.compileAndRun(n,o)}const c=new rw(t.shape,e.shape,r.shape,l,u,i);return this.compileAndRun(c,o)}localResponseNormalization4D(t,e,r,s,a){const i=n().getBool("WEBGL_PACK_NORMALIZATION")?new cv(t.shape,e,r,s,a):new lv(t.shape,e,r,s,a);return this.compileAndRun(i,[t])}LRNGrad(t,e,n,r,s,a,i){const o=new uv(e.shape,r,s,a,i);return this.compileAndRun(o,[e,n,t])}tile(t,e){if("string"===t.dtype){const n=this.readSync(t.dataId).map(t=>nt(t)),r=Re(t.shape,t.dtype,n);return lN(r,e)}const n=new Wv(t.shape,e);return this.compileAndRun(n,[t])}pad(t,e,r){const s=n().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new bv(t.shape,e,r):new yv(t.shape,e,r);return this.compileAndRun(s,[t])}gather(t,e,n){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.gather(t,e,n);const r=new qw(t.shape,e.size,n);return this.compileAndRun(r,[t,e])}batchToSpaceND(t,e,n){b(t.rank<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const r=e.reduce((t,e)=>t*e),s=$l(t.shape,e,r),a=Rl(s.length,e.length),i=Dl(t.shape,e,r),o=_l(n,e.length),l=Fl(i,n,e.length);return Qe(t.reshape(s),a).reshape(i).slice(o,l)}spaceToBatchND(t,e,n){b(t.rank<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const r=e.reduce((t,e)=>t*e),s=[[0,0]];s.push(...n);for(let n=1+e.length;n<t.shape.length;++n)s.push([0,0]);const a=t.pad(s),i=$l(a.shape,e,r,!1),o=Rl(i.length,e.length,!1),l=Dl(a.shape,e,r,!1),u=Qe(a.reshape(i),o);return Ye(u,l)}reduce(t,e,n){const r=t.shape[0],s=t.shape[1],a=$s(s),i=Math.ceil(s/a),o=new vv({windowSize:a,inSize:s,batchSize:r,outSize:i},e),l=this.compileAndRun(o,[t],n);return 1===l.shape[1]?l:this.reduce(l,e,n)}argReduce(t,e,n=null){let r=t.shape[0],s=t.shape[1];null!=n&&(r=n.shape[0],s=n.shape[1]);const a=$s(s),i={windowSize:a,inSize:s,batchSize:r,outSize:Math.ceil(s/a)},o=new _x(i,e,null==n),l=[t];null!=n&&l.push(n);const u=this.compileAndRun(o,l,"int32");return 1===u.shape[1]?u:this.argReduce(t,e,u)}argReducePacked(t,e,n=null){const r=null!=n?n.shape:t.shape,s=$s(r[r.length-1]),a=new tw(r,s,e,null==n),i=null==n?[t]:[t,n],o=this.compileAndRun(a,i,"int32");return o.rank===t.rank?this.argReducePacked(t,e,o):o}sum(t,e){ar("sum",e,t.rank);const[n,r]=rr(t.shape,e),s=N(r),a=t.as2D(-1,s),i=It(t.dtype);return this.reduce(a,"sum",i).reshape(n)}prod(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.prod(t,e);const[n,r]=rr(t.shape,e),s=N(r),a=t.as2D(-1,s),i=It(t.dtype);return this.reduce(a,"prod",i).reshape(n)}unsortedSegmentSum(t,e,n){let r=0;const s=ir([r],t.rank);let a=t;null!=s&&(a=Qe(t,s),r=lr(1,t.rank)[0]);const i=iN.computeOutShape(a.shape,r,n),o=N([a.shape[r]]),l=a.as2D(-1,o),u=It(t.dtype);let c=this.segOpCompute(l,"unsortedSegmentSum",e,u,n).reshape(i);return null!=s&&(c=Qe(c,or(s))),c}segOpCompute(t,e,n,r,s){const a=t.shape[0],i=t.shape[1],o=iN.segOpComputeOptimalWindowSize(i,s),l=new Rv({windowSize:o,inSize:i,batchSize:a,numSegments:s},e),u=this.compileAndRun(l,[t,n],r);return u.shape[1]===s?u:(n=ti(0,s).tile([i/o]),this.segOpCompute(u,e,n,r,s))}argMinMaxReduce(t,e,r){const s=[e];if(ar("arg"+r.charAt(0).toUpperCase()+r.slice(1),s,t.rank),!n().getBool("WEBGL_PACK_REDUCE")||t.rank<=2){const[e,n]=rr(t.shape,s),a=N(n),i=t.as2D(-1,a);return this.argReduce(i,r).reshape(e)}return this.argReducePacked(t,r)}argMin(t,e){return this.argMinMaxReduce(t,e,"min")}argMax(t,e){return this.argMinMaxReduce(t,e,"max")}cumsum(t,e,n,r){if(e!==t.rank-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${t.rank-1} but got axis=`+e);const s=t.shape[e];let a=t;for(let e=0;e<=Math.ceil(Math.log2(s))-1;e++){const n=new Dw(t.shape,!1,r),s=n.getCustomSetupFunc(e),i=a;a=this.compileAndRun(n,[a],a.dtype,s),i.dispose()}if(n){const e=new Dw(t.shape,n,r),s=a;a=this.compileAndRun(e,[a]),s.dispose()}return a}equal(t,e){if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(equal(a, b));\n","bool");const r=new pw("return float(a == b);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}notEqual(t,e){if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(notEqual(a, b));\n","bool");const r=new pw("return float(a != b);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}less(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.less(t,e);if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThan(a, b));\n","bool");const r=new pw("return float(a < b);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}lessEqual(t,e){if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThanEqual(a, b));\n","bool");const r=new pw("return float(a <= b);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}greater(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.greater(t,e);if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThan(a, b));\n","bool");const r=new pw("return float(a > b);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}greaterEqual(t,e){if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThanEqual(a, b));\n","bool");const r=new pw("return float(a >= b);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}logicalNot(t){const e=new Vv(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])}logicalAnd(t,e){if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");const r=new pw("return float(a >= 1.0 && b >= 1.0);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}logicalOr(t,e){if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");const r=new pw("return float(a >= 1.0 || b >= 1.0);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}select(t,e,n){const r=new Dv(t.rank,e.shape,e.rank);return this.compileAndRun(r,[t,e,n],kt(e.dtype,n.dtype))}where(t){Ml("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const e=t.dataSync();return cN(t.shape,e)}topk(t,e,n){const r=t.dataSync();return uN(r,t.shape,t.dtype,e,n)}min(t,e){ar("min",e,t.rank);const[n,r]=rr(t.shape,e),s=N(r),a=t.as2D(-1,s);return this.reduce(a,"min",a.dtype).reshape(n)}minimum(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.minimum(t,e);const r=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fw("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new pw("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",t.shape,e.shape);return this.compileAndRun(r,[t,e])}mod(t,e){const r=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fw("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new pw("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,e.shape);return this.compileAndRun(r,[t,e])}maximum(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.maximum(t,e);const r=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fw("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new pw("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",t.shape,e.shape);return this.compileAndRun(r,[t,e])}all(t,e){ar("all",e,t.rank);const[n,r]=rr(t.shape,e),s=N(r),a=t.as2D(-1,s);return this.reduce(a,"all",a.dtype).reshape(n)}any(t,e){ar("any",e,t.rank);const[n,r]=rr(t.shape,e),s=N(r),a=t.as2D(-1,s);return this.reduce(a,"any",a.dtype).reshape(n)}floorDiv(t,e){if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");const r=new pw("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",t.shape,e.shape);return this.compileAndRun(r,[t,e],"int32")}add(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,lw);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.add(t,e);const r=kt(t.dtype,e.dtype);if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,lw,r);const s=new pw(lw,t.shape,e.shape);return this.compileAndRun(s,[t,e],r)}packedUnaryOp(t,e,n){const r=new sN(t.shape,e);return this.compileAndRun(r,[t],n)}packedBinaryOp(t,e,n,r,s=!1){const a=new fw(n,t.shape,e.shape,s);return this.compileAndRun(a,[t,e],r)}complexSeparableBinaryOp(t,e,n){const r=this.texData.get(t.dataId),s=this.texData.get(e.dataId),[a,i]=[[r.complexTensors.real,s.complexTensors.real],[r.complexTensors.imag,s.complexTensors.imag]].map(r=>{const[s,a]=r,i=this.makeComplexComponentTensorInfo(t,s),o=this.makeComplexComponentTensorInfo(e,a),l=new pw(n,t.shape,e.shape);return this.compileAndRun(l,[i,o],kt(s.dtype,a.dtype))}),o=this.complex(a,i);return a.dispose(),i.dispose(),o}makeComplexComponentTensorInfo(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}}addN(t){if(1===t.length)return t[0];if(t.length>n().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),r=this.addN(t.slice(e));return this.addN([n,r])}const e=t.map(t=>t.dtype).reduce((t,e)=>kt(t,e)),r=t.map(t=>t.shape),s=n().getBool("WEBGL_PACK")?new Dx(t[0].shape,r):new Rx(t[0].shape,r);return this.compileAndRun(s,t,e)}subtract(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,uw);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.subtract(t,e);const r=kt(t.dtype,e.dtype);if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,uw,t.dtype);const s=new pw(uw,t.shape,e.shape);return this.compileAndRun(s,[t,e],r)}pow(t,e){const r=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fw("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new pw("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,e.shape),s=kt(t.dtype,e.dtype);return this.compileAndRun(r,[t,e],s)}ceil(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.ceil(t);if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Yv,t.dtype);const e=new Vv(t.shape,Yv);return this.compileAndRun(e,[t])}floor(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.floor(t);if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Jv,t.dtype);const e=new Vv(t.shape,Jv);return this.compileAndRun(e,[t])}sign(t){const e=new Vv(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])}isNaN(t){const e=new Vv(t.shape,"return float(isnan(x));");return this.compileAndRun(e,[t],"bool")}isInf(t){const e=new Vv(t.shape,"return float(isinf(x));");return this.compileAndRun(e,[t],"bool")}isFinite(t){const e=new Vv(t.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(e,[t],"bool")}round(t){const e=new Vv(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])}exp(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.exp(t);if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Zv,t.dtype);const e=new Vv(t.shape,Zv);return this.compileAndRun(e,[t])}expm1(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.expm1(t);if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Qv,t.dtype);const e=new Vv(t.shape,Qv);return this.compileAndRun(e,[t])}softmax(t,e){const n=$([e],t.shape),r=ea(t,n),s=sr(r.shape,n),a=this.subtract(t,r.reshape(s)),i=this.exp(a),o=this.sum(i,n).reshape(s);return Xn(i,o)}log(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.log(t);if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);const e=new Vv(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(e,[t])}log1p(t){const e=new Vv(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])}sqrt(t){const e=new Vv(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])}rsqrt(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.rsqrt(t);const e=new Vv(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])}reciprocal(t){const e=new Vv(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])}relu(t){let e;return e=n().getBool("WEBGL_PACK")?new sN(t.shape,eN):new Vv(t.shape,Hv),this.compileAndRun(e,[t])}relu6(t){let e;return e=n().getBool("WEBGL_PACK")?new sN(t.shape,nN):new Vv(t.shape,jv),this.compileAndRun(e,[t])}prelu(t,e){const r=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fw(dw,t.shape,e.shape):new pw(hw,t.shape,e.shape);return this.compileAndRun(r,[t,e])}elu(t){if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,rN,t.dtype);const e=new Vv(t.shape,qv);return this.compileAndRun(e,[t])}eluDer(t,e){const r=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fw("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,e.shape):new pw("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(r,[t,e])}selu(t){const e=new Vv(t.shape,Kv);return this.compileAndRun(e,[t])}int(t){const e=new Vv(t.shape,"return float(int(x));");return this.compileAndRun(e,[t],"int32")}clip(t,e,r){let s;s=n().getBool("WEBGL_PACK_CLIP")?new gw(t.shape):new mw(t.shape);const a=s.getCustomSetupFunc(e,r);return this.compileAndRun(s,[t],null,a)}abs(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.abs(t);if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Gv,t.dtype);const e=new Vv(t.shape,Gv);return this.compileAndRun(e,[t])}complexAbs(t){const e=this.texData.get(t.dataId),n=new yw(t.shape),r=[this.makeComplexComponentTensorInfo(t,e.complexTensors.real),this.makeComplexComponentTensorInfo(t,e.complexTensors.imag)];return this.compileAndRun(n,r)}sigmoid(t){const e=new Vv(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])}softplus(t){const e=new Vv(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])}sin(t){const e=new Vv(t.shape,"if (isnan(x)) return x;\n  return sin(x);\n");return this.compileAndRun(e,[t])}cos(t){const e=new Vv(t.shape,"if (isnan(x)) return x;\n  return cos(x);\n");return this.compileAndRun(e,[t])}tan(t){const e=new Vv(t.shape,"return tan(x);");return this.compileAndRun(e,[t])}asin(t){const e=new Vv(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(e,[t])}acos(t){const e=new Vv(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(e,[t])}atan(t){const e=new Vv(t.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(e,[t])}atan2(t,e){const r=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fw("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new pw("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",t.shape,e.shape);return this.compileAndRun(r,[t,e])}sinh(t){const e=new Vv(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}cosh(t){const e=new Vv(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}tanh(t){const e=new Vv(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])}asinh(t){const e=new Vv(t.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(e,[t])}acosh(t){const e=new Vv(t.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(e,[t])}atanh(t){const e=new Vv(t.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(e,[t])}erf(t){const e=new Vv(t.shape,'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n');return this.compileAndRun(e,[t])}step(t,e){const n=new Vv(t.shape,function(t=0){return`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t});\n  `}(e));return this.compileAndRun(n,[t])}conv2dByMatMul(t,e,r,s,a,i){const o=t.shape,l=this.texData.get(t.dataId),u=r.inChannels,c=o[0]*o[1]*o[2],h=r.outChannels,p="channelsLast"===r.dataFormat,d=(1===c||1===h)&&u>1e3,f=o[2]%2!=0&&!!l.isPacked;if(d||!n().getBool("WEBGL_LAZILY_UNPACK")||!n().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!f){const n=p?o[0]*o[1]*o[2]:o[0]*o[2]*o[3],l=this.reshape(t,[1,n,r.inChannels]),u=this.reshape(e,[1,r.inChannels,r.outChannels]);return this.reshape(this.fusedBatchMatMul({a:l,b:u,transposeA:!1,transposeB:!1,bias:s,activation:a,preluActivationWeights:i}),r.outShape)}const m=p?o[0]*o[1]*(o[2]+1):o[0]*o[2]*(o[3]+1),g={dataId:t.dataId,shape:[1,m,r.inChannels],dtype:t.dtype},y=l.shape;l.shape=l.shape.slice(),l.shape[l.shape.length-2]++,b(Cx(l.shape,g.shape),()=>`packed reshape ${l.shape} to ${g.shape} isn't free`);const x=this.reshape(e,[1,r.inChannels,r.outChannels]),w=this.fusedBatchMatMul({a:g,b:x,transposeA:!1,transposeB:!1,bias:s,activation:a,preluActivationWeights:i}),v=this.texData.get(w.dataId);return b(v.isPacked,()=>"batchMatMul result is expected to be packed"),l.shape=y,v.shape=r.outShape,Bn().makeTensorFromDataId(w.dataId,r.outShape,w.dtype)}conv2dWithIm2Row(t,e,n,r,s,a){const{filterWidth:i,filterHeight:o,inChannels:l,outWidth:u,outHeight:c,dataFormat:h}=n,p="channelsLast"===h,d=i*o*l,f=c*u,m=[d,f],g=t.squeeze([0]),y=e.reshape([1,d,-1]),b=new ov(m,g.shape,n),x=this.compileAndRun(b,[g]).reshape([1,m[0],m[1]]),w=null!=r,v=null!=a,N=s?pN(s,!0):null,C=new dv(x.shape,[1,f,n.outChannels],!0,!1,w,N,v),S=[x,y];r&&S.push(r),v&&S.push(a);const k=this.compileAndRun(C,S);return p?k.reshape([1,c,u,n.outChannels]):k.reshape([1,n.outChannels,c,u])}fusedConv2d({input:t,filter:e,convInfo:r,bias:s,activation:a,preluActivationWeights:i}){if(1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&("SAME"===r.padInfo.type||"VALID"===r.padInfo.type))return this.conv2dByMatMul(t,e,r,s,a,i);if(n().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,r,s,a,i);const o=null!=s,l=null!=i,u=a?pN(a,!1):null,c=new Ew(r,o,u,l),h=[t,e];return s&&h.push(s),i&&h.push(i),this.compileAndRun(c,h)}conv2d(t,e,r){if(1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&("SAME"===r.padInfo.type||"VALID"===r.padInfo.type))return this.conv2dByMatMul(t,e,r);if(n().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,r);const s=new Ew(r);return this.compileAndRun(s,[t,e])}conv2dDerInput(t,e,n){const r=new Nw(n);return this.compileAndRun(r,[t,e])}conv2dDerFilter(t,e,n){const r=new vw(n);return this.compileAndRun(r,[t,e])}fusedDepthwiseConv2D({input:t,filter:e,convInfo:r,bias:s,activation:a,preluActivationWeights:i}){const o=n().getBool("WEBGL_PACK_DEPTHWISECONV")&&r.strideWidth<=2&&r.outChannels/r.inChannels==1,l=a?pN(a,o):null,u=[t,e],c=null!=s,h=null!=i;let p;return c&&u.push(s),h&&u.push(i),o?(p=new $w(r,c,l,h),this.compileAndRun(p,u)):(p=new Tw(r,c,l,h),this.compileAndRun(p,u))}depthwiseConv2D(t,e,r){let s;return n().getBool("WEBGL_PACK_DEPTHWISECONV")&&r.strideWidth<=2&&r.outChannels/r.inChannels==1?(s=new $w(r),this.compileAndRun(s,[t,e])):(s=new Tw(r),this.compileAndRun(s,[t,e]))}depthwiseConv2DDerInput(t,e,n){const r=new Iw(n);return this.compileAndRun(r,[t,e])}depthwiseConv2DDerFilter(t,e,n){const r=new kw(n);return this.compileAndRun(r,[t,e])}conv3d(t,e,n){const r=new Aw(n);return this.compileAndRun(r,[t,e])}conv3dDerInput(t,e,n){const r=new Sw(n);return this.compileAndRun(r,[t,e])}conv3dDerFilter(t,e,n){const r=new Cw(n);return this.compileAndRun(r,[t,e])}maxPool(t,e){const n=new xv(e,"max",!1);return this.compileAndRun(n,[t])}avgPool(t,e){const n=new xv(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}maxPoolBackprop(t,e,n,r){const s=new xv(r,"max",!0),a=this.compileAndRun(s,[e]),i=new hv(r),o=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),o}avgPoolBackprop(t,e,n){const r=new ew(n);return this.compileAndRun(r,[t],e.dtype)}cast(t,e){return Hl(t,e,this)}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let s=0;for(let n=0;n<t.rank;n++)n!==e&&(r[s++]=t.shape[n]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[e]=n,o[n]=this.slice(t,a,i).reshape(r);return o}avgPool3d(t,e){const n=new wv(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}avgPool3dBackprop(t,e,n){const r=new nw(n);return this.compileAndRun(r,[t],e.dtype)}maxPool3d(t,e){const n=new wv(e,"max",!1);return this.compileAndRun(n,[t],"float32")}maxPool3dBackprop(t,e,n,r){const s=new wv(r,"max",!0),a=this.compileAndRun(s,[e]),i=new pv(r),o=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),o}reshape(t,e){const n=this.texData.get(t.dataId);if(n.isPacked&&!Cx(t.shape,e)&&(null===n.texture||!Cx(n.shape,e))){const n=this.packedReshape(t,e);return Bn().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}return jl(t,e)}resizeBilinear(t,e,r,s){const a=n().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new kv(t.shape,e,r,s):new Sv(t.shape,e,r,s);return this.compileAndRun(a,[t],"float32")}resizeBilinearBackprop(t,e,n){const r=new Cv(t,e,n);return this.compileAndRun(r,[t])}resizeNearestNeighbor(t,e,n,r){const s=new Ev(t.shape,e,n,r);return this.compileAndRun(s,[t])}resizeNearestNeighborBackprop(t,e,n){const r=new Iv(t,e,n);return this.compileAndRun(r,[t])}multinomial(t,e,n,r){const s=e?t:vi(t),a=s.shape[0],i=s.shape[1],o=new fv(a,i,n),l=o.getCustomSetupFunc(r);return this.compileAndRun(o,[s],"int32",l)}oneHot(t,e,n,r){const s=new mv(t.size,e,n,r);return this.compileAndRun(s,[t])}diag(t){const e=new Lw(t.size);return this.compileAndRun(e,[t])}cropAndResize(t,e,n,r,s,a){const i=new Rw(t.shape,e.shape,r,s,a);return this.compileAndRun(i,[t,e,n],"float32")}depthToSpace(t,e,n){b(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+e);const r=t.shape[0],s="NHWC"===n?t.shape[1]:t.shape[2],a="NHWC"===n?t.shape[2]:t.shape[3],i="NHWC"===n?t.shape[3]:t.shape[1],o=s*e,l=a*e,u=i/(e*e),c=new zw("NHWC"===n?[r,o,l,u]:[r,u,o,l],e,n);return this.compileAndRun(c,[t])}split(t,e,n){return oN(t,e,n)}scatterND(t,e,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:i,outputSize:o}=hn(0,t,n),l=[o/a,a],u=t.reshape([s,r]),c=e.reshape([s,a]);if(0===o)return jl(Kt([]),n);const h=Ws(0),p=new $v(s,r,u.rank,c.rank,i,l);return this.compileAndRun(p,[c,u,h]).reshape(n)}sparseToDense(t,e,n,r){const{sliceRank:s,numUpdates:a,strides:i,outputSize:o}=hn(0,t,n),l=new $v(a,s,t.rank,e.rank,i,[o,1],!1);return this.compileAndRun(l,[e,t,r]).reshape(n)}fft(t){return this.fftImpl(t,!1)}ifft(t){return this.fftImpl(t,!0)}fftImpl(t,e){const n=this.texData.get(t.dataId),r=new Hw(Uw,t.shape,e),s=new Hw(Gw,t.shape,e),a=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag)],i=this.compileAndRun(r,a),o=this.compileAndRun(s,a),l=this.complex(i,o).as2D(t.shape[0],t.shape[1]);return i.dispose(),o.dispose(),l}gatherND(t,e){const n=e.shape,r=n[n.length-1],[s,a,i,o]=on(t,e),l=e.reshape([a,r]),u=t.reshape([t.size/i,i]),c=new Kw(r,o,[a,i]);return this.compileAndRun(c,[u,l]).reshape(s)}fill(t,e,n){if("string"===(n=n||U(e))){const r=_(n,N(t));return r.fill(e),Bn().makeTensor(r,t,n,this)}{const r=new jw(t,e),s=r.getCustomSetupFunc(e);return this.compileAndRun(r,[],n,s)}}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)}zerosLike(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)}linspace(t,e,n){return ql(t,e,n)}makeTensorInfo(t,e){const n=this.write(null,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}}makeOutput(t,e){const{dataId:n}=this.makeTensorInfo(t,e);return Bn().makeTensorFromDataId(n,t,e,this)}unpackTensor(t){const e=new aN(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){const e=new gv(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)}packedReshape(t,e){const n=[xx(t.shape),...wx(t.shape)],r={dtype:t.dtype,shape:n,dataId:t.dataId},s=[xx(e),...wx(e)],a=new Nv(s,n),i=this.runWebGLProgram(a,[r],t.dtype,null,!0);return{dataId:i.dataId,shape:e,dtype:i.dtype}}decode(t){const e=this.texData.get(t),{isPacked:n,shape:r,dtype:s}=e,a=vx(r);let i;i=n?new Mw(a):new Ow(a);return{dtype:s,shape:r,dataId:this.runWebGLProgram(i,[{shape:a,dtype:s,dataId:t}],s,null,!0).dataId}}runWebGLProgram(t,e,r,s,a=!1){const i=this.makeTensorInfo(t.outputShape,r),o=this.texData.get(i.dataId);if(t.packedOutput&&(o.isPacked=!0),t.outPackingScheme===Qb.DENSE){const e=rx(t.outputShape);o.texShape=e.map(t=>2*t)}if(null!=t.outTexUsage&&(o.usage=t.outTexUsage),0===N(i.shape))return o.values=D(i.dtype,0),i;const l=[],u=e.map(e=>{if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let r=this.texData.get(e.dataId);if(null==r.texture){if(!t.packedInputs&&N(e.shape)<=n().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:r.values};t.packedInputs&&(r.isPacked=!0,r.shape=e.shape)}else if(!!r.isPacked!=!!t.packedInputs)e=r.isPacked?this.unpackTensor(e):this.packTensor(e),l.push(e),r=this.texData.get(e.dataId);else if(r.isPacked&&!Cx(r.shape,e.shape)){const t=e,n=e.shape;e.shape=r.shape,e=this.packedReshape(e,n),l.push(e),r=this.texData.get(e.dataId),t.shape=n}return this.uploadToGPU(e.dataId),{shape:e.shape,texData:r,isUniform:!1}});this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:o,isUniform:!1},h=function(t,e,n){let r="";e.concat(n).forEach(t=>{const e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${n}_${e}`});const s=t.userCode;let a=t.constructor.name;return a+="_"+r+"_"+s,a}(t,u,c),p=this.getAndSaveBinary(h,()=>function(t,e,r,s){const a=e.userCode,i=r.map((t,n)=>{const r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}}),o=i.map(t=>t.shapeInfo),l={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},u=Wx(i,l,a,e.packedInputs),c=t.createProgram(u);let h=null;const p=t.getUniformLocation(c,"NAN",!1);1===n().getNumber("WEBGL_VERSION")&&(h=t.getUniformLocation(c,"INFINITY",!1));const d={};for(let n=0;n<e.variableNames.length;n++){const r=e.variableNames[n],s=!1;d[r]=t.getUniformLocation(c,r,s),d["offset"+r]=t.getUniformLocation(c,"offset"+r,s)}return{program:e,source:u,webGLProgram:c,uniformLocations:d,inShapeInfos:o,outShapeInfo:l,infLoc:h,nanLoc:p}}(this.gpgpu,t,u,c)),d=null!=this.activeTimers;let f;if(d&&(f=this.startTimer()),function(t,e,r,s,a){iv(e.inShapeInfos,r),iv([e.outShapeInfo],[s]);const i=s.texData.texture,o=s.texData.texShape;s.texData.isPacked?t.setOutputPackedMatrixTexture(i,o[0],o[1]):t.setOutputMatrixTexture(i,o[0],o[1]),t.setProgram(e.webGLProgram),1===n().getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),r.forEach((n,r)=>{const s=e.program.variableNames[r],a=e.uniformLocations[s],i=e.uniformLocations["offset"+s];if(null!=a)if(n.isUniform)if(N(n.shape)<2)t.gl.uniform1f(a,n.uniformValues[0]);else{let e=n.uniformValues;e instanceof Float32Array||(e=new Float32Array(e)),t.gl.uniform1fv(a,e)}else null!=n.texData.slice&&null!=i&&t.gl.uniform1i(i,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,a,r)}),null!=a&&a(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,p,u,c,s),l.forEach(t=>this.disposeData(t.dataId)),d&&(f=this.endTimer(f),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(f)})),!n().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===a){const t=this.unpackTensor(i);return this.disposeData(i.dataId),t}return i}compileAndRun(t,e,n,r,s=!1){n=n||e[0].dtype;const a=this.runWebGLProgram(t,e,n,r,s);return Bn().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!n().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach(t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]})}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Wn(()=>{if(!n().get("WEBGL_RENDER_FLOAT32_ENABLED")){const t=n().getBool("DEBUG");n().set("DEBUG",!1);const e=this.abs(Ws(1e-8)).dataSync()[0];if(n().set("DEBUG",t),e>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(t){const e=this.texData.get(t),{shape:r,dtype:s,values:a,texture:i,usage:o,isPacked:l}=e;if(null!=i)return;const u=null!=this.activeTimers;let c;u&&(c=Z());let h=e.texShape;if(null==h&&(h=function(t,e=!1){let r=n().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e&&(r*=2,1===(t=t.map((e,n)=>n>=t.length-2?g(t[n]):t[n])).length&&(t=[2,t[0]])),2!==t.length){const e=R(t);t=e.newShape}let s=N(t);if(t.length<=1&&s<=r)return[1,s];if(2===t.length&&t[0]<=r&&t[1]<=r)return t;if(3===t.length&&t[0]*t[1]<=r&&t[2]<=r)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=r&&t[1]*t[2]<=r)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=r&&t[3]<=r)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=r&&t[1]*t[2]*t[3]<=r)return[t[0],t[1]*t[2]*t[3]];if(e){const e=xx(t);let n=2,r=2;return t.length&&([n,r]=wx(t)),s=e*(n/2)*(r/2),I(s).map(t=>2*t)}return I(s)}(r,l),e.texShape=h),null!=a){const t=vx(r);let n,i=h[1],o=h[0];const p=a instanceof Uint8Array;l?([i,o]=sx(h[0],h[1]),n=new Vw(t,[o,i],p)):n=new Ww(t,[o,i],p);const d=this.makeTensorInfo([o,i],s);this.texData.get(d.dataId).usage=p?tx.PIXELS:tx.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(d.dataId),i,o,a);const f=!0,m=this.runWebGLProgram(n,[d],s,null,f),g=this.texData.get(m.dataId);e.texture=g.texture,e.texShape=g.texShape,e.isPacked=g.isPacked,e.usage=g.usage,this.disposeData(d.dataId),this.texData.delete(m.dataId),e.values=null,u&&(this.uploadWaitMs+=Z()-c)}else{const t=this.acquireTexture(h,o,s,l);e.texture=t}}convertAndCacheOnCPU(t,e){const n=this.texData.get(t),{dtype:r}=n;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){const n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length);for(let e=0;e<n.length;++e)n[e]=Math.round(t[e]);return n}throw new Error("Unknown dtype "+e)}(e,r)),n.values}acquireTexture(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const t=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${t} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,r)}computeBytes(t,e){return t[0]*t[1]*L(e)}}Lt()&&Hn("webgl",()=>new dN,2);const fN={kernelName:"Div",backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{a:r,b:s}=t;return function(t,e,r){let s=new pw("\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",t.shape,e.shape);return n().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&(s=new fw("\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",t.shape,e.shape,!0)),r.runWebGLProgram(s,[t,e],"float32")}(r,s,e)}};class mN{constructor(t){this.variableNames=["Image"],this.outputShape=[];const e=t[2];this.outputShape=t,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${e} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${e}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const gN={kernelName:"FlipLeftRight",backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{image:n}=t,r=e,s=new mN(n.shape);return r.runWebGLProgram(s,[n],n.dtype)}};class yN{constructor(t){this.variableNames=["A"];const e=Mx(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class bN{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=Mx(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const xN={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:r,attrs:s}=t;let{pixels:a}=e;const{numChannels:i}=s,o="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,l="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,[u,c]=o?[a.videoWidth,a.videoHeight]:[a.width,a.height],h=[c,u],p=[c,u,i];(l||o)&&(null==wN&&(wN=document.createElement("canvas").getContext("2d")),wN.canvas.width=u,wN.canvas.height=c,wN.drawImage(a,0,0,u,c),a=wN.canvas);const d=r.makeTensorInfo(h,"int32");r.texData.get(d.dataId).usage=tx.PIXELS,r.gpgpu.uploadPixelDataToTexture(r.getTexture(d.dataId),a);const f=n().getBool("WEBGL_PACK")?new bN(p):new yN(p),m=r.runWebGLProgram(f,[d],"int32");return r.disposeData(d.dataId),m}};let wN;const{maxImpl:vN,transposeImpl:NN}=Sb;function CN(t,e,n,r){const s=function(t){const e=[];for(;0===e.length||1!==e[e.length-1].outSize;){const n=e.length?e[e.length-1].outSize:t[1],r=$s(n);e.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return e}(t.shape);let a=t;for(let i=0;i<s.length;i++){const{inSize:o,windowSize:l,outSize:u}=s[i],c=new vv({windowSize:l,inSize:o,batchSize:t.shape[0],outSize:u},n),h=a;a=r.runWebGLProgram(c,[a],e),h.dataId!==t.dataId&&r.disposeData(h.dataId)}return a}function SN(t,e,n){const r=n.texData.get(t.dataId);return!r.isPacked||Cx(t.shape,e)||null!==r.texture&&Cx(r.shape,e)?{dataId:t.dataId,shape:e,dtype:t.dtype}:function(t,e,n){const r=[xx(t.shape),...wx(t.shape)],s={dtype:t.dtype,shape:r,dataId:t.dataId},a=[xx(e),...wx(e)],i=new Nv(a,r),o=n.runWebGLProgram(i,[s],t.dtype,null,!0);return{dataId:o.dataId,shape:e,dtype:o.dtype}}(t,e,n)}class kN{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;const r=Jx(this.rank),s=function(t){const e=t.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(e);for(let e=0;e<t.length;e++)r[t[e]]=n[e];return r.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class IN{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=Jx(this.rank),s=Fx("rc",this.rank),a=new Array(this.rank);for(let t=0;t<e.length;t++)a[e[t]]=s[t];const i=`vec2(${a.slice(-2).join()})`,o=`++${s[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function EN(t,e,r){const s=n().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new IN(t.shape,e):new kN(t.shape,e);return r.runWebGLProgram(s,[t],t.dtype)}const AN={kernelName:"Max",backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{reductionIndices:s,keepDims:a}=e,i=n,o=r.shape.length,l=$(s,r.shape);let u=l;const c=ir(u,o),h=null!=c,p=i.shouldExecuteOnCPU([r]);let d=r;if(h){if(p){const t=i.texData.get(d.dataId).values,e=new Array(o);for(let t=0;t<e.length;t++)e[t]=r.shape[c[t]];const n=NN(t,r.shape,r.dtype,c,e);d=i.makeTensorInfo(e,r.dtype),i.texData.get(d.dataId).values=n}else d=EN(r,c,i);u=lr(u.length,o)}ar("max",u,o);const[f,m]=rr(d.shape,u);let g,y=f;if(a&&(y=sr(f,l)),p){const t=i.texData.get(d.dataId).values,e=vN(t,N(m),y,r.dtype);g=i.makeTensorInfo(y,r.dtype),i.texData.get(g.dataId).values=e}else g=function(t,e,n,r){const s=N(e),a=SN(t,[N(t.shape)/s,s],r),i=CN(a,t.dtype,"max",r);return a.dataId!==t.dataId&&r.disposeData(a.dataId),SN(i,n,r)}(d,m,y,i);return h&&i.disposeData(d.dataId),g}};const TN={kernelName:"MaxPoolWithArgmax",backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=e,l=n;b(4===r.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`);const u=[1,1];b(Tr(a,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);const c=xr(r.shape,s,a,u,i),[h,p]=function(t,e,n,r){let s=new xv(n,"max",!1);const a=r.runWebGLProgram(s,[t],"float32");return s=new xv(n,"max",!0,!0,e),[a,r.runWebGLProgram(s,[t],"float32")]}(r,o,c,l);return[h,p]}},$N={kernelName:"NonMaxSuppressionV3",backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{Ml("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=n,l=e;return Lo(l.readSync(r.dataId),l.readSync(s.dataId),a,i,o)}},RN=Bo,DN={kernelName:"NonMaxSuppressionV4",backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{Ml("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,padToMaxOutputSize:l}=n,u=e,c=u.readSync(r.dataId),h=u.readSync(s.dataId),{selectedIndices:p,validOutputs:d}=RN(c,h,a,i,o,l);return[p,d]}},_N=Po,FN={kernelName:"NonMaxSuppressionV5",backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{Ml("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=n,u=e,c=u.readSync(r.dataId),h=u.readSync(s.dataId),p=a,d=i,f=o,m=l,{selectedIndices:g,selectedScores:y}=_N(c,h,p,d,f,m);return[g,y]}};class ON{constructor(t,e,n,r){this.variableNames=["Image"],this.outputShape=[];const s=t[1],a=t[2],i=Math.sin(e).toFixed(3),o=Math.cos(e).toFixed(3);this.outputShape=t;const[l,u]=Tl(r,s,a),c=l.toFixed(3),h=u.toFixed(3);let p="";p="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${c}) * ${o} - (float(y) - ${h}) * ${i};\n          float coordYFloat = (float(x) - ${c}) * ${i} + (float(y) - ${h}) * ${o};\n          int coordX = int(round(coordXFloat + ${c}));\n          int coordY = int(round(coordYFloat + ${h}));\n          ${p}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${s}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const MN=[AN,gN,xN,fN,TN,$N,DN,FN,{kernelName:"RotateWithOffset",backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,{radians:s,fillValue:a,center:i}=e,o=n,l=new ON(r.shape,s,a,i);return o.runWebGLProgram(l,[r],r.dtype)}},{kernelName:"Square",backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e,s=new Vv(n.shape,"return x * x;");return r.runWebGLProgram(s,[n],n.dtype)}},{kernelName:"SquaredDifference",backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{a:r,b:s}=t,a=e,i=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fw("return (a - b) * (a - b);",r.shape,s.shape):new pw("return (a - b) * (a - b);",r.shape,s.shape);return a.compileAndRun(i,[r,s])}},{kernelName:"Transpose",backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{perm:s}=e,a=n,i=r.shape.length,o=new Array(i);for(let t=0;t<o.length;t++)o[t]=r.shape[s[t]];let l;if(a.shouldExecuteOnCPU([r])){const t=a.texData.get(r.dataId).values,e=NN(t,r.shape,r.dtype,s,o);l=a.makeTensorInfo(o,r.dtype),a.texData.get(l.dataId).values=e}else l=EN(r,s,a);return l}}];for(const t of MN)h(t);const zN={"tfjs-core":"2.4.0","tfjs-backend-cpu":"2.4.0","tfjs-backend-webgl":"2.4.0","tfjs-data":"2.4.0","tfjs-layers":"2.4.0","tfjs-converter":"2.4.0",tfjs:"2.4.0"};t.Abs="Abs",t.Acos="Acos",t.Acosh="Acosh",t.AdadeltaOptimizer=bl,t.AdagradOptimizer=xl,t.AdamOptimizer=wl,t.AdamaxOptimizer=vl,t.Add="Add",t.AddN="AddN",t.All="All",t.Any="Any",t.ArgMax="ArgMax",t.ArgMin="ArgMin",t.Asin="Asin",t.Asinh="Asinh",t.Atan="Atan",t.Atan2="Atan2",t.Atanh="Atanh",t.AvgPool="AvgPool",t.AvgPool3D="AvgPool3D",t.AvgPool3DBackprop="AvgPool3DBackprop",t.AvgPoolBackprop="AvgPoolBackprop",t.BatchMatMul="BatchMatMul",t.BatchToSpaceND="BatchToSpaceND",t.BroadcastTo="BroadcastTo",t.Callback=ng,t.CallbackList=wp,t.Cast="Cast",t.Ceil="Ceil",t.ClipByValue="ClipByValue",t.Complex="Complex",t.Concat="Concat",t.Conv2D="Conv2D",t.Conv2DBackpropFilter="Conv2DBackpropFilter",t.Conv2DBackpropInput="Conv2DBackpropInput",t.Conv3D="Conv3D",t.Conv3DBackpropFilterV2="Conv3DBackpropFilterV2",t.Conv3DBackpropInputV2="Conv3DBackpropInputV2",t.Cos="Cos",t.Cosh="Cosh",t.CropAndResize="CropAndResize",t.Cumsum="Cumsum",t.CustomCallback=Cp,t.DataStorage=Ql,t.DepthToSpace="DepthToSpace",t.DepthwiseConv2dNative="DepthwiseConv2dNative",t.DepthwiseConv2dNativeBackpropFilter="DepthwiseConv2dNativeBackpropFilter",t.DepthwiseConv2dNativeBackpropInput="DepthwiseConv2dNativeBackpropInput",t.Diag="Diag",t.Dilation2D="Dilation2D",t.Dilation2DBackpropFilter="Dilation2DBackpropFilter",t.Dilation2DBackpropInput="Dilation2DBackpropInput",t.Div="Div",t.EarlyStopping=ag,t.Elu="Elu",t.EluGrad="EluGrad",t.Environment=e,t.Equal="Equal",t.Erf="Erf",t.Exp="Exp",t.Expm1="Expm1",t.FFT="FFT",t.Fill="Fill",t.FlipLeftRight="FlipLeftRight",t.Floor="Floor",t.FloorDiv="FloorDiv",t.FromPixels="FromPixels",t.FusedBatchNorm="FusedBatchNorm",t.FusedConv2D="FusedConv2D",t.FusedDepthwiseConv2D="FusedDepthwiseConv2D",t.GatherNd="GatherNd",t.GatherV2="GatherV2",t.GraphModel=cy,t.Greater="Greater",t.GreaterEqual="GreaterEqual",t.History=Np,t.IFFT="IFFT",t.Identity="Identity",t.Imag="Imag",t.InputSpec=lp,t.IsFinite="IsFinite",t.IsInf="IsInf",t.IsNan="IsNan",t.KernelBackend=tu,t.LRN="LRN",t.LRNBackprop="LRNBackprop",t.LayerVariable=ap,t.LayersModel=Dd,t.Less="Less",t.LessEqual="LessEqual",t.LinSpace="LinSpace",t.Log="Log",t.Log1p="Log1p",t.LogSoftmax="LogSoftmax",t.LogicalAnd="LogicalAnd",t.LogicalNot="LogicalNot",t.LogicalOr="LogicalOr",t.Max="Max",t.MaxPool="MaxPool",t.MaxPool3D="MaxPool3D",t.MaxPool3DBackprop="MaxPool3DBackprop",t.MaxPoolBackprop="MaxPoolBackprop",t.MaxPoolWithArgmax="MaxPoolWithArgmax",t.Maximum="Maximum",t.Mean="Mean",t.Min="Min",t.Minimum="Minimum",t.Mod="Mod",t.MomentumOptimizer=Cl,t.Multiply="Multiply",t.Negate="Negate",t.NonMaxSuppressionV3="NonMaxSuppressionV3",t.NonMaxSuppressionV4="NonMaxSuppressionV4",t.NonMaxSuppressionV5="NonMaxSuppressionV5",t.NotEqual="NotEqual",t.OP_SCOPE_SUFFIX="__op",t.OneHot="OneHot",t.OnesLike="OnesLike",t.Optimizer=yl,t.PadV2="PadV2",t.Pool="Pool",t.Pow="Pow",t.Prelu="Prelu",t.Prod="Prod",t.RMSPropOptimizer=Sl,t.RNN=Ff,t.Range="Range",t.Real="Real",t.Reciprocal="Reciprocal",t.Relu="Relu",t.Relu6="Relu6",t.Reshape="Reshape",t.ResizeBilinear="ResizeBilinear",t.ResizeBilinearGrad="ResizeBilinearGrad",t.ResizeNearestNeighbor="ResizeNearestNeighbor",t.ResizeNearestNeighborGrad="ResizeNearestNeighborGrad",t.Reverse="Reverse",t.RotateWithOffset="RotateWithOffset",t.Round="Round",t.Rsqrt="Rsqrt",t.SGDOptimizer=Nl,t.ScatterNd="ScatterNd",t.SelectV2="SelectV2",t.Selu="Selu",t.Sequential=Od,t.Sigmoid="Sigmoid",t.Sign="Sign",t.Sin="Sin",t.Sinh="Sinh",t.Slice="Slice",t.Softmax="Softmax",t.Softplus="Softplus",t.SpaceToBatchND="SpaceToBatchND",t.SparseToDense="SparseToDense",t.SplitV="SplitV",t.Sqrt="Sqrt",t.Square="Square",t.SquaredDifference="SquaredDifference",t.Step="Step",t.StridedSlice="StridedSlice",t.Sub="Sub",t.Sum="Sum",t.SymbolicTensor=up,t.Tan="Tan",t.Tanh="Tanh",t.Tensor=yt,t.TensorBuffer=dt,t.Tile="Tile",t.TopK="TopK",t.Transpose="Transpose",t.Unpack="Unpack",t.UnsortedSegmentSum="UnsortedSegmentSum",t.Variable=bt,t.ZerosLike="ZerosLike",t._FusedMatMul="_FusedMatMul",t.abs=Jn,t.acos=Zn,t.acosh=Qn,t.add=qn,t.addN=tr,t.addStrict=Ji,t.all=ur,t.any=cr,t.argMax=hr,t.argMin=pr,t.asin=dr,t.asinh=fr,t.atan=mr,t.atan2=gr,t.atanh=yr,t.avgPool=Rr,t.avgPool3d=Dr,t.backend=jn,t.backend_util=Kl,t.basicLSTMCell=Br,t.batchNorm=Vr,t.batchNorm2d=Ur,t.batchNorm3d=Gr,t.batchNorm4d=Hr,t.batchToSpaceND=Pr,t.booleanMaskAsync=Gi,t.broadcastTo=jr,t.browser=an,t.buffer=Re,t.callbacks=ig,t.cast=De,t.ceil=qr,t.clipByValue=Kr,t.clone=_e,t.complex=jt,t.concat=Or,t.concat1d=Xr,t.concat2d=Yr,t.concat3d=Jr,t.concat4d=Zr,t.constraints=Hc,t.conv1d=ts,t.conv2d=Qr,t.conv2dTranspose=ns,t.conv3d=rs,t.conv3dTranspose=as,t.cos=is,t.cosh=os,t.cosineWindow=fo,t.cumsum=ls,t.customGrad=Ys,t.data=hb,t.deprecationWarn=Ln,t.depthToSpace=us,t.depthwiseConv2d=cs,t.deregisterOp=function(t){delete ug[t]},t.device_util=Bt,t.diag=hs,t.dilation2d=ps,t.disableDeprecationWarnings=function(){n().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")},t.dispose=Vn,t.disposeVariables=function(){Ot.disposeVariables()},t.div=Xn,t.divNoNan=xs,t.divStrict=Zi,t.dot=ws,t.dropout=ho,t.elu=vs,t.enableDebugMode=function(){n().set("DEBUG",!0)},t.enableProdMode=function(){n().set("PROD",!0)},t.enclosingPowerOfTwo=po,t.engine=Bn,t.env=n,t.equal=gs,t.equalStrict=Hi,t.erf=Ns,t.exp=Cs,t.expandDims=Ss,t.expm1=ks,t.eye=Es,t.fft=Ni,t.fill=As,t.findBackend=function(t){return Ot.findBackend(t)},t.findBackendFactory=function(t){return Ot.findBackendFactory(t)},t.floor=Ts,t.floorDiv=Kn,t.fused=Io,t.gather=_s,t.gatherND=co,t.gather_util=ln,t.getBackend=function(){return Ot.backendName},t.getGradient=u,t.getKernel=l,t.getKernelsForBackend=c,t.grad=function(t){return b(G(t),()=>"The f passed in grad(f) must be a function"),(e,n)=>{const r=Ut(e,"x","tf.grad",null),s=null!=n?Ut(n,"dy","tf.grad"):null;return Ot.tidy(()=>{const{value:e,grads:n}=Ot.gradients(()=>t(r),[r],s);return null!=s&&x(e.shape,s.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),Js(n),n[0]})}},t.grads=function(t){return b(G(t),()=>"The f passed in grads(f) must be a function"),(e,n)=>{b(Array.isArray(e),()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");const r=Gt(e,"args","tf.grads",null),s=null!=n?Ut(n,"dy","tf.grads"):null;return Ot.tidy(()=>{const{value:e,grads:n}=Ot.gradients(()=>t(...r),r,s);return null!=s&&x(e.shape,s.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Js(n),n})}},t.greater=Fs,t.greaterEqual=Os,t.greaterEqualStrict=ji,t.greaterStrict=qi,t.ifft=Ci,t.imag=Ms,t.image=fl,t.inTopKAsync=mo,t.initializers=Xh,t.input=Md,t.io=Xe,t.irfft=Si,t.isFinite=zs,t.isInf=Ls,t.isNaN=Bs,t.keep=Un,t.kernel_impls=Zl,t.layers=Zm,t.leakyRelu=Vs,t.less=Us,t.lessEqual=Gs,t.lessEqualStrict=Ki,t.lessStrict=Xi,t.linalg=ml,t.linspace=Hs,t.loadGraphModel=async function(t,e={}){if(null==t)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==e&&(e={}),e.fromTFHub&&null==t.load&&(t.endsWith("/")||(t+="/"),t+="model.json?tfjs-format=file");const n=new cy(t,e);return await n.load(),n},t.loadLayersModel=function(t,e){return null==e&&(e={}),Fd(t,e)},t.localResponseNormalization=js,t.log=qs,t.log1p=Ks,t.logSigmoid=ta,t.logSoftmax=sa,t.logSumExp=aa,t.logicalAnd=ia,t.logicalNot=oa,t.logicalOr=la,t.logicalXor=ua,t.losses=gl,t.matMul=Je,t.math=en,t.max=ea,t.maxPool=ca,t.maxPool3d=ha,t.maxPoolWithArgmax=pa,t.maximum=Ps,t.maximumStrict=Qi,t.mean=ma,t.memory=Pn,t.metrics=Qm,t.min=ga,t.minimum=ya,t.minimumStrict=to,t.mod=ba,t.modStrict=eo,t.model=function(t){return new Dd(t)},t.models=tg,t.moments=wa,t.movingAverage=oo,t.mul=Yn,t.mulStrict=no,t.multiRNNCell=va,t.multinomial=Na,t.neg=Zs,t.nextFrame=Al,t.norm=io,t.notEqual=Ca,t.notEqualStrict=Yi,t.oneHot=Ze,t.ones=fa,t.onesLike=ka,t.op=Ht,t.outerProduct=Ia,t.pad=Ea,t.pad1d=Aa,t.pad2d=Ta,t.pad3d=$a,t.pad4d=Ra,t.pool=_a,t.pow=Fa,t.powStrict=ro,t.prelu=Oa,t.print=Fe,t.prod=Ma,t.profile=function(t){return Ot.profile(t)},t.rand=za,t.randomGamma=Ya,t.randomNormal=Ja,t.randomUniform=Za,t.range=ti,t.ready=function(){return Ot.ready()},t.real=Sa,t.reciprocal=ei,t.registerBackend=Hn,t.registerCallbackConstructor=function(t,e){kp.registerCallbackConstructor(t,e)},t.registerGradient=p,t.registerKernel=h,t.registerOp=function(t,e){const n={tfOpName:t,category:"custom",inputs:[],attrs:[],customExecutor:e};ug[t]=n},t.regularizers=eg,t.relu=ni,t.relu6=ri,t.removeBackend=function(t){Ot.removeBackend(t)},t.reshape=Ye,t.reverse=si,t.reverse1d=ai,t.reverse2d=ii,t.reverse3d=oi,t.reverse4d=li,t.rfft=Ei,t.round=ui,t.rsqrt=ci,t.scalar=Ws,t.scatterND=lo,t.scatter_util=pn,t.selu=hi,t.separableConv2d=pi,t.sequential=function(t){return new Od(t)},t.serialization=Dn,t.setBackend=Gn,t.setPlatform=function(t,e){n().setPlatform(t,e)},t.setdiff1dAsync=di,t.sigmoid=Mr,t.sign=fi,t.signal=dl,t.sin=mi,t.sinh=gi,t.slice=zr,t.slice1d=yi,t.slice2d=bi,t.slice3d=xi,t.slice4d=wi,t.slice_util=An,t.softmax=vi,t.softplus=Qs,t.spaceToBatchND=Da,t.sparseToDense=uo,t.spectral=pl,t.split=Ii,t.sqrt=Ai,t.square=xa,t.squaredDifference=Ti,t.squaredDifferenceStrict=so,t.squeeze=$i,t.stack=Ri,t.step=Di,t.stridedSlice=_i,t.sub=na,t.subStrict=ao,t.sum=ra,t.sumOutType=It,t.tan=Fi,t.tanh=Lr,t.tensor=Kt,t.tensor1d=Qa,t.tensor2d=Oi,t.tensor3d=nn,t.tensor4d=Mi,t.tensor5d=function(t,e,n){if(w(t),null!=e&&5!==e.length)throw new Error("tensor5d() requires shape to have five numbers");const r=Wt(t,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return qt(t,e,r,n)},t.tensor6d=function(t,e,n){if(w(t),null!=e&&6!==e.length)throw new Error("tensor6d() requires shape to have six numbers");const r=Wt(t,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return qt(t,e=e||r,r,n)},t.tensor_util=Rt,t.test_util=zn,t.tidy=Wn,t.tile=Is,t.time=function(t){return Ot.time(t)},t.topk=zi,t.train=Il,t.transpose=Qe,t.truncatedNormal=Li,t.unregisterGradient=function(t){if(!o.has(t))throw new Error(`The gradient '${t}' for backend is not registered`);o.delete(t)},t.unregisterKernel=function(t,e){const n=d(t,e);if(!i.has(n))throw new Error(`The kernel '${t}' for backend '${e}' is not registered`);i.delete(n)},t.unsortedSegmentSum=Bi,t.unstack=Pi,t.upcastType=kt,t.util=at,t.valueAndGrad=function(t){return b(G(t),()=>"The f passed in valueAndGrad(f) must be a function"),(e,n)=>{b(e instanceof yt,()=>"The x passed in valueAndGrad(f)(x) must be a tensor"),b(null==n||n instanceof yt,()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");const{grads:r,value:s}=Ot.gradients(()=>t(e),[e],n);return Js(r),{grad:r[0],value:s}}},t.valueAndGrads=function(t){return b(G(t),()=>"The f passed in valueAndGrads(f) must be a function"),(e,n)=>{b(Array.isArray(e)&&e.every(t=>t instanceof yt),()=>"The args passed in valueAndGrads(f)(args) must be array of tensors"),b(null==n||n instanceof yt,()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");const r=Ot.gradients(()=>t(...e),e,n);return null!=n&&x(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Js(r.grads),r}},t.variable=Wi,t.variableGrads=Xs,t.version=zN,t.version_converter="2.4.0",t.version_core="2.4.0",t.version_layers="2.4.0",t.where=ys,t.whereAsync=Ui,t.zeros=da,t.zerosLike=bs,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=tf.es2017.min.js.map
