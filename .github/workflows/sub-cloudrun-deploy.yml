name: Deploy to Cloud Run

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      image_digest:
        required: true
        type: string
        description: The image digest to deploy
      project_id:
        required: true
        type: string
        description: The project to deploy to
      region:
        required: true
        type: string
        description: The region to deploy to
      environment:
        required: false
        type: string
        description: The environment to deploy to
      min_instances:
        required: false
        type: string
        description: The minimum number of instances to deploy
        default: '0'
      max_instances:
        required: false
        type: string
        description: The maximum number of instances to deploy
        default: '100'
      cpu:
        required: false
        type: string
        description: The number of CPUs to use for the service
        default: '1'
      memory:
        required: false
        type: string
        description: The amount of memory to use for the service
        default: 256Mi

jobs:
  versioning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set.outputs.version }}
    steps:
      - name: Getting API Version
        id: get
        uses: actions/github-script@v7
        if: ${{ github.event_name == 'release' }}
        with:
          result-encoding: string
          script: |
            return context.payload.release.tag_name.substring(0,2)
      - uses: actions/checkout@v4
      - name: Check if release matches package version
        if: ${{ github.event_name == 'release' }}
        run: |
          if [[ "${{ github.ref_name }}" != "$(jq -r .version package.json)" ]]; then
            echo "Release number must match package version"
            exit 1
          fi
      - name: Setting API Version
        id: set
        run: echo "version=${{ steps.get.outputs.result }}" >> "$GITHUB_OUTPUT"

  deploy:
    name: Deploy to Cloud Run
    needs: [versioning]
    timeout-minutes: 10
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment:
      name: ${{ inputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.4.1

      - name: Authenticate to GCP
        id: auth
        uses: google-github-actions/auth@v2.0.0
        with:
          project_id: ${{ vars.GOOGLE_PROJECT_ID || inputs.project_id }}
          credentials_json: ${{ secrets.GAR_JSON_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2.0.1

      - name: Deploy to cloud run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2.0.0
        with:
          image: ${{ vars.GOOGLE_ARTIFACT_REGISTRY }}/${{ inputs.app_name }}@${{ inputs.image_digest }}
          service: ${{ inputs.app_name }}-${{ needs.versioning.outputs.version || env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          region: ${{ inputs.region }}
          env_vars: |
            ORY_SDK_TOKEN=${{ secrets.ORY_SDK_TOKEN }},
            CEDULA_API=${{ secrets.CEDULA_API }},
            CEDULA_API_KEY=${{ secrets.CEDULA_API_KEY }},
            JCE_PHOTO_API=${{ secrets.JCE_PHOTO_API }},
            JCE_PHOTO_API_KEY=${{ secrets.JCE_PHOTO_API_KEY }},
            SITE_COOKIE_KEY=${{ secrets.SITE_COOKIE_KEY }},
            ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }},
            RECAPTHA_API_KEY=${{ secrets.RECAPTHA_API_KEY }},
            CEDULA_TOKEN_API=${{ secrets.CEDULA_TOKEN_API }},
            CITIZENS_API_AUTH_KEY=${{ secrets.CITIZENS_API_AUTH_KEY }},
            RECAPTHA_PROJECT_ID=${{ vars.RECAPTHA_PROJECT_ID }},
            LIVENESS_CONFIDENCE_THRESHOLD=${{ vars.LIVENESS_CONFIDENCE_THRESHOLD }},
            LIVENESS_SIMILARITY_THRESHOLD=${{ vars.LIVENESS_SIMILARITY_THRESHOLD }},
            SENTRY_ORG=${{ vars.SENTRY_ORG }},
            SENTRY_PROJECT=${{ vars.SENTRY_PROJECT }},
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }},
          flags: |
            --min-instances=${{ inputs.min_instances }}
            --max-instances=${{ inputs.max_instances }}
            --cpu=${{ inputs.cpu }}
            --memory=${{ inputs.memory }}

      - name: Allow unauthenticated calls to the service
        run: |
          gcloud run services add-iam-policy-binding ${{ inputs.app_name }}-${{ needs.versioning.outputs.version || env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }} \
          --region=${{ inputs.region }} --member=allUsers --role=roles/run.invoker --quiet

      - name: Test service with cURL
        run: curl "${{ steps.deploy.outputs.url }}"
